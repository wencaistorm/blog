{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/Ultraman.jpg","path":"images/Ultraman.jpg","modified":0,"renderable":0},{"_id":"source/images/git-add.png","path":"images/git-add.png","modified":0,"renderable":0},{"_id":"source/images/git-checkout.png","path":"images/git-checkout.png","modified":0,"renderable":0},{"_id":"source/images/git-clone.png","path":"images/git-clone.png","modified":0,"renderable":0},{"_id":"source/images/git-commit-0.png","path":"images/git-commit-0.png","modified":0,"renderable":0},{"_id":"source/images/git-commit.png","path":"images/git-commit.png","modified":0,"renderable":0},{"_id":"source/images/git-diff-staged.png","path":"images/git-diff-staged.png","modified":0,"renderable":0},{"_id":"source/images/git-diff.png","path":"images/git-diff.png","modified":0,"renderable":0},{"_id":"source/images/git-log.png","path":"images/git-log.png","modified":0,"renderable":0},{"_id":"source/images/git-modify.png","path":"images/git-modify.png","modified":0,"renderable":0},{"_id":"source/images/git-reset.png","path":"images/git-reset.png","modified":0,"renderable":0},{"_id":"source/images/github-repo-settings-pages.jpg","path":"images/github-repo-settings-pages.jpg","modified":0,"renderable":0},{"_id":"source/images/github-repo-settings.jpg","path":"images/github-repo-settings.jpg","modified":0,"renderable":0},{"_id":"source/images/change-title.gif","path":"images/change-title.gif","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"2d03d50e0e09cdd937f86fd2f28534043b433616","modified":1515333613985},{"_id":"source/favicon.ico","hash":"3948ac5025fdef5484994a8e86c4a5215b7adb0f","modified":1515333613998},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1515333744570},{"_id":"themes/indigo/README.md","hash":"8a18bad26a2792c0249c7355c267479f0199e2e3","modified":1515333744570},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1515333744570},{"_id":"themes/indigo/_config.yml","hash":"a40958b6d6201640fb08de1f94f04236f676c483","modified":1515493091686},{"_id":"themes/indigo/package.json","hash":"b729a8c3d752e459312064937c028e821b5512be","modified":1515333744686},{"_id":"source/_data/head.yml","hash":"665987a23bd5b3f6319df2063aeab30c052edcd7","modified":1515333613986},{"_id":"source/_posts/GitHub-Pages.md","hash":"4ad6a9a8f40b1807774609e7f9886ae402216df2","modified":1515492605932},{"_id":"source/_posts/Linux-tips.md","hash":"211b30ef2085adca674a3a9185b234af5212cf9d","modified":1515336269062},{"_id":"source/_posts/apt-get-install-LAMP.md","hash":"bcd76d8864817b9b51b79a66ad7dc2d6757d4dc6","modified":1515336269069},{"_id":"source/_posts/gulp-debug.md","hash":"09a26f0422ca8444d61bb1320587959182f43b72","modified":1515336269110},{"_id":"source/_posts/hexo-admin.md","hash":"3abc73d67f292aa0c4c37fc3717ae4400bbb427d","modified":1515340130928},{"_id":"source/_posts/micro-code.md","hash":"344d3de4e6ea8bbf859310fd5ce9915c47216611","modified":1515336269129},{"_id":"source/_posts/react-event.md","hash":"a7cdeeadb539b342983eee1437c76151f559b300","modified":1515336269141},{"_id":"source/_posts/react-stop-propagation.md","hash":"c8b2683610e2ec3a11592ed8540633841dc145a6","modified":1515336269186},{"_id":"source/_posts/regexp.md","hash":"f5fe879874a8a39b8d23561bef05fa86f9c53e2d","modified":1515336269202},{"_id":"source/about/index.md","hash":"263417979640cbf0801b05755814f0c5045195f7","modified":1515333613997},{"_id":"source/categories/index.md","hash":"ce9ded8214b00d233ccd848ef90fdddb16db5894","modified":1515333613997},{"_id":"source/images/Ultraman.jpg","hash":"33a1de5824193a675e9b012471c3b29365a6923e","modified":1515333613999},{"_id":"source/images/git-add.png","hash":"d3fb956bffcd279460eddd848d7422b14921f0c2","modified":1515333614001},{"_id":"source/images/git-checkout.png","hash":"04c0b770d5ffdb236606aad84cd71433ae8ed3de","modified":1515333614002},{"_id":"source/images/git-clone.png","hash":"1d5f717c8717d0bdb53eca9780832ffead217815","modified":1515333614004},{"_id":"source/images/git-commit-0.png","hash":"7f6846b8aab29ce82cc2f1901e39fc4482e37538","modified":1515333614004},{"_id":"source/images/git-commit.png","hash":"5765127101bf72abd327af4227718b05269612b3","modified":1515333614005},{"_id":"source/images/git-diff-staged.png","hash":"064c9fc78abe95b18c7d021647021ca39d9508a4","modified":1515333614005},{"_id":"source/images/git-diff.png","hash":"f730ac9dfe50b32b59cc20c0881fc22deca40e2b","modified":1515333614006},{"_id":"source/images/git-log.png","hash":"334a10f33243f7c24ff225368705a0663b6722ee","modified":1515333614006},{"_id":"source/images/git-modify.png","hash":"c4a8c6f99f4c3d0a4b25bd997cca379d1df3a61c","modified":1515333614007},{"_id":"source/images/git-reset.png","hash":"b535f070f2a1177ded155daaba63bb449873d5bd","modified":1515333614007},{"_id":"source/images/github-repo-settings-pages.jpg","hash":"b7b8d6a08255c5f9a914d630655262c544809d4a","modified":1515492109631},{"_id":"source/images/github-repo-settings.jpg","hash":"6c880f7458dc9a7c4125dffdae86d39068312f05","modified":1515492105294},{"_id":"source/tags/index.md","hash":"41258f5d14aca48157b7dbbb123e2d3fd7725460","modified":1515333614008},{"_id":"source/soul/index.md","hash":"fd24c77fef7ca383274cb421015ac0afb57e50f1","modified":1515333614008},{"_id":"themes/indigo/.git/config","hash":"9ed67ab46d9188a3afa5666f8d1eb259ee2a344b","modified":1515333744556},{"_id":"themes/indigo/.git/COMMIT_EDITMSG","hash":"6070278c2e3b31bc1e40c485f66da5336bd2cbb0","modified":1515387793451},{"_id":"themes/indigo/.git/HEAD","hash":"72a3c38220873e06c2a07e3a89034a7bdfa15413","modified":1515333744546},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515333622156},{"_id":"themes/indigo/.git/index","hash":"ed875674a93a2a154b1865b80c7237b3d77d9f77","modified":1515387793450},{"_id":"themes/indigo/.git/packed-refs","hash":"9fd4b96421cdb9d1d1ac81ab179fa432e0e097ca","modified":1515333744489},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1515333744574},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1515333744575},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1515333744575},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1515333744575},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1515333744575},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1515333744654},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1515333744655},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1515333744655},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1515333744655},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1515333744670},{"_id":"themes/indigo/layout/links.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1515333744670},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1515333744670},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1515333744670},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1515333744685},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1515333744686},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1515333744687},{"_id":"source/images/change-title.gif","hash":"3917e75f90824cf1b58a1260d237b1df21833066","modified":1515333614001},{"_id":"source/_posts/git/git-branch.md","hash":"4eae83eef06eb6d9616e0054a582ca7f6d34adc1","modified":1515336269213},{"_id":"source/_posts/git/git-basic-usege.md","hash":"9949ed3b616ad9f45bbde00812f73a30bfecf4e0","modified":1515336269241},{"_id":"source/_posts/js/toggle-title-on-focus-and-blur.md","hash":"13017a8e0c1c2a70a36019b7d54a3e4c49e8ee25","modified":1515336269216},{"_id":"source/_posts/js/the-difference-of-get-and-post-method.md","hash":"ed7c9fddcc3f51b6131a36984e77856176a7b8f4","modified":1515336269276},{"_id":"source/_posts/js/trim 方法.md","hash":"6ef36a1a38ac25987be87b073c026de7e503307e","modified":1515336269261},{"_id":"source/_posts/js/近期用到的-jQuery-方法整理.md","hash":"294d034b13cc481d68bc59f0ee790112b9e02f2a","modified":1515336269263},{"_id":"source/_posts/tool/awesome-tools.md","hash":"447f65388a2c083b13c01a251b8bdcabca5f8386","modified":1515336269274},{"_id":"source/_posts/tool/awesome-windows-software-cmder.md","hash":"1c4eb05eaf08eaf00d419b85a07607c84d28769b","modified":1515336269279},{"_id":"source/_posts/tool/awesome.-chrome-extensions.md","hash":"64bd3127ac6814124e8e377a64f065bd8dcdf826","modified":1515336269268},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515333622192},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515333622191},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515333622194},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515333622195},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515333622202},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515333622201},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515333622202},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515333622203},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515333622203},{"_id":"themes/indigo/.git/logs/HEAD","hash":"990e2c60224d3b5f0668013f14200d21869b9c23","modified":1515387793452},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515333622203},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1515333622202},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1515333744584},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1515333744584},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1515333744584},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"acde2dd615512eb63d7a98e854d16b6cf2f5be86","modified":1515333744585},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"b6d99e2704205a7a57419a11d53807cc5cf8e824","modified":1515333744594},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1515333744598},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1515333744598},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1515333744599},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1515333744610},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1515333744646},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"31052bc524a10abd6871aed2415448ce585faff2","modified":1515333744654},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1515333744654},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1515333744654},{"_id":"themes/indigo/source/css/custom.css","hash":"b48065aa7ff83cc0ceee13bb866d0bd7de8c4d5f","modified":1515387437561},{"_id":"themes/indigo/source/css/style.less","hash":"27dc4b93b93e92824d748f66b85de343b6a68f71","modified":1515333744796},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1515333744799},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1515333744813},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1515333744813},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1515333744814},{"_id":"themes/indigo/source/img/logo.png","hash":"d1a89e6b161c5d09fed5457e6caed746627c47d8","modified":1515333744824},{"_id":"themes/indigo/source/js/custom.js","hash":"c6267e0f02c19394ae53e915d147d135199fdde7","modified":1515333744852},{"_id":"themes/indigo/source/js/main.js","hash":"78f3dd49bf34b29155f09c77fd9c7b2e9643bf98","modified":1515333744853},{"_id":"themes/indigo/source/js/main.min.js","hash":"70652f94832de4801ffe80bf59d09265ac84599f","modified":1515333744861},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1515333744862},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1515333744863},{"_id":"themes/indigo/.git/refs/heads/theme","hash":"7bb28d423f0f89238e728006082f25cfeccfec7e","modified":1515387793452},{"_id":"themes/indigo/.git/objects/33/25dd48f463aa2c34724361d270fbfdae90cece","hash":"85048393118aff8c1b3f31a606547411460a2b55","modified":1515387793448},{"_id":"themes/indigo/.git/objects/3f/34cd1a784756842c71db4481f2bdd63a47752f","hash":"9977f30346d33a09f5c0a94574559185cd165dbf","modified":1515387793451},{"_id":"themes/indigo/.git/objects/de/c317ec6bad16ebc0739d445da51faad83ee189","hash":"06c8bae10801283c0d726df073c03f8a52c77a54","modified":1515387793449},{"_id":"themes/indigo/.git/objects/8c/9d95412138a36ee74ff329256355dbd3db1693","hash":"fdb37126d6eb14edfa7cacc6798d419614656f53","modified":1515387793372},{"_id":"themes/indigo/.git/objects/4b/3a77a41f80e17a32f24ac9866f0a90f81b4e57","hash":"e4fce45f4a5d7cd1c9343e1c690d88b4d790146e","modified":1515387793448},{"_id":"themes/indigo/.git/objects/pack/pack-ba451c18ddfda9800cfe4f4510c185cbcd526be7.idx","hash":"c237308acab220811eee1294e1c66add2b1ba545","modified":1515333744426},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1515333744611},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1515333744626},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"0be60c9ba2214cb0ba63008ac4a58db6acf4c654","modified":1515333744627},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1515333744634},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1515333744635},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1515333744641},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1515333744641},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1515333744641},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1515333744642},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1515333744645},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1515333744612},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"ffd06f34b6d29d5306d1bb8965fcca0e41cdd5f7","modified":1515333744646},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1515333744646},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"964d4ba32e628a7567c344c51a487c485d931c3d","modified":1515333744646},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1515333744647},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1515333744651},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1515333744651},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1515333744651},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1515333744651},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1515333744652},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1515333744652},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1515333744652},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1515333744653},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"0d8f0a4ab14c227cd52802095fc4974b6a7aae67","modified":1515333744653},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1515333744653},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"9f8573ad56967befe7f7efd5e81ad4965de86914","modified":1515333744690},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1515333744689},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1515333744692},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1515333744693},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1515333744694},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1515333744695},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1515333744695},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1515333744696},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1515333744698},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1515333744698},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1515333744699},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1515333744712},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1515333744712},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1515333744713},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1515333744713},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1515333744716},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1515333744717},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"95f875ea42c88bb1dd14a7ad5360892107c7c62f","modified":1515333744851},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1515333744692},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"cff9d376cce7330206038a334ec429dcd453cc2f","modified":1515333744798},{"_id":"themes/indigo/.git/logs/refs/heads/theme","hash":"990e2c60224d3b5f0668013f14200d21869b9c23","modified":1515387793452},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515333744544},{"_id":"themes/indigo/.git/refs/remotes/origin/theme","hash":"7bb28d423f0f89238e728006082f25cfeccfec7e","modified":1515387799871},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1515333744752},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1515333744750},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1515333744759},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1515333744760},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1515333744763},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1515333744763},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1515333744764},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1515333744766},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1515333744766},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1515333744767},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1515333744769},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1515333744770},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1515333744775},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1515333744789},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1515333744788},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1515333744752},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1515333744762},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1515333744765},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1515333744769},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1515333744788},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515333744736},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515333744736},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/theme","hash":"5315726803daf9a2faf7204dfef8ab21336edcf8","modified":1515387799873},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"addf966b2aeeb4a596e45a04743321c707c9aaea","modified":1515333744544},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515333744719},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515333744722},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515333744735},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515333744726},{"_id":"themes/indigo/.git/objects/pack/pack-ba451c18ddfda9800cfe4f4510c185cbcd526be7.pack","hash":"6591076f07429cd7821d37a20b6ef1ed0636fb2d","modified":1515387793000},{"_id":"public/content.json","hash":"8659733c81c51aa470d2ae7e75c9c74cbbe0d3e2","modified":1515493369208},{"_id":"public/atom.xml","hash":"28a0b51cfb29c0cf1c1b3bddf9de880ad7352750","modified":1515493370578},{"_id":"public/about/index.html","hash":"63c5877c6e52195dc6f82cf3ad89f9b2598d2702","modified":1515493370743},{"_id":"public/soul/index.html","hash":"0242461cdf779369341282480e27743366661c5f","modified":1515493370952},{"_id":"public/archives/2017/page/2/index.html","hash":"4709036ecfba8de27d6c124ffc6448b2af9dc359","modified":1515493370955},{"_id":"public/archives/2017/05/index.html","hash":"8c59adf0138b58bb3b9711136ec70918afcc6206","modified":1515493370956},{"_id":"public/archives/2017/12/index.html","hash":"9b7ab65575a06d5903ae6e8cf941b14854b9685a","modified":1515493370956},{"_id":"public/archives/2018/index.html","hash":"a50854385e659c364b79508a62dfae9a5c2427e9","modified":1515493370956},{"_id":"public/archives/2018/01/index.html","hash":"5a14e7f01de83bec1f0a61e12d205f4affd51048","modified":1515493370956},{"_id":"public/categories/Linux/index.html","hash":"a3e204c0c6e33f36d4f4fcda88e2599bae72965c","modified":1515493370956},{"_id":"public/categories/部署/index.html","hash":"f68082a02258e87a52c03ed01796b94e2b09c1b9","modified":1515493370957},{"_id":"public/categories/Gulp/index.html","hash":"3f011d5ae94e223a88ba3add1ae44ca1f94cc798","modified":1515493370957},{"_id":"public/categories/Hexo/index.html","hash":"48acbca664e33673934ddb51773bd2af705dae24","modified":1515493370957},{"_id":"public/categories/React/index.html","hash":"8507e9b8c65d2187fe6392ea10fcf87917f3f1bb","modified":1515493370957},{"_id":"public/categories/code/index.html","hash":"5afbc85babce448d8f19bacb195f0e4411d9bb0a","modified":1515493370957},{"_id":"public/categories/Git/index.html","hash":"50fcc79a357cfdf38f099cfa3e35e0c35af4b8a5","modified":1515493370958},{"_id":"public/categories/tool/index.html","hash":"96edd675f9ba9dd2894ee10077ae9bc8991b5936","modified":1515493370958},{"_id":"public/tags/Linux/index.html","hash":"5fe1f61754906b8f0a9211104657e8b57762e381","modified":1515493370958},{"_id":"public/tags/部署/index.html","hash":"7523250354fd663b7baf8f807657ed759f545fe9","modified":1515493370958},{"_id":"public/tags/部署环境/index.html","hash":"c3e69dbc68cdeb8048035fb0e7dcc7bdbff4d40e","modified":1515493370958},{"_id":"public/tags/Gulp/index.html","hash":"ea5e353733ff4af93c83a714a709c8087a183537","modified":1515493370958},{"_id":"public/tags/hexo/index.html","hash":"295f917de5661b949b67fe04793fd2494d25f8cf","modified":1515493370959},{"_id":"public/tags/React/index.html","hash":"4fdf909d19014363d0d10a30eb41bdc3468d8359","modified":1515493370959},{"_id":"public/tags/code/index.html","hash":"b9fa067e32f44d7ca289aa5fb7b9c1720da7e65a","modified":1515493370960},{"_id":"public/categories/index.html","hash":"4190c246fa8f335862a1d378d2596add3a2d3303","modified":1515493370960},{"_id":"public/tags/index.html","hash":"46a07ac1212bee2238e2af57ed016878e1e15bec","modified":1515493370961},{"_id":"public/2018/01/09/GitHub-Pages/index.html","hash":"dbb4a73c0526e99e22d7e65223ed7fcd01023068","modified":1515493370961},{"_id":"public/2018/01/07/hexo-admin/index.html","hash":"dc9a5106bbd43db57f8373fee0a9e97026cdc7e4","modified":1515493370961},{"_id":"public/2018/01/06/git/git-branch/index.html","hash":"901c340acc24d237e807cf2baef3628b988a5663","modified":1515493370961},{"_id":"public/2018/01/02/regexp/index.html","hash":"5ba261f4e86fa4ea231c1bd25b1d569dc7d61135","modified":1515493370961},{"_id":"public/2017/12/30/tool/awesome.-chrome-extensions/index.html","hash":"28526c9b6f7e88e1fb22fbc1c09c8d792da401aa","modified":1515493370961},{"_id":"public/2017/12/23/tool/awesome-windows-software-cmder/index.html","hash":"4e6da53e75b83e4c431c0a60e9ca9aadcb48a240","modified":1515493370961},{"_id":"public/2017/12/22/js/toggle-title-on-focus-and-blur/index.html","hash":"4792e147319d8dcf60c71401ab86eb5e3d443b12","modified":1515493370962},{"_id":"public/2017/12/21/git/git-basic-usege/index.html","hash":"59c2ce4253e2b366e573e3f753ecfb6984f63b57","modified":1515493370963},{"_id":"public/2017/11/28/gulp-debug/index.html","hash":"20c60bcd4a97b3dab1f1c93625248266deb1f362","modified":1515493370964},{"_id":"public/2017/11/27/apt-get-install-LAMP/index.html","hash":"45c018a11684045102b914776aa112bd536a4e4c","modified":1515493370966},{"_id":"public/2017/11/26/Linux-tips/index.html","hash":"a0e3217b7316d5a953c764f8f5fa8f3963e03586","modified":1515493370967},{"_id":"public/2017/11/25/js/the-difference-of-get-and-post-method/index.html","hash":"5002afb5065f80afa593ee46ad40563473ba94f8","modified":1515493370968},{"_id":"public/2017/11/25/js/trim 方法/index.html","hash":"8763abd49ee7da2e8e35085717cc9c190e323c75","modified":1515493370968},{"_id":"public/2017/11/24/tool/awesome-tools/index.html","hash":"b0e9a5ee32164a23235e2d97ffd228d3812f02cb","modified":1515493370968},{"_id":"public/2017/11/19/react-stop-propagation/index.html","hash":"37f81b583e016482562f0ac677dd30ed1fe3817d","modified":1515493370968},{"_id":"public/2017/11/19/micro-code/index.html","hash":"a2aca1da1fed267c48a57e5ab917ee9e23a97884","modified":1515493370968},{"_id":"public/2017/11/19/react-event/index.html","hash":"b8014d5187e3a4b84d3a632d64a401bb23fbb597","modified":1515493370968},{"_id":"public/2017/05/27/js/近期用到的-jQuery-方法整理/index.html","hash":"191d5b550d94883ca5be43db3112d608d60b1402","modified":1515493370968},{"_id":"public/archives/index.html","hash":"c4e14e5b830ae5891642f94ff6617c5012daa594","modified":1515493370968},{"_id":"public/archives/page/2/index.html","hash":"903f53aebaaa6fd6522a88ef9696aef1507a5261","modified":1515493370968},{"_id":"public/archives/2017/index.html","hash":"c0a147b7e8c7f40279b129694438db4b17651f8e","modified":1515493370968},{"_id":"public/archives/2017/11/index.html","hash":"1368924b80b6f2377ea2cbcd6d6065d89fd763d8","modified":1515493370968},{"_id":"public/categories/JavaScript/index.html","hash":"46188ca891bad2a260efc610f70115650f1df55b","modified":1515493370968},{"_id":"public/index.html","hash":"8dc375509863a6a4e4a9296624bee1bd8ee87505","modified":1515493370969},{"_id":"public/page/2/index.html","hash":"ba70041a38023f022952c7228b77fcb8019db6a9","modified":1515493370969},{"_id":"public/tags/JavaScript/index.html","hash":"93a286bf2304af69a3943116f9e5488bf2900839","modified":1515493370969},{"_id":"public/tags/regexp/index.html","hash":"46b162a13de970135deb7403ea77b3379f087efb","modified":1515493370999},{"_id":"public/tags/Git/index.html","hash":"2885e553509d79f44a040d90daec5e0e63fa0bca","modified":1515493370999},{"_id":"public/tags/jQuery/index.html","hash":"43f0b10076d238b2a08515a77c8788ac61d63f3d","modified":1515493370999},{"_id":"public/tags/tool/index.html","hash":"c4b59b627764e2c5d1725cb112b66df51fe6b9fd","modified":1515493370999},{"_id":"public/tags/js/index.html","hash":"9510ad349c73eb26f13dc673ff6c4552909b5ffc","modified":1515493370999},{"_id":"public/favicon.ico","hash":"3948ac5025fdef5484994a8e86c4a5215b7adb0f","modified":1515493370999},{"_id":"public/CNAME","hash":"2d03d50e0e09cdd937f86fd2f28534043b433616","modified":1515493370999},{"_id":"public/images/Ultraman.jpg","hash":"33a1de5824193a675e9b012471c3b29365a6923e","modified":1515493370999},{"_id":"public/images/git-add.png","hash":"d3fb956bffcd279460eddd848d7422b14921f0c2","modified":1515493370999},{"_id":"public/images/git-checkout.png","hash":"04c0b770d5ffdb236606aad84cd71433ae8ed3de","modified":1515493370999},{"_id":"public/images/git-clone.png","hash":"1d5f717c8717d0bdb53eca9780832ffead217815","modified":1515493371000},{"_id":"public/images/git-commit-0.png","hash":"7f6846b8aab29ce82cc2f1901e39fc4482e37538","modified":1515493371000},{"_id":"public/images/git-commit.png","hash":"5765127101bf72abd327af4227718b05269612b3","modified":1515493371000},{"_id":"public/images/git-diff-staged.png","hash":"064c9fc78abe95b18c7d021647021ca39d9508a4","modified":1515493371000},{"_id":"public/images/git-diff.png","hash":"f730ac9dfe50b32b59cc20c0881fc22deca40e2b","modified":1515493371000},{"_id":"public/images/git-log.png","hash":"334a10f33243f7c24ff225368705a0663b6722ee","modified":1515493371000},{"_id":"public/images/git-modify.png","hash":"c4a8c6f99f4c3d0a4b25bd997cca379d1df3a61c","modified":1515493371000},{"_id":"public/images/git-reset.png","hash":"b535f070f2a1177ded155daaba63bb449873d5bd","modified":1515493371000},{"_id":"public/images/github-repo-settings-pages.jpg","hash":"b7b8d6a08255c5f9a914d630655262c544809d4a","modified":1515493371001},{"_id":"public/images/github-repo-settings.jpg","hash":"6c880f7458dc9a7c4125dffdae86d39068312f05","modified":1515493371001},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1515493371001},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1515493371001},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1515493371002},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1515493371002},{"_id":"public/img/logo.png","hash":"d1a89e6b161c5d09fed5457e6caed746627c47d8","modified":1515493371002},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1515493371002},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1515493371002},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1515493371002},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1515493371003},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1515493371004},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1515493371004},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1515493371004},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1515493371005},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1515493371006},{"_id":"public/images/change-title.gif","hash":"3917e75f90824cf1b58a1260d237b1df21833066","modified":1515493371158},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1515493371163},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1515493371181},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1515493371181},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1515493371182},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1515493371182},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515493371183},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515493371183},{"_id":"public/css/custom.css","hash":"c9f6536e8d5e08b47751a63bf7fe9c03c3b379ea","modified":1515493371204},{"_id":"public/js/custom.js","hash":"7ce02c31e49b6383d089f0b90e89b7ed80fdccc5","modified":1515493371204},{"_id":"public/js/main.min.js","hash":"70652f94832de4801ffe80bf59d09265ac84599f","modified":1515493371204},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1515493371204},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1515493371204},{"_id":"public/js/main.js","hash":"411836a39a01be178e7bba14f8959b6949488de9","modified":1515493371204},{"_id":"public/img/wechat.jpg","hash":"95f875ea42c88bb1dd14a7ad5360892107c7c62f","modified":1515493371204},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515493371204},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515493371205},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515493371205},{"_id":"public/img/alipay.jpg","hash":"cff9d376cce7330206038a334ec429dcd453cc2f","modified":1515493371234},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515493371312},{"_id":"public/css/style.css","hash":"f13f6bdb92efa9362a5e6a57ff80fba9170b430c","modified":1515493372029}],"Category":[{"name":"Linux","_id":"cjc7hmdno00040gqmwdbknefw"},{"name":"部署","_id":"cjc7hmdo500090gqmv98gu85p"},{"name":"Gulp","_id":"cjc7hmdof000f0gqmf3gw3326"},{"name":"Hexo","_id":"cjc7hmdoo000l0gqmabfwwum0"},{"name":"React","_id":"cjc7hmdos000p0gqmilqfrtw3"},{"name":"code","_id":"cjc7hmdow000u0gqmmhv2rt5z"},{"name":"JavaScript","_id":"cjc7hmdp000100gqmlpgd5s0t"},{"name":"Git","_id":"cjc7hmdqw001l0gqmz8bw6x37"},{"name":"tool","_id":"cjc7hmdrf00200gqmcqqnkpx2"}],"Data":[{"_id":"head","data":{"css":"<link href='/blog/css/custom.css' rel='stylesheet' type='text/css' />"}}],"Page":[{"title":"关于我自己","date":"2017-06-03T10:13:19.000Z","type":"about","comments":0,"_content":"\n## 关于我\n\n<p style=\"text-align: center;\">此处应有自拍：<br><img src=\"/images/Ultraman.jpg\" style=\"width: 400px;\" alt=\"此处应有自拍\" /></p>\n\n\n## 关于编程\n\n大学临毕业开始接触编程（请忽略诸如 c/c++ 之类的课程。。。），深深感觉到人类智慧的无穷，并为自己的渺小感到羞愧。。。\n\n正在努力学习中\n\n## 业余爱好\n\n喜欢写代码，尤其是键盘上面啪啪啪的感觉。。。\n\n喜欢说英语，比如经常说：too young, too naive!\n\n喜欢古文，比如我就念了一句诗：窈窕淑女，君子好逑。。。\n\n## 最后\n\n求基友！","source":"about/index.md","raw":"---\ntitle: 关于我自己\ndate: 2017-06-03 18:13:19\ntype: about\ncomments: false\n---\n\n## 关于我\n\n<p style=\"text-align: center;\">此处应有自拍：<br><img src=\"/images/Ultraman.jpg\" style=\"width: 400px;\" alt=\"此处应有自拍\" /></p>\n\n\n## 关于编程\n\n大学临毕业开始接触编程（请忽略诸如 c/c++ 之类的课程。。。），深深感觉到人类智慧的无穷，并为自己的渺小感到羞愧。。。\n\n正在努力学习中\n\n## 业余爱好\n\n喜欢写代码，尤其是键盘上面啪啪啪的感觉。。。\n\n喜欢说英语，比如经常说：too young, too naive!\n\n喜欢古文，比如我就念了一句诗：窈窕淑女，君子好逑。。。\n\n## 最后\n\n求基友！","updated":"2018-01-07T14:00:13.997Z","path":"about/index.html","layout":"page","_id":"cjc7hmdnc00010gqmb8nsjs9b","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p style=\"text-align: center;\">此处应有自拍：<br><img src=\"/images/Ultraman.jpg\" style=\"width: 400px;\" alt=\"此处应有自拍\"></p>\n\n\n<h2 id=\"关于编程\"><a href=\"#关于编程\" class=\"headerlink\" title=\"关于编程\"></a>关于编程</h2><p>大学临毕业开始接触编程（请忽略诸如 c/c++ 之类的课程。。。），深深感觉到人类智慧的无穷，并为自己的渺小感到羞愧。。。</p>\n<p>正在努力学习中</p>\n<h2 id=\"业余爱好\"><a href=\"#业余爱好\" class=\"headerlink\" title=\"业余爱好\"></a>业余爱好</h2><p>喜欢写代码，尤其是键盘上面啪啪啪的感觉。。。</p>\n<p>喜欢说英语，比如经常说：too young, too naive!</p>\n<p>喜欢古文，比如我就念了一句诗：窈窕淑女，君子好逑。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>求基友！</p>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p style=\"text-align: center;\">此处应有自拍：<br><img src=\"/images/Ultraman.jpg\" style=\"width: 400px;\" alt=\"此处应有自拍\"></p>\n\n\n<h2 id=\"关于编程\"><a href=\"#关于编程\" class=\"headerlink\" title=\"关于编程\"></a>关于编程</h2><p>大学临毕业开始接触编程（请忽略诸如 c/c++ 之类的课程。。。），深深感觉到人类智慧的无穷，并为自己的渺小感到羞愧。。。</p>\n<p>正在努力学习中</p>\n<h2 id=\"业余爱好\"><a href=\"#业余爱好\" class=\"headerlink\" title=\"业余爱好\"></a>业余爱好</h2><p>喜欢写代码，尤其是键盘上面啪啪啪的感觉。。。</p>\n<p>喜欢说英语，比如经常说：too young, too naive!</p>\n<p>喜欢古文，比如我就念了一句诗：窈窕淑女，君子好逑。。。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>求基友！</p>\n"},{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\n---\n","date":"2018-01-07T16:05:42.286Z","updated":"2018-01-07T14:00:13.997Z","path":"categories/index.html","title":"","_id":"cjc7hmdnm00030gqm1m5us0lo","content":"","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":""},{"layout":"page","title":"毒鸡汤","description":"这个世界，除了现实，还需要一份感性来证明我们依旧活着。","comments":0,"reward":false,"_content":"\n<style>\nbody {  }\n.page-content { border-bottom: none; }\n#main { background-image: url(http://www.syg315.com/images/dbg.jpg) }\n</style>\n\n>终于明白，有些路，只能一个人走。那些邀约好同行的人，一起相伴雨季，走过年华，但有一天终究会在某个渡口离散。红尘陌上，独自行走，绿萝拂过衣襟，青云打湿诺言。山和水可以两两相忘，日与月可以毫无瓜葛。那时候，只一个人的浮世清欢，一个人的细水长流。\n><p style=\"text-align: right;\">——林徽因</p>\n\n---\n\n>于千万人之中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了，那也没有别的话可说，惟有轻轻地问一声：“噢，你也在这里吗？”\n><p style=\"text-align: right;\">——张爱玲</p>\n\n---\n\n>也许每一个男子全都有过这样的两个女人，至少两个。\n>娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是“床前明月光”\n>娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心口上的一颗朱砂痣。\n><p style=\"text-align: right;\">——张爱玲</p>\n\n---\n\n>以前我认为那句话很重要，因为我相信有些事说出来就是一生一世。\n>现在想想，说不说也没有什么分别。有些事情是会变的，我一直以为自己赢了，直到有一天我看着镜子才知道我输了。在我最美好的时间里，我最喜欢的人不在我身边，如果能重新开始该有多好\n><p style=\"text-align: right;\">——《东邪西毒》</p>\n\n---\n\n>生存还是毁灭，这是一个永恒的选择题。\n>以至于到最后，我们成为一个什么样的人，可能不在于我们的能力，而且在于我们的选择。\n>选择无处不在：\n>面朝大海，春暖花开，是海子的选择；\n>人不是生来被打败的，是海明威的选择；\n>人固有一死，或重于泰山，或轻于鸿毛，是司马迁的选择。\n>选择是一次又一次自我重塑的过程，让我们不断地成长，不断地完善。\n>如果说，人生是一次不断选择的旅程，那么当千帆阅尽，最终留下的就是一片属于自己的独一无二的风景。\n><p style=\"text-align: right;\">——《朗读者》</p>\n\n---","source":"soul/index.md","raw":"---\nlayout: page      # 必须\ntitle: 毒鸡汤  # 必须，页面名称\ndescription: 这个世界，除了现实，还需要一份感性来证明我们依旧活着。       # 页面二级标题，描述性文字\ncomments: false     # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\n---\n\n<style>\nbody {  }\n.page-content { border-bottom: none; }\n#main { background-image: url(http://www.syg315.com/images/dbg.jpg) }\n</style>\n\n>终于明白，有些路，只能一个人走。那些邀约好同行的人，一起相伴雨季，走过年华，但有一天终究会在某个渡口离散。红尘陌上，独自行走，绿萝拂过衣襟，青云打湿诺言。山和水可以两两相忘，日与月可以毫无瓜葛。那时候，只一个人的浮世清欢，一个人的细水长流。\n><p style=\"text-align: right;\">——林徽因</p>\n\n---\n\n>于千万人之中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了，那也没有别的话可说，惟有轻轻地问一声：“噢，你也在这里吗？”\n><p style=\"text-align: right;\">——张爱玲</p>\n\n---\n\n>也许每一个男子全都有过这样的两个女人，至少两个。\n>娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是“床前明月光”\n>娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心口上的一颗朱砂痣。\n><p style=\"text-align: right;\">——张爱玲</p>\n\n---\n\n>以前我认为那句话很重要，因为我相信有些事说出来就是一生一世。\n>现在想想，说不说也没有什么分别。有些事情是会变的，我一直以为自己赢了，直到有一天我看着镜子才知道我输了。在我最美好的时间里，我最喜欢的人不在我身边，如果能重新开始该有多好\n><p style=\"text-align: right;\">——《东邪西毒》</p>\n\n---\n\n>生存还是毁灭，这是一个永恒的选择题。\n>以至于到最后，我们成为一个什么样的人，可能不在于我们的能力，而且在于我们的选择。\n>选择无处不在：\n>面朝大海，春暖花开，是海子的选择；\n>人不是生来被打败的，是海明威的选择；\n>人固有一死，或重于泰山，或轻于鸿毛，是司马迁的选择。\n>选择是一次又一次自我重塑的过程，让我们不断地成长，不断地完善。\n>如果说，人生是一次不断选择的旅程，那么当千帆阅尽，最终留下的就是一片属于自己的独一无二的风景。\n><p style=\"text-align: right;\">——《朗读者》</p>\n\n---","date":"2018-01-07T16:05:42.445Z","updated":"2018-01-07T14:00:14.008Z","path":"soul/index.html","_id":"cjc7hmdpx001f0gqmfg25b8lb","content":"<style>\nbody {  }\n.page-content { border-bottom: none; }\n#main { background-image: url(http://www.syg315.com/images/dbg.jpg) }\n</style>\n\n<blockquote>\n<p>终于明白，有些路，只能一个人走。那些邀约好同行的人，一起相伴雨季，走过年华，但有一天终究会在某个渡口离散。红尘陌上，独自行走，绿萝拂过衣襟，青云打湿诺言。山和水可以两两相忘，日与月可以毫无瓜葛。那时候，只一个人的浮世清欢，一个人的细水长流。</p>\n<p style=\"text-align: right;\">——林徽因</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>于千万人之中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了，那也没有别的话可说，惟有轻轻地问一声：“噢，你也在这里吗？”</p>\n<p style=\"text-align: right;\">——张爱玲</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>也许每一个男子全都有过这样的两个女人，至少两个。<br>娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是“床前明月光”<br>娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心口上的一颗朱砂痣。</p>\n<p style=\"text-align: right;\">——张爱玲</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>以前我认为那句话很重要，因为我相信有些事说出来就是一生一世。<br>现在想想，说不说也没有什么分别。有些事情是会变的，我一直以为自己赢了，直到有一天我看着镜子才知道我输了。在我最美好的时间里，我最喜欢的人不在我身边，如果能重新开始该有多好</p>\n<p style=\"text-align: right;\">——《东邪西毒》</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>生存还是毁灭，这是一个永恒的选择题。<br>以至于到最后，我们成为一个什么样的人，可能不在于我们的能力，而且在于我们的选择。<br>选择无处不在：<br>面朝大海，春暖花开，是海子的选择；<br>人不是生来被打败的，是海明威的选择；<br>人固有一死，或重于泰山，或轻于鸿毛，是司马迁的选择。<br>选择是一次又一次自我重塑的过程，让我们不断地成长，不断地完善。<br>如果说，人生是一次不断选择的旅程，那么当千帆阅尽，最终留下的就是一片属于自己的独一无二的风景。</p>\n<p style=\"text-align: right;\">——《朗读者》</p>\n\n</blockquote>\n<hr>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<style>\nbody {  }\n.page-content { border-bottom: none; }\n#main { background-image: url(http://www.syg315.com/images/dbg.jpg) }\n</style>\n\n<blockquote>\n<p>终于明白，有些路，只能一个人走。那些邀约好同行的人，一起相伴雨季，走过年华，但有一天终究会在某个渡口离散。红尘陌上，独自行走，绿萝拂过衣襟，青云打湿诺言。山和水可以两两相忘，日与月可以毫无瓜葛。那时候，只一个人的浮世清欢，一个人的细水长流。</p>\n<p style=\"text-align: right;\">——林徽因</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>于千万人之中遇见你所要遇见的人，于千万年之中，时间的无涯的荒野里，没有早一步，也没有晚一步，刚巧赶上了，那也没有别的话可说，惟有轻轻地问一声：“噢，你也在这里吗？”</p>\n<p style=\"text-align: right;\">——张爱玲</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>也许每一个男子全都有过这样的两个女人，至少两个。<br>娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是“床前明月光”<br>娶了白玫瑰，白的便是衣服上的一粒饭粘子，红的却是心口上的一颗朱砂痣。</p>\n<p style=\"text-align: right;\">——张爱玲</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>以前我认为那句话很重要，因为我相信有些事说出来就是一生一世。<br>现在想想，说不说也没有什么分别。有些事情是会变的，我一直以为自己赢了，直到有一天我看着镜子才知道我输了。在我最美好的时间里，我最喜欢的人不在我身边，如果能重新开始该有多好</p>\n<p style=\"text-align: right;\">——《东邪西毒》</p>\n\n</blockquote>\n<hr>\n<blockquote>\n<p>生存还是毁灭，这是一个永恒的选择题。<br>以至于到最后，我们成为一个什么样的人，可能不在于我们的能力，而且在于我们的选择。<br>选择无处不在：<br>面朝大海，春暖花开，是海子的选择；<br>人不是生来被打败的，是海明威的选择；<br>人固有一死，或重于泰山，或轻于鸿毛，是司马迁的选择。<br>选择是一次又一次自我重塑的过程，让我们不断地成长，不断地完善。<br>如果说，人生是一次不断选择的旅程，那么当千帆阅尽，最终留下的就是一片属于自己的独一无二的风景。</p>\n<p style=\"text-align: right;\">——《朗读者》</p>\n\n</blockquote>\n<hr>\n"},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\n---","date":"2018-01-07T16:05:42.463Z","updated":"2018-01-07T14:00:14.008Z","path":"tags/index.html","title":"","_id":"cjc7hmdpz001g0gqm6gp9vuqa","content":"","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":""}],"Post":[{"title":"Linux Tips","abbrlink":"2f176420","date":"2017-11-26T13:20:53.000Z","_content":"\n### 修改普通用户对目录的读写权限\n普通用户是没有文件的读写权限的，需要每次都临时获取 root 权限，但这样比较麻烦。\n方便的做法是，修改/var/www目录的读写权限（777是linux中的最高权限，表示可读，可写，可执行）\n```bash\nsudo chmod 777 /var/www\n```\n\n### 设置别名 `alias`\n编辑配置文件 `vim /etc/profile`，在文件中添加配置代码，例如：\n```bash\nalias tofe=\"cd /var/www/rmp/spms/front-end/\"\nalias gs=\"git status\"\n```\n\n### 设置环境变量\n","source":"_posts/Linux-tips.md","raw":"---\ntitle: Linux Tips\ntags:\n  - Linux\ncategories: Linux\nabbrlink: 2f176420\ndate: 2017-11-26 21:20:53\n---\n\n### 修改普通用户对目录的读写权限\n普通用户是没有文件的读写权限的，需要每次都临时获取 root 权限，但这样比较麻烦。\n方便的做法是，修改/var/www目录的读写权限（777是linux中的最高权限，表示可读，可写，可执行）\n```bash\nsudo chmod 777 /var/www\n```\n\n### 设置别名 `alias`\n编辑配置文件 `vim /etc/profile`，在文件中添加配置代码，例如：\n```bash\nalias tofe=\"cd /var/www/rmp/spms/front-end/\"\nalias gs=\"git status\"\n```\n\n### 设置环境变量\n","slug":"Linux-tips","published":1,"updated":"2018-01-07T14:44:29.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdn300000gqm2wmyixf0","content":"<h3 id=\"修改普通用户对目录的读写权限\"><a href=\"#修改普通用户对目录的读写权限\" class=\"headerlink\" title=\"修改普通用户对目录的读写权限\"></a>修改普通用户对目录的读写权限</h3><p>普通用户是没有文件的读写权限的，需要每次都临时获取 root 权限，但这样比较麻烦。<br>方便的做法是，修改/var/www目录的读写权限（777是linux中的最高权限，表示可读，可写，可执行）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 /var/www</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置别名-alias\"><a href=\"#设置别名-alias\" class=\"headerlink\" title=\"设置别名 alias\"></a>设置别名 <code>alias</code></h3><p>编辑配置文件 <code>vim /etc/profile</code>，在文件中添加配置代码，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> tofe=<span class=\"string\">\"cd /var/www/rmp/spms/front-end/\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> gs=<span class=\"string\">\"git status\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3>","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h3 id=\"修改普通用户对目录的读写权限\"><a href=\"#修改普通用户对目录的读写权限\" class=\"headerlink\" title=\"修改普通用户对目录的读写权限\"></a>修改普通用户对目录的读写权限</h3><p>普通用户是没有文件的读写权限的，需要每次都临时获取 root 权限，但这样比较麻烦。<br>方便的做法是，修改/var/www目录的读写权限（777是linux中的最高权限，表示可读，可写，可执行）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 /var/www</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置别名-alias\"><a href=\"#设置别名-alias\" class=\"headerlink\" title=\"设置别名 alias\"></a>设置别名 <code>alias</code></h3><p>编辑配置文件 <code>vim /etc/profile</code>，在文件中添加配置代码，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> tofe=<span class=\"string\">\"cd /var/www/rmp/spms/front-end/\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> gs=<span class=\"string\">\"git status\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3>"},{"title":"GitHub Pages","abbrlink":"56fd4e32","date":"2018-01-09T10:30:53.000Z","_content":"\n## What is GitHub Pages\n\n>什么是 Github Pages？\n>\n>Github Pages 是 Github 的静态页面托管服务。它设计的初衷是为了用户能够直接通过 Github 仓库来托管用户个人、组织或是项目的专属页面。参考：[What is GitHub Pages?](https://help.github.com/articles/what-is-github-pages/)\n\n> 友情提示：使用此功能需要对 git 及 GitHub 有一定了解\n\n使用步骤：\n1. 注册 GitHub 账户\n2. 创建一个仓库\n3. 打开此仓库的 `Settings` 页签\n![](/blog/images/github-repo-settings.jpg)\n4. 找到 `GitHub Pag` 部分\n![](/blog/images/github-repo-settings-pages.jpg)\n\n因为 GitHub Pages 会展示指定位置（分支）的 `index.html` 或者 `README.md`，因此 `Source` 用于指定分支。\n\n`Source` 字段有 4 个选项：\n1. 默认为 `None` ，即不显示\n1. `master branch`，本仓库的 `master` 分支\n1. `master branch/docs folder`，本仓库的 `master` 分支下的 `docs` 目录\n1. `gh-pages branch`，本仓库的 `gh-pages` 分支（需创建后才显示此选项）\n\n也就是说，只要把静态站点放到上面三个位置（分支）之一，然后设置正确的 `Source` 字段，即可使用 GitHub Pages 功能。生成的静态网站地址会友好的显示在 `Source` 字段上方。\n\n\n## GitHub Pages 使用思路扩展\n\n1. 很多开源项目都会选择将 `master branch/docs` 用于展示项目使用文档\n1. 制作个人兴趣静态网站（如：http://wencaizhang.com/demo)\n1. 作为个人静态博客站点（如：http://wencaizhang.com/blog)","source":"_posts/GitHub-Pages.md","raw":"---\ntitle: GitHub Pages\ntags:\n  - 部署\ncategories:\n  - 部署\nabbrlink: 56fd4e32\ndate: 2018-01-09 18:30:53\n---\n\n## What is GitHub Pages\n\n>什么是 Github Pages？\n>\n>Github Pages 是 Github 的静态页面托管服务。它设计的初衷是为了用户能够直接通过 Github 仓库来托管用户个人、组织或是项目的专属页面。参考：[What is GitHub Pages?](https://help.github.com/articles/what-is-github-pages/)\n\n> 友情提示：使用此功能需要对 git 及 GitHub 有一定了解\n\n使用步骤：\n1. 注册 GitHub 账户\n2. 创建一个仓库\n3. 打开此仓库的 `Settings` 页签\n![](/blog/images/github-repo-settings.jpg)\n4. 找到 `GitHub Pag` 部分\n![](/blog/images/github-repo-settings-pages.jpg)\n\n因为 GitHub Pages 会展示指定位置（分支）的 `index.html` 或者 `README.md`，因此 `Source` 用于指定分支。\n\n`Source` 字段有 4 个选项：\n1. 默认为 `None` ，即不显示\n1. `master branch`，本仓库的 `master` 分支\n1. `master branch/docs folder`，本仓库的 `master` 分支下的 `docs` 目录\n1. `gh-pages branch`，本仓库的 `gh-pages` 分支（需创建后才显示此选项）\n\n也就是说，只要把静态站点放到上面三个位置（分支）之一，然后设置正确的 `Source` 字段，即可使用 GitHub Pages 功能。生成的静态网站地址会友好的显示在 `Source` 字段上方。\n\n\n## GitHub Pages 使用思路扩展\n\n1. 很多开源项目都会选择将 `master branch/docs` 用于展示项目使用文档\n1. 制作个人兴趣静态网站（如：http://wencaizhang.com/demo)\n1. 作为个人静态博客站点（如：http://wencaizhang.com/blog)","slug":"GitHub-Pages","published":1,"updated":"2018-01-09T10:23:52.628Z","_id":"cjc7hmdnj00020gqm2ryfsjar","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"What-is-GitHub-Pages\"><a href=\"#What-is-GitHub-Pages\" class=\"headerlink\" title=\"What is GitHub Pages\"></a>What is GitHub Pages</h2><blockquote>\n<p>什么是 Github Pages？</p>\n<p>Github Pages 是 Github 的静态页面托管服务。它设计的初衷是为了用户能够直接通过 Github 仓库来托管用户个人、组织或是项目的专属页面。参考：<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">What is GitHub Pages?</a></p>\n<p>友情提示：使用此功能需要对 git 及 GitHub 有一定了解</p>\n</blockquote>\n<p>使用步骤：</p>\n<ol>\n<li>注册 GitHub 账户</li>\n<li>创建一个仓库</li>\n<li>打开此仓库的 <code>Settings</code> 页签<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/blog/images/github-repo-settings.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>找到 <code>GitHub Pag</code> 部分<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/blog/images/github-repo-settings-pages.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<p>因为 GitHub Pages 会展示指定位置（分支）的 <code>index.html</code> 或者 <code>README.md</code>，因此 <code>Source</code> 用于指定分支。</p>\n<p><code>Source</code> 字段有 4 个选项：</p>\n<ol>\n<li>默认为 <code>None</code> ，即不显示</li>\n<li><code>master branch</code>，本仓库的 <code>master</code> 分支</li>\n<li><code>master branch/docs folder</code>，本仓库的 <code>master</code> 分支下的 <code>docs</code> 目录</li>\n<li><code>gh-pages branch</code>，本仓库的 <code>gh-pages</code> 分支（需创建后才显示此选项）</li>\n</ol>\n<p>也就是说，只要把静态站点放到上面三个位置（分支）之一，然后设置正确的 <code>Source</code> 字段，即可使用 GitHub Pages 功能。生成的静态网站地址会友好的显示在 <code>Source</code> 字段上方。</p>\n<h2 id=\"GitHub-Pages-使用思路扩展\"><a href=\"#GitHub-Pages-使用思路扩展\" class=\"headerlink\" title=\"GitHub Pages 使用思路扩展\"></a>GitHub Pages 使用思路扩展</h2><ol>\n<li>很多开源项目都会选择将 <code>master branch/docs</code> 用于展示项目使用文档</li>\n<li>制作个人兴趣静态网站（如：<a href=\"http://wencaizhang.com/demo\">http://wencaizhang.com/demo</a>)</li>\n<li>作为个人静态博客站点（如：<a href=\"http://wencaizhang.com/blog\">http://wencaizhang.com/blog</a>)</li>\n</ol>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"What-is-GitHub-Pages\"><a href=\"#What-is-GitHub-Pages\" class=\"headerlink\" title=\"What is GitHub Pages\"></a>What is GitHub Pages</h2><blockquote>\n<p>什么是 Github Pages？</p>\n<p>Github Pages 是 Github 的静态页面托管服务。它设计的初衷是为了用户能够直接通过 Github 仓库来托管用户个人、组织或是项目的专属页面。参考：<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">What is GitHub Pages?</a></p>\n<p>友情提示：使用此功能需要对 git 及 GitHub 有一定了解</p>\n</blockquote>\n<p>使用步骤：</p>\n<ol>\n<li>注册 GitHub 账户</li>\n<li>创建一个仓库</li>\n<li>打开此仓库的 <code>Settings</code> 页签<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/blog/images/github-repo-settings.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></li>\n<li>找到 <code>GitHub Pag</code> 部分<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/blog/images/github-repo-settings-pages.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<p>因为 GitHub Pages 会展示指定位置（分支）的 <code>index.html</code> 或者 <code>README.md</code>，因此 <code>Source</code> 用于指定分支。</p>\n<p><code>Source</code> 字段有 4 个选项：</p>\n<ol>\n<li>默认为 <code>None</code> ，即不显示</li>\n<li><code>master branch</code>，本仓库的 <code>master</code> 分支</li>\n<li><code>master branch/docs folder</code>，本仓库的 <code>master</code> 分支下的 <code>docs</code> 目录</li>\n<li><code>gh-pages branch</code>，本仓库的 <code>gh-pages</code> 分支（需创建后才显示此选项）</li>\n</ol>\n<p>也就是说，只要把静态站点放到上面三个位置（分支）之一，然后设置正确的 <code>Source</code> 字段，即可使用 GitHub Pages 功能。生成的静态网站地址会友好的显示在 <code>Source</code> 字段上方。</p>\n<h2 id=\"GitHub-Pages-使用思路扩展\"><a href=\"#GitHub-Pages-使用思路扩展\" class=\"headerlink\" title=\"GitHub Pages 使用思路扩展\"></a>GitHub Pages 使用思路扩展</h2><ol>\n<li>很多开源项目都会选择将 <code>master branch/docs</code> 用于展示项目使用文档</li>\n<li>制作个人兴趣静态网站（如：<a href=\"http://wencaizhang.com/demo\">http://wencaizhang.com/demo</a>)</li>\n<li>作为个人静态博客站点（如：<a href=\"http://wencaizhang.com/blog\">http://wencaizhang.com/blog</a>)</li>\n</ol>\n"},{"title":"Ubuntu 安装 LAMP 环境","abbrlink":"5ba4e681","date":"2017-11-27T13:22:53.000Z","_content":"[toc]\n\n安装开发环境亦或部署环境，向来不是一件容易的事情。\n<!--more-->\n### 写在前面\n1. 安装顺序，一定是先安装 Apache，后安装 php，因为 php 安装完成之后，会自动修改 Apache 的配置文件\n2. 关于 Apache 配置文件，有的地方叫 `httpd.conf` ，其实就是 `apache2.conf`\n\n### mysql 安装\n+ 安装命令：\n```bash\napt-get install mysql-server\napt-get install mysql-client \napt-get install libmysqlclient-dev\n```\n+ 安装过程中，会提示为 root 用户设置密码\n+ 安装完成之后：\n  - 连接 mysql：`mysql -u roo t -p`\n  - 退出 mysql：`exit`\n\n### apache 安装\n+ 安装命令\n```bash\napt-get install apache2\n```\n+ 安装完成之后，apache2 的默认主目录：`/var/www/`\napache2 的操作命令（启动 Apache 之后，可以在浏览器中打开 `localhost` 地址查看 Apache 的默认页面）：\n  - 启动：`/etc/init.d/apache2 start`\n  - 重启：`/etc/init.d/apache2 restart`\n  - 关闭：`/etc/init.d/apache2 stop`\n\n\n\n### php 安装\n+ 安装命令\n```bash\napt-get install php\n```\n+ 安装完成之后\n查看版本信息：`php -v`\n\n","source":"_posts/apt-get-install-LAMP.md","raw":"---\ntitle: Ubuntu 安装 LAMP 环境\ntags:\n  - 部署环境\n  - Linux\nabbrlink: 5ba4e681\ndate: 2017-11-27 21:22:53\ncategories:\n---\n[toc]\n\n安装开发环境亦或部署环境，向来不是一件容易的事情。\n<!--more-->\n### 写在前面\n1. 安装顺序，一定是先安装 Apache，后安装 php，因为 php 安装完成之后，会自动修改 Apache 的配置文件\n2. 关于 Apache 配置文件，有的地方叫 `httpd.conf` ，其实就是 `apache2.conf`\n\n### mysql 安装\n+ 安装命令：\n```bash\napt-get install mysql-server\napt-get install mysql-client \napt-get install libmysqlclient-dev\n```\n+ 安装过程中，会提示为 root 用户设置密码\n+ 安装完成之后：\n  - 连接 mysql：`mysql -u roo t -p`\n  - 退出 mysql：`exit`\n\n### apache 安装\n+ 安装命令\n```bash\napt-get install apache2\n```\n+ 安装完成之后，apache2 的默认主目录：`/var/www/`\napache2 的操作命令（启动 Apache 之后，可以在浏览器中打开 `localhost` 地址查看 Apache 的默认页面）：\n  - 启动：`/etc/init.d/apache2 start`\n  - 重启：`/etc/init.d/apache2 restart`\n  - 关闭：`/etc/init.d/apache2 stop`\n\n\n\n### php 安装\n+ 安装命令\n```bash\napt-get install php\n```\n+ 安装完成之后\n查看版本信息：`php -v`\n\n","slug":"apt-get-install-LAMP","published":1,"updated":"2018-01-07T14:44:29.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdnw00060gqmenkz6cj6","content":"<p>[toc]</p>\n<p>安装开发环境亦或部署环境，向来不是一件容易的事情。<br><a id=\"more\"></a></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><ol>\n<li>安装顺序，一定是先安装 Apache，后安装 php，因为 php 安装完成之后，会自动修改 Apache 的配置文件</li>\n<li>关于 Apache 配置文件，有的地方叫 <code>httpd.conf</code> ，其实就是 <code>apache2.conf</code></li>\n</ol>\n<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><ul>\n<li><p>安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br><span class=\"line\">apt-get install mysql-client </span><br><span class=\"line\">apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装过程中，会提示为 root 用户设置密码</p>\n</li>\n<li>安装完成之后：<ul>\n<li>连接 mysql：<code>mysql -u roo t -p</code></li>\n<li>退出 mysql：<code>exit</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"apache-安装\"><a href=\"#apache-安装\" class=\"headerlink\" title=\"apache 安装\"></a>apache 安装</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install apache2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成之后，apache2 的默认主目录：<code>/var/www/</code><br>apache2 的操作命令（启动 Apache 之后，可以在浏览器中打开 <code>localhost</code> 地址查看 Apache 的默认页面）：</p>\n<ul>\n<li>启动：<code>/etc/init.d/apache2 start</code></li>\n<li>重启：<code>/etc/init.d/apache2 restart</code></li>\n<li>关闭：<code>/etc/init.d/apache2 stop</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"php-安装\"><a href=\"#php-安装\" class=\"headerlink\" title=\"php 安装\"></a>php 安装</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成之后<br>查看版本信息：<code>php -v</code></p>\n</li>\n</ul>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>[toc]</p>\n<p>安装开发环境亦或部署环境，向来不是一件容易的事情。<br>","more":"</p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><ol>\n<li>安装顺序，一定是先安装 Apache，后安装 php，因为 php 安装完成之后，会自动修改 Apache 的配置文件</li>\n<li>关于 Apache 配置文件，有的地方叫 <code>httpd.conf</code> ，其实就是 <code>apache2.conf</code></li>\n</ol>\n<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><ul>\n<li><p>安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br><span class=\"line\">apt-get install mysql-client </span><br><span class=\"line\">apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装过程中，会提示为 root 用户设置密码</p>\n</li>\n<li>安装完成之后：<ul>\n<li>连接 mysql：<code>mysql -u roo t -p</code></li>\n<li>退出 mysql：<code>exit</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"apache-安装\"><a href=\"#apache-安装\" class=\"headerlink\" title=\"apache 安装\"></a>apache 安装</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install apache2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成之后，apache2 的默认主目录：<code>/var/www/</code><br>apache2 的操作命令（启动 Apache 之后，可以在浏览器中打开 <code>localhost</code> 地址查看 Apache 的默认页面）：</p>\n<ul>\n<li>启动：<code>/etc/init.d/apache2 start</code></li>\n<li>重启：<code>/etc/init.d/apache2 restart</code></li>\n<li>关闭：<code>/etc/init.d/apache2 stop</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"php-安装\"><a href=\"#php-安装\" class=\"headerlink\" title=\"php 安装\"></a>php 安装</h3><ul>\n<li><p>安装命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install php</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成之后<br>查看版本信息：<code>php -v</code></p>\n</li>\n</ul>"},{"title":"Gulp 调试小技巧","abbrlink":"aa3b2445","date":"2017-11-28T13:30:53.000Z","_content":"\n编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。\n\n<!--more-->\n\n## 基础版\n\n主要的思路是通过事件监听把错误打印出来，然后定位错误。\n\n这是部分代码： \n```js\n.pipe(uglify().on('error', function (e) {\n    console.log(e)\n}))\n```\n\n## 升级版\n\n其实就是稍微简单封装一下。\n\n```js\nfunction createErrorHandler(name) {\n    return function (err) {\n        console.error('Error from ' + name + ' in compress task', err.toString());\n    };\n}\n\ngulp.task('minify_js', function () {\n    var uglify = require('gulp-uglify');\n    return gulp.src('./build/**/*.js')\n        .pipe(uglify().on('error', createErrorHandler('uglify')))\n        .pipe(gulp.dest('build'))\n        .pipe($.size({ title: 'minify_js' }));\n})\n```\n\n","source":"_posts/gulp-debug.md","raw":"---\ntitle: Gulp 调试小技巧\ntags:\n  - Gulp\ncategories:\n  - Gulp\nabbrlink: aa3b2445\ndate: 2017-11-28 21:30:53\n---\n\n编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。\n\n<!--more-->\n\n## 基础版\n\n主要的思路是通过事件监听把错误打印出来，然后定位错误。\n\n这是部分代码： \n```js\n.pipe(uglify().on('error', function (e) {\n    console.log(e)\n}))\n```\n\n## 升级版\n\n其实就是稍微简单封装一下。\n\n```js\nfunction createErrorHandler(name) {\n    return function (err) {\n        console.error('Error from ' + name + ' in compress task', err.toString());\n    };\n}\n\ngulp.task('minify_js', function () {\n    var uglify = require('gulp-uglify');\n    return gulp.src('./build/**/*.js')\n        .pipe(uglify().on('error', createErrorHandler('uglify')))\n        .pipe(gulp.dest('build'))\n        .pipe($.size({ title: 'minify_js' }));\n})\n```\n\n","slug":"gulp-debug","published":1,"updated":"2018-01-07T14:44:29.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdo100070gqmcg7vyr8z","content":"<p>编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。</p>\n<a id=\"more\"></a>\n<h2 id=\"基础版\"><a href=\"#基础版\" class=\"headerlink\" title=\"基础版\"></a>基础版</h2><p>主要的思路是通过事件监听把错误打印出来，然后定位错误。</p>\n<p>这是部分代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.pipe(uglify().on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"升级版\"><a href=\"#升级版\" class=\"headerlink\" title=\"升级版\"></a>升级版</h2><p>其实就是稍微简单封装一下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createErrorHandler</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error from '</span> + name + <span class=\"string\">' in compress task'</span>, err.toString());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify_js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./build/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify().on(<span class=\"string\">'error'</span>, createErrorHandler(<span class=\"string\">'uglify'</span>)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'build'</span>))</span><br><span class=\"line\">        .pipe($.size(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'minify_js'</span> &#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。</p>","more":"<h2 id=\"基础版\"><a href=\"#基础版\" class=\"headerlink\" title=\"基础版\"></a>基础版</h2><p>主要的思路是通过事件监听把错误打印出来，然后定位错误。</p>\n<p>这是部分代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.pipe(uglify().on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"升级版\"><a href=\"#升级版\" class=\"headerlink\" title=\"升级版\"></a>升级版</h2><p>其实就是稍微简单封装一下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createErrorHandler</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error from '</span> + name + <span class=\"string\">' in compress task'</span>, err.toString());</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify_js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./build/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify().on(<span class=\"string\">'error'</span>, createErrorHandler(<span class=\"string\">'uglify'</span>)))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'build'</span>))</span><br><span class=\"line\">        .pipe($.size(&#123; <span class=\"attr\">title</span>: <span class=\"string\">'minify_js'</span> &#125;));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"abbrlink":"0","title":"hexo 备份","author":"wencaizhang","date":"2018-01-07T15:01:00.000Z","_content":"## 关于备份源文件我是这么做的\n\n  在搭建博客的时候，通常都会在 GitHub 上面创建一个 git 仓库，利用 GitHub 提供的 gh-pages 功能，将 hexo 生成的静态网页提交到 master 分支。那么顺着这个思路，利用 git 的分支功能将这个仓库变成集展示和备份于一体的 git 仓库。\n\n  例如，创建 source 分支用于管理配置文件和博客文章源文件，如果对博客主题进行了自定义，还可以再创建一个 theme 分支用于管理主题。\n\n  这样做的好处，一方面是备份，另一个方面是方便在不同的电脑上快速搭建环境，只需要 `git clone` 和 `npm install` 两个命令就可以搞定！\n\n## 一键部署\n\n如果按照上面的方法做，每次写完文章最后都会用这么几个步骤：\n1. `hexo` 的部署命令 `hexo d`\n1. 提交 `source` 分支源文件\n1. 如果修改了主题，还要切换目录并提交 `theme` 分支\n\n利用 npm scripts 可以一条命令全部搞定！\n\n做前端开发的同学可能会对此比较熟悉，在网站根目录下有一个 `package.json` 文件，里面有个 `scripts` 字段，这里面可以自定义命令。\n\n如果对 `npm scripts` 不太了解的，推荐：[npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n\n简单介绍下这段 `npm scripts` ：\n1. `scripts` 字段是一个对象。它的每一个属性，对应一段脚本。例如 `dev` 字段对应的脚本是 `hexo clean && hexo g && hexo s`，命令行中使用 `npm run dev` 就可以执行这段脚本\n1. `&&`: 表示前一个任务执行成功，后一个任务才执行，`&` 则是两个任务同时执行\n1. `npm run dev`: 主要用于本地预览博客，按照顺序执行 `hexo clean`、`hexo g`、`hexo s`，只有前一个任务执行成功，后一个才执行\n1. `npm run push`: 部署博客\n1. `npm run prepush`: 提交 `source` 分支\n1. `npm run postpush`: 提交 `theme` 分支\n1. 钩子: `npm scripts` 有 `pre` 和 `post` 两个钩子。例如 `push` 脚本的钩子是 `prepush` 和 `postpush`，`prepush` 在 `push` 脚本之前执行，`postpush` 在 `push` 脚本之后执行。也就是说，执行 `npm run push` 的时候，会自动按照顺序先后执行 `npm run prepush && npm run push && npm run postpush` 。\n\n因此，在部署时，只需执行命令 `npm run push`，会自动部署博客网站，提交 `source` 和 `theme` 分支。\n  ```bash\n  \"scripts\": {\n    \"dev\": \"hexo clean && hexo g && hexo s\",\n    \"prepush\": \"git add -A && git commit -m update && git push origin source\",\n    \"push\": \"hexo clean && hexo g && hexo d\",\n    \"postpush\": \"cd themes/indigo && git add -A && git commit -m update && git push origin theme\"\n  }\n  ```","source":"_posts/hexo-admin.md","raw":"abbrlink: '0'\ntitle: hexo 备份\ntags:\n  - hexo\ncategories:\n  - Hexo\nauthor: wencaizhang\ndate: 2018-01-07 23:01:00\n---\n## 关于备份源文件我是这么做的\n\n  在搭建博客的时候，通常都会在 GitHub 上面创建一个 git 仓库，利用 GitHub 提供的 gh-pages 功能，将 hexo 生成的静态网页提交到 master 分支。那么顺着这个思路，利用 git 的分支功能将这个仓库变成集展示和备份于一体的 git 仓库。\n\n  例如，创建 source 分支用于管理配置文件和博客文章源文件，如果对博客主题进行了自定义，还可以再创建一个 theme 分支用于管理主题。\n\n  这样做的好处，一方面是备份，另一个方面是方便在不同的电脑上快速搭建环境，只需要 `git clone` 和 `npm install` 两个命令就可以搞定！\n\n## 一键部署\n\n如果按照上面的方法做，每次写完文章最后都会用这么几个步骤：\n1. `hexo` 的部署命令 `hexo d`\n1. 提交 `source` 分支源文件\n1. 如果修改了主题，还要切换目录并提交 `theme` 分支\n\n利用 npm scripts 可以一条命令全部搞定！\n\n做前端开发的同学可能会对此比较熟悉，在网站根目录下有一个 `package.json` 文件，里面有个 `scripts` 字段，这里面可以自定义命令。\n\n如果对 `npm scripts` 不太了解的，推荐：[npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n\n简单介绍下这段 `npm scripts` ：\n1. `scripts` 字段是一个对象。它的每一个属性，对应一段脚本。例如 `dev` 字段对应的脚本是 `hexo clean && hexo g && hexo s`，命令行中使用 `npm run dev` 就可以执行这段脚本\n1. `&&`: 表示前一个任务执行成功，后一个任务才执行，`&` 则是两个任务同时执行\n1. `npm run dev`: 主要用于本地预览博客，按照顺序执行 `hexo clean`、`hexo g`、`hexo s`，只有前一个任务执行成功，后一个才执行\n1. `npm run push`: 部署博客\n1. `npm run prepush`: 提交 `source` 分支\n1. `npm run postpush`: 提交 `theme` 分支\n1. 钩子: `npm scripts` 有 `pre` 和 `post` 两个钩子。例如 `push` 脚本的钩子是 `prepush` 和 `postpush`，`prepush` 在 `push` 脚本之前执行，`postpush` 在 `push` 脚本之后执行。也就是说，执行 `npm run push` 的时候，会自动按照顺序先后执行 `npm run prepush && npm run push && npm run postpush` 。\n\n因此，在部署时，只需执行命令 `npm run push`，会自动部署博客网站，提交 `source` 和 `theme` 分支。\n  ```bash\n  \"scripts\": {\n    \"dev\": \"hexo clean && hexo g && hexo s\",\n    \"prepush\": \"git add -A && git commit -m update && git push origin source\",\n    \"push\": \"hexo clean && hexo g && hexo d\",\n    \"postpush\": \"cd themes/indigo && git add -A && git commit -m update && git push origin theme\"\n  }\n  ```","slug":"hexo-admin","published":1,"updated":"2018-01-07T15:48:50.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdo300080gqmoqq9a4wz","content":"<h2 id=\"关于备份源文件我是这么做的\"><a href=\"#关于备份源文件我是这么做的\" class=\"headerlink\" title=\"关于备份源文件我是这么做的\"></a>关于备份源文件我是这么做的</h2><p>  在搭建博客的时候，通常都会在 GitHub 上面创建一个 git 仓库，利用 GitHub 提供的 gh-pages 功能，将 hexo 生成的静态网页提交到 master 分支。那么顺着这个思路，利用 git 的分支功能将这个仓库变成集展示和备份于一体的 git 仓库。</p>\n<p>  例如，创建 source 分支用于管理配置文件和博客文章源文件，如果对博客主题进行了自定义，还可以再创建一个 theme 分支用于管理主题。</p>\n<p>  这样做的好处，一方面是备份，另一个方面是方便在不同的电脑上快速搭建环境，只需要 <code>git clone</code> 和 <code>npm install</code> 两个命令就可以搞定！</p>\n<h2 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h2><p>如果按照上面的方法做，每次写完文章最后都会用这么几个步骤：</p>\n<ol>\n<li><code>hexo</code> 的部署命令 <code>hexo d</code></li>\n<li>提交 <code>source</code> 分支源文件</li>\n<li>如果修改了主题，还要切换目录并提交 <code>theme</code> 分支</li>\n</ol>\n<p>利用 npm scripts 可以一条命令全部搞定！</p>\n<p>做前端开发的同学可能会对此比较熟悉，在网站根目录下有一个 <code>package.json</code> 文件，里面有个 <code>scripts</code> 字段，这里面可以自定义命令。</p>\n<p>如果对 <code>npm scripts</code> 不太了解的，推荐：<a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></p>\n<p>简单介绍下这段 <code>npm scripts</code> ：</p>\n<ol>\n<li><code>scripts</code> 字段是一个对象。它的每一个属性，对应一段脚本。例如 <code>dev</code> 字段对应的脚本是 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，命令行中使用 <code>npm run dev</code> 就可以执行这段脚本</li>\n<li><code>&amp;&amp;</code>: 表示前一个任务执行成功，后一个任务才执行，<code>&amp;</code> 则是两个任务同时执行</li>\n<li><code>npm run dev</code>: 主要用于本地预览博客，按照顺序执行 <code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，只有前一个任务执行成功，后一个才执行</li>\n<li><code>npm run push</code>: 部署博客</li>\n<li><code>npm run prepush</code>: 提交 <code>source</code> 分支</li>\n<li><code>npm run postpush</code>: 提交 <code>theme</code> 分支</li>\n<li>钩子: <code>npm scripts</code> 有 <code>pre</code> 和 <code>post</code> 两个钩子。例如 <code>push</code> 脚本的钩子是 <code>prepush</code> 和 <code>postpush</code>，<code>prepush</code> 在 <code>push</code> 脚本之前执行，<code>postpush</code> 在 <code>push</code> 脚本之后执行。也就是说，执行 <code>npm run push</code> 的时候，会自动按照顺序先后执行 <code>npm run prepush &amp;&amp; npm run push &amp;&amp; npm run postpush</code> 。</li>\n</ol>\n<p>因此，在部署时，只需执行命令 <code>npm run push</code>，会自动部署博客网站，提交 <code>source</code> 和 <code>theme</code> 分支。<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"prepush\"</span>: <span class=\"string\">\"git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin source\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"push\"</span>: <span class=\"string\">\"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"postpush\"</span>: <span class=\"string\">\"cd themes/indigo &amp;&amp; git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin theme\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"关于备份源文件我是这么做的\"><a href=\"#关于备份源文件我是这么做的\" class=\"headerlink\" title=\"关于备份源文件我是这么做的\"></a>关于备份源文件我是这么做的</h2><p>  在搭建博客的时候，通常都会在 GitHub 上面创建一个 git 仓库，利用 GitHub 提供的 gh-pages 功能，将 hexo 生成的静态网页提交到 master 分支。那么顺着这个思路，利用 git 的分支功能将这个仓库变成集展示和备份于一体的 git 仓库。</p>\n<p>  例如，创建 source 分支用于管理配置文件和博客文章源文件，如果对博客主题进行了自定义，还可以再创建一个 theme 分支用于管理主题。</p>\n<p>  这样做的好处，一方面是备份，另一个方面是方便在不同的电脑上快速搭建环境，只需要 <code>git clone</code> 和 <code>npm install</code> 两个命令就可以搞定！</p>\n<h2 id=\"一键部署\"><a href=\"#一键部署\" class=\"headerlink\" title=\"一键部署\"></a>一键部署</h2><p>如果按照上面的方法做，每次写完文章最后都会用这么几个步骤：</p>\n<ol>\n<li><code>hexo</code> 的部署命令 <code>hexo d</code></li>\n<li>提交 <code>source</code> 分支源文件</li>\n<li>如果修改了主题，还要切换目录并提交 <code>theme</code> 分支</li>\n</ol>\n<p>利用 npm scripts 可以一条命令全部搞定！</p>\n<p>做前端开发的同学可能会对此比较熟悉，在网站根目录下有一个 <code>package.json</code> 文件，里面有个 <code>scripts</code> 字段，这里面可以自定义命令。</p>\n<p>如果对 <code>npm scripts</code> 不太了解的，推荐：<a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener\">npm scripts 使用指南</a></p>\n<p>简单介绍下这段 <code>npm scripts</code> ：</p>\n<ol>\n<li><code>scripts</code> 字段是一个对象。它的每一个属性，对应一段脚本。例如 <code>dev</code> 字段对应的脚本是 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，命令行中使用 <code>npm run dev</code> 就可以执行这段脚本</li>\n<li><code>&amp;&amp;</code>: 表示前一个任务执行成功，后一个任务才执行，<code>&amp;</code> 则是两个任务同时执行</li>\n<li><code>npm run dev</code>: 主要用于本地预览博客，按照顺序执行 <code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，只有前一个任务执行成功，后一个才执行</li>\n<li><code>npm run push</code>: 部署博客</li>\n<li><code>npm run prepush</code>: 提交 <code>source</code> 分支</li>\n<li><code>npm run postpush</code>: 提交 <code>theme</code> 分支</li>\n<li>钩子: <code>npm scripts</code> 有 <code>pre</code> 和 <code>post</code> 两个钩子。例如 <code>push</code> 脚本的钩子是 <code>prepush</code> 和 <code>postpush</code>，<code>prepush</code> 在 <code>push</code> 脚本之前执行，<code>postpush</code> 在 <code>push</code> 脚本之后执行。也就是说，执行 <code>npm run push</code> 的时候，会自动按照顺序先后执行 <code>npm run prepush &amp;&amp; npm run push &amp;&amp; npm run postpush</code> 。</li>\n</ol>\n<p>因此，在部署时，只需执行命令 <code>npm run push</code>，会自动部署博客网站，提交 <code>source</code> 和 <code>theme</code> 分支。<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"prepush\"</span>: <span class=\"string\">\"git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin source\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"push\"</span>: <span class=\"string\">\"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"postpush\"</span>: <span class=\"string\">\"cd themes/indigo &amp;&amp; git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin theme\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"React 点击事件为什么没有被触发？","abbrlink":"c48ecca5","date":"2017-11-19T12:20:53.000Z","_content":"\n点击事件可以说是最常用的事件了，但在 `React` 中有时候事件却没有触发。Why?\n<!--more-->\n\n## 问题描述\n关键代码如下所示，`Title` 是一个标题组件，我希望在点击此组件时，执行 `handleClick` 方法。\n\n但实际上，点击标题时 `handleClick` 方法并没有被执行。Why?\n```jsx\nclass Container extends Component {\n  handleClick() {\n    console.log('click on container')\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Title onClick={ this.handleClick.bind(this) }/>\n      </div>\n    );\n  }\n}\n```\n\n## 原因\n`Title` 是 `react` 组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。\n\n所有的事件处理函数都必须要绑定到真实的 `DOM` 上。传给组件，组件只会认为它是个 `props`。\n\n## 解决办法有两种\n1. 如果 `Title` 是自定义组件，可以修改组件内部，监听点击事件，通过 `props` 执行 `handleClick` 方法，代码如下：\n```jsx\nclass Title extends Component {\n  render() {\n    return (\n      <div onClick={ this.props.onClick } className=\"title\">\n        <h1>React</h1>\n      </div>\n    );\n  }\n}\n```\n\n2. 如果 `Title` 是第三方组件，可以在 `Title` 组件外部包裹一层 `DOM` 元素，在 `DOM` 元素上监听点击事件。\n```jsx\nclass Container extends Component {\n  handleClick() {\n    console.log('click on container')\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div onClick={ this.handleClick.bind(this) }></div><Title/></div>\n      </div>\n    );\n  }\n}\n```\n\n最后，文档是个好东西，[文档地址](https://reactjs.org/docs/handling-events.html)","source":"_posts/react-event.md","raw":"---\ntitle: React 点击事件为什么没有被触发？\ntags:\n  - React\n  - JavaScript\ncategories:\n  - React\nabbrlink: c48ecca5\ndate: 2017-11-19 20:20:53\n---\n\n点击事件可以说是最常用的事件了，但在 `React` 中有时候事件却没有触发。Why?\n<!--more-->\n\n## 问题描述\n关键代码如下所示，`Title` 是一个标题组件，我希望在点击此组件时，执行 `handleClick` 方法。\n\n但实际上，点击标题时 `handleClick` 方法并没有被执行。Why?\n```jsx\nclass Container extends Component {\n  handleClick() {\n    console.log('click on container')\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Title onClick={ this.handleClick.bind(this) }/>\n      </div>\n    );\n  }\n}\n```\n\n## 原因\n`Title` 是 `react` 组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。\n\n所有的事件处理函数都必须要绑定到真实的 `DOM` 上。传给组件，组件只会认为它是个 `props`。\n\n## 解决办法有两种\n1. 如果 `Title` 是自定义组件，可以修改组件内部，监听点击事件，通过 `props` 执行 `handleClick` 方法，代码如下：\n```jsx\nclass Title extends Component {\n  render() {\n    return (\n      <div onClick={ this.props.onClick } className=\"title\">\n        <h1>React</h1>\n      </div>\n    );\n  }\n}\n```\n\n2. 如果 `Title` 是第三方组件，可以在 `Title` 组件外部包裹一层 `DOM` 元素，在 `DOM` 元素上监听点击事件。\n```jsx\nclass Container extends Component {\n  handleClick() {\n    console.log('click on container')\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div onClick={ this.handleClick.bind(this) }></div><Title/></div>\n      </div>\n    );\n  }\n}\n```\n\n最后，文档是个好东西，[文档地址](https://reactjs.org/docs/handling-events.html)","slug":"react-event","published":1,"updated":"2018-01-07T14:44:29.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdo6000c0gqmcqoe91pp","content":"<p>点击事件可以说是最常用的事件了，但在 <code>React</code> 中有时候事件却没有触发。Why?<br><a id=\"more\"></a></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>关键代码如下所示，<code>Title</code> 是一个标题组件，我希望在点击此组件时，执行 <code>handleClick</code> 方法。</p>\n<p>但实际上，点击标题时 <code>handleClick</code> 方法并没有被执行。Why?<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click on container'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;Title onClick=&#123; <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>) &#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p><code>Title</code> 是 <code>react</code> 组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。</p>\n<p>所有的事件处理函数都必须要绑定到真实的 <code>DOM</code> 上。传给组件，组件只会认为它是个 <code>props</code>。</p>\n<h2 id=\"解决办法有两种\"><a href=\"#解决办法有两种\" class=\"headerlink\" title=\"解决办法有两种\"></a>解决办法有两种</h2><ol>\n<li><p>如果 <code>Title</code> 是自定义组件，可以修改组件内部，监听点击事件，通过 <code>props</code> 执行 <code>handleClick</code> 方法，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div onClick=&#123; <span class=\"keyword\">this</span>.props.onClick &#125; className=<span class=\"string\">\"title\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;React&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 <code>Title</code> 是第三方组件，可以在 <code>Title</code> 组件外部包裹一层 <code>DOM</code> 元素，在 <code>DOM</code> 元素上监听点击事件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click on container'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;div onClick=&#123; <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>) &#125;&gt;&lt;/div&gt;&lt;Title/&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最后，文档是个好东西，<a href=\"https://reactjs.org/docs/handling-events.html\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>点击事件可以说是最常用的事件了，但在 <code>React</code> 中有时候事件却没有触发。Why?<br>","more":"</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>关键代码如下所示，<code>Title</code> 是一个标题组件，我希望在点击此组件时，执行 <code>handleClick</code> 方法。</p>\n<p>但实际上，点击标题时 <code>handleClick</code> 方法并没有被执行。Why?<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click on container'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;Title onClick=&#123; <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>) &#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p><code>Title</code> 是 <code>react</code> 组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。</p>\n<p>所有的事件处理函数都必须要绑定到真实的 <code>DOM</code> 上。传给组件，组件只会认为它是个 <code>props</code>。</p>\n<h2 id=\"解决办法有两种\"><a href=\"#解决办法有两种\" class=\"headerlink\" title=\"解决办法有两种\"></a>解决办法有两种</h2><ol>\n<li><p>如果 <code>Title</code> 是自定义组件，可以修改组件内部，监听点击事件，通过 <code>props</code> 执行 <code>handleClick</code> 方法，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Title</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div onClick=&#123; <span class=\"keyword\">this</span>.props.onClick &#125; className=<span class=\"string\">\"title\"</span>&gt;</span><br><span class=\"line\">        &lt;h1&gt;React&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 <code>Title</code> 是第三方组件，可以在 <code>Title</code> 组件外部包裹一层 <code>DOM</code> 元素，在 <code>DOM</code> 元素上监听点击事件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleClick() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'click on container'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;div onClick=&#123; <span class=\"keyword\">this</span>.handleClick.bind(<span class=\"keyword\">this</span>) &#125;&gt;&lt;/div&gt;&lt;Title/&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最后，文档是个好东西，<a href=\"https://reactjs.org/docs/handling-events.html\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>"},{"title":"微代码","abbrlink":"6f49a3ac","date":"2017-11-19T12:20:53.000Z","_content":"\n常用代码段，样式代码为主。\n<!--more-->\n \n### 光标形状\n \n1. 小手  `cursor: pointer;`\n2. 等待  `cursor: wait;`\n \n \n### C3属性 禁用 `onclick` 事件\n[CSS3 pointer-events:none应用举例及扩展](http://www.zhangxinxu.com/wordpress/2011/12/css3-pointer-events-none-javascript/)\n \n`point-events: auto;`\n \n \n### 网页被选中文字的背景颜色\n```css\n::selection {\n    background-color: green;\n    color: pink;\n}\n```\n \n### 修改`placeholder`文本的样式\n```css\ninput::-webkit-input-placeholder {\n    color: #ccc;\n    letter-spacing: 2px;\n    font-size: 20px;\n}\n```\n \n### 文本间距\n`letter-spacing: 2px;`\n \n \n### 去掉 input 的外边线\n`outline: none;`\n \n \n### select 的 option 选项文本默认左对齐，通过以下是属性设置居中\n \n```css\nselect {\n    text-align: center;\n    /* 单独一个 text-align 没有效果 */\n    text-align-last: center;\n}\n```\n \n### 点击自身以外的地方，关闭弹出层(待定)\n```js\n$(\"body\").click(function() {\n    if($(\".ele\")){\n        $(\".ele\").hide();\n    }\n})\n```\n \n### 移动端的问题\n \n1. iOS/安卓默认样式的不同，如select、a链接\n2. font-size 小于 10px 时候，height 等于 line-height 无法将单行文本居中\n3. input 和 fixed定位的冲突 [Web移动端Fixed布局的解决方案](http://efe.baidu.com/blog/mobile-fixed-layout/)\n4. 图片\n5. 长度单位(px/em/rem)\n \n \n### 原生组件样式设置问题，如 `input`\n \n主要思路为隐藏原生组件的样式，设置 `label` 标签的样式\n \n或者是通过定位、不透明度和层级等属性将原生组件和自定义样式的 `div` 位置重合，做一个样式的障眼法\n \n \n### 禁止用户选中文本\n \n```css\ndiv {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n```\n \n### 多余文本显示省略号\n \n```css\nwidth: 100px; /* 固定宽度 */\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n```\n\n### 双伪元素清除浮动\n```css\n.clearfix:after, .clearfix:before {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n.clearfix {\n    zoom: 1;\n}\n```\n\n### 伪元素清除浮动\n```css\n.clearfix:after {\n    content:\"\";\n    height: 0;\n    line-height: 0;\n    display: block;\n    visibility:hidden;\n    clear:both;\n}\n.clearfix {\n    zoom: 1;/*用来兼容ie浏览器*/\n}\n```\n","source":"_posts/micro-code.md","raw":"---\ntitle: 微代码\ntags:\n  - code\ncategories: code\nabbrlink: 6f49a3ac\ndate: 2017-11-19 20:20:53\n---\n\n常用代码段，样式代码为主。\n<!--more-->\n \n### 光标形状\n \n1. 小手  `cursor: pointer;`\n2. 等待  `cursor: wait;`\n \n \n### C3属性 禁用 `onclick` 事件\n[CSS3 pointer-events:none应用举例及扩展](http://www.zhangxinxu.com/wordpress/2011/12/css3-pointer-events-none-javascript/)\n \n`point-events: auto;`\n \n \n### 网页被选中文字的背景颜色\n```css\n::selection {\n    background-color: green;\n    color: pink;\n}\n```\n \n### 修改`placeholder`文本的样式\n```css\ninput::-webkit-input-placeholder {\n    color: #ccc;\n    letter-spacing: 2px;\n    font-size: 20px;\n}\n```\n \n### 文本间距\n`letter-spacing: 2px;`\n \n \n### 去掉 input 的外边线\n`outline: none;`\n \n \n### select 的 option 选项文本默认左对齐，通过以下是属性设置居中\n \n```css\nselect {\n    text-align: center;\n    /* 单独一个 text-align 没有效果 */\n    text-align-last: center;\n}\n```\n \n### 点击自身以外的地方，关闭弹出层(待定)\n```js\n$(\"body\").click(function() {\n    if($(\".ele\")){\n        $(\".ele\").hide();\n    }\n})\n```\n \n### 移动端的问题\n \n1. iOS/安卓默认样式的不同，如select、a链接\n2. font-size 小于 10px 时候，height 等于 line-height 无法将单行文本居中\n3. input 和 fixed定位的冲突 [Web移动端Fixed布局的解决方案](http://efe.baidu.com/blog/mobile-fixed-layout/)\n4. 图片\n5. 长度单位(px/em/rem)\n \n \n### 原生组件样式设置问题，如 `input`\n \n主要思路为隐藏原生组件的样式，设置 `label` 标签的样式\n \n或者是通过定位、不透明度和层级等属性将原生组件和自定义样式的 `div` 位置重合，做一个样式的障眼法\n \n \n### 禁止用户选中文本\n \n```css\ndiv {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n```\n \n### 多余文本显示省略号\n \n```css\nwidth: 100px; /* 固定宽度 */\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n```\n\n### 双伪元素清除浮动\n```css\n.clearfix:after, .clearfix:before {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n.clearfix {\n    zoom: 1;\n}\n```\n\n### 伪元素清除浮动\n```css\n.clearfix:after {\n    content:\"\";\n    height: 0;\n    line-height: 0;\n    display: block;\n    visibility:hidden;\n    clear:both;\n}\n.clearfix {\n    zoom: 1;/*用来兼容ie浏览器*/\n}\n```\n","slug":"micro-code","published":1,"updated":"2018-01-07T14:44:29.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdo9000d0gqm7momh8bu","content":"<p>常用代码段，样式代码为主。<br><a id=\"more\"></a></p>\n<h3 id=\"光标形状\"><a href=\"#光标形状\" class=\"headerlink\" title=\"光标形状\"></a>光标形状</h3><ol>\n<li>小手  <code>cursor: pointer;</code></li>\n<li>等待  <code>cursor: wait;</code></li>\n</ol>\n<h3 id=\"C3属性-禁用-onclick-事件\"><a href=\"#C3属性-禁用-onclick-事件\" class=\"headerlink\" title=\"C3属性 禁用 onclick 事件\"></a>C3属性 禁用 <code>onclick</code> 事件</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2011/12/css3-pointer-events-none-javascript/\" target=\"_blank\" rel=\"noopener\">CSS3 pointer-events:none应用举例及扩展</a></p>\n<p><code>point-events: auto;</code></p>\n<h3 id=\"网页被选中文字的背景颜色\"><a href=\"#网页被选中文字的背景颜色\" class=\"headerlink\" title=\"网页被选中文字的背景颜色\"></a>网页被选中文字的背景颜色</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改placeholder文本的样式\"><a href=\"#修改placeholder文本的样式\" class=\"headerlink\" title=\"修改placeholder文本的样式\"></a>修改<code>placeholder</code>文本的样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文本间距\"><a href=\"#文本间距\" class=\"headerlink\" title=\"文本间距\"></a>文本间距</h3><p><code>letter-spacing: 2px;</code></p>\n<h3 id=\"去掉-input-的外边线\"><a href=\"#去掉-input-的外边线\" class=\"headerlink\" title=\"去掉 input 的外边线\"></a>去掉 input 的外边线</h3><p><code>outline: none;</code></p>\n<h3 id=\"select-的-option-选项文本默认左对齐，通过以下是属性设置居中\"><a href=\"#select-的-option-选项文本默认左对齐，通过以下是属性设置居中\" class=\"headerlink\" title=\"select 的 option 选项文本默认左对齐，通过以下是属性设置居中\"></a>select 的 option 选项文本默认左对齐，通过以下是属性设置居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/* 单独一个 text-align 没有效果 */</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align-last</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击自身以外的地方，关闭弹出层-待定\"><a href=\"#点击自身以外的地方，关闭弹出层-待定\" class=\"headerlink\" title=\"点击自身以外的地方，关闭弹出层(待定)\"></a>点击自身以外的地方，关闭弹出层(待定)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"body\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(<span class=\"string\">\".ele\"</span>))&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\".ele\"</span>).hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动端的问题\"><a href=\"#移动端的问题\" class=\"headerlink\" title=\"移动端的问题\"></a>移动端的问题</h3><ol>\n<li>iOS/安卓默认样式的不同，如select、a链接</li>\n<li>font-size 小于 10px 时候，height 等于 line-height 无法将单行文本居中</li>\n<li>input 和 fixed定位的冲突 <a href=\"http://efe.baidu.com/blog/mobile-fixed-layout/\" target=\"_blank\" rel=\"noopener\">Web移动端Fixed布局的解决方案</a></li>\n<li>图片</li>\n<li>长度单位(px/em/rem)</li>\n</ol>\n<h3 id=\"原生组件样式设置问题，如-input\"><a href=\"#原生组件样式设置问题，如-input\" class=\"headerlink\" title=\"原生组件样式设置问题，如 input\"></a>原生组件样式设置问题，如 <code>input</code></h3><p>主要思路为隐藏原生组件的样式，设置 <code>label</code> 标签的样式</p>\n<p>或者是通过定位、不透明度和层级等属性将原生组件和自定义样式的 <code>div</code> 位置重合，做一个样式的障眼法</p>\n<h3 id=\"禁止用户选中文本\"><a href=\"#禁止用户选中文本\" class=\"headerlink\" title=\"禁止用户选中文本\"></a>禁止用户选中文本</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-khtml-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多余文本显示省略号\"><a href=\"#多余文本显示省略号\" class=\"headerlink\" title=\"多余文本显示省略号\"></a>多余文本显示省略号</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 100<span class=\"selector-tag\">px</span>; <span class=\"comment\">/* 固定宽度 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双伪元素清除浮动\"><a href=\"#双伪元素清除浮动\" class=\"headerlink\" title=\"双伪元素清除浮动\"></a>双伪元素清除浮动</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪元素清除浮动\"><a href=\"#伪元素清除浮动\" class=\"headerlink\" title=\"伪元素清除浮动\"></a>伪元素清除浮动</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;<span class=\"comment\">/*用来兼容ie浏览器*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>常用代码段，样式代码为主。<br>","more":"</p>\n<h3 id=\"光标形状\"><a href=\"#光标形状\" class=\"headerlink\" title=\"光标形状\"></a>光标形状</h3><ol>\n<li>小手  <code>cursor: pointer;</code></li>\n<li>等待  <code>cursor: wait;</code></li>\n</ol>\n<h3 id=\"C3属性-禁用-onclick-事件\"><a href=\"#C3属性-禁用-onclick-事件\" class=\"headerlink\" title=\"C3属性 禁用 onclick 事件\"></a>C3属性 禁用 <code>onclick</code> 事件</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2011/12/css3-pointer-events-none-javascript/\" target=\"_blank\" rel=\"noopener\">CSS3 pointer-events:none应用举例及扩展</a></p>\n<p><code>point-events: auto;</code></p>\n<h3 id=\"网页被选中文字的背景颜色\"><a href=\"#网页被选中文字的背景颜色\" class=\"headerlink\" title=\"网页被选中文字的背景颜色\"></a>网页被选中文字的背景颜色</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改placeholder文本的样式\"><a href=\"#修改placeholder文本的样式\" class=\"headerlink\" title=\"修改placeholder文本的样式\"></a>修改<code>placeholder</code>文本的样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文本间距\"><a href=\"#文本间距\" class=\"headerlink\" title=\"文本间距\"></a>文本间距</h3><p><code>letter-spacing: 2px;</code></p>\n<h3 id=\"去掉-input-的外边线\"><a href=\"#去掉-input-的外边线\" class=\"headerlink\" title=\"去掉 input 的外边线\"></a>去掉 input 的外边线</h3><p><code>outline: none;</code></p>\n<h3 id=\"select-的-option-选项文本默认左对齐，通过以下是属性设置居中\"><a href=\"#select-的-option-选项文本默认左对齐，通过以下是属性设置居中\" class=\"headerlink\" title=\"select 的 option 选项文本默认左对齐，通过以下是属性设置居中\"></a>select 的 option 选项文本默认左对齐，通过以下是属性设置居中</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"comment\">/* 单独一个 text-align 没有效果 */</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align-last</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击自身以外的地方，关闭弹出层-待定\"><a href=\"#点击自身以外的地方，关闭弹出层-待定\" class=\"headerlink\" title=\"点击自身以外的地方，关闭弹出层(待定)\"></a>点击自身以外的地方，关闭弹出层(待定)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"body\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(<span class=\"string\">\".ele\"</span>))&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\".ele\"</span>).hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动端的问题\"><a href=\"#移动端的问题\" class=\"headerlink\" title=\"移动端的问题\"></a>移动端的问题</h3><ol>\n<li>iOS/安卓默认样式的不同，如select、a链接</li>\n<li>font-size 小于 10px 时候，height 等于 line-height 无法将单行文本居中</li>\n<li>input 和 fixed定位的冲突 <a href=\"http://efe.baidu.com/blog/mobile-fixed-layout/\" target=\"_blank\" rel=\"noopener\">Web移动端Fixed布局的解决方案</a></li>\n<li>图片</li>\n<li>长度单位(px/em/rem)</li>\n</ol>\n<h3 id=\"原生组件样式设置问题，如-input\"><a href=\"#原生组件样式设置问题，如-input\" class=\"headerlink\" title=\"原生组件样式设置问题，如 input\"></a>原生组件样式设置问题，如 <code>input</code></h3><p>主要思路为隐藏原生组件的样式，设置 <code>label</code> 标签的样式</p>\n<p>或者是通过定位、不透明度和层级等属性将原生组件和自定义样式的 <code>div</code> 位置重合，做一个样式的障眼法</p>\n<h3 id=\"禁止用户选中文本\"><a href=\"#禁止用户选中文本\" class=\"headerlink\" title=\"禁止用户选中文本\"></a>禁止用户选中文本</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-khtml-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多余文本显示省略号\"><a href=\"#多余文本显示省略号\" class=\"headerlink\" title=\"多余文本显示省略号\"></a>多余文本显示省略号</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>: 100<span class=\"selector-tag\">px</span>; <span class=\"comment\">/* 固定宽度 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双伪元素清除浮动\"><a href=\"#双伪元素清除浮动\" class=\"headerlink\" title=\"双伪元素清除浮动\"></a>双伪元素清除浮动</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>, <span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪元素清除浮动\"><a href=\"#伪元素清除浮动\" class=\"headerlink\" title=\"伪元素清除浮动\"></a>伪元素清除浮动</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;<span class=\"comment\">/*用来兼容ie浏览器*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"React 中阻止事件冒泡","abbrlink":"9bcb3406","date":"2017-11-19T12:20:53.000Z","_content":"\nreact 和原生 JavaScript 阻止事件冒泡的方式是否相同？\n<!--more-->\nTODO\n## 问题描述\n```\n???\ne.preventDefault(); // 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。但不阻止事件的冒泡传播\ne.stopPropagation() // 阻止事件的冒泡传播，但不阻止其默认行为\nreturne false;      // 阻止两者\ne.preventDefault();\ne.stopPropagation();\ne.nativeEvent.stopImmediatePropagation();\n```\n## 原因\n\n## 解决办法\n","source":"_posts/react-stop-propagation.md","raw":"---\ntitle: React 中阻止事件冒泡\ntags:\n  - React\n  - JavaScript\ncategories:\n  - React\nabbrlink: 9bcb3406\ndate: 2017-11-19 20:20:53\n---\n\nreact 和原生 JavaScript 阻止事件冒泡的方式是否相同？\n<!--more-->\nTODO\n## 问题描述\n```\n???\ne.preventDefault(); // 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。但不阻止事件的冒泡传播\ne.stopPropagation() // 阻止事件的冒泡传播，但不阻止其默认行为\nreturne false;      // 阻止两者\ne.preventDefault();\ne.stopPropagation();\ne.nativeEvent.stopImmediatePropagation();\n```\n## 原因\n\n## 解决办法\n","slug":"react-stop-propagation","published":1,"updated":"2018-01-07T14:44:29.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdoh000h0gqmfxg0vgxk","content":"<p>react 和原生 JavaScript 阻止事件冒泡的方式是否相同？<br><a id=\"more\"></a><br>TODO</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">???</span><br><span class=\"line\">e.preventDefault(); // 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。但不阻止事件的冒泡传播</span><br><span class=\"line\">e.stopPropagation() // 阻止事件的冒泡传播，但不阻止其默认行为</span><br><span class=\"line\">returne false;      // 阻止两者</span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\">e.stopPropagation();</span><br><span class=\"line\">e.nativeEvent.stopImmediatePropagation();</span><br></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2>","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>react 和原生 JavaScript 阻止事件冒泡的方式是否相同？<br>","more":"<br>TODO</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">???</span><br><span class=\"line\">e.preventDefault(); // 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。但不阻止事件的冒泡传播</span><br><span class=\"line\">e.stopPropagation() // 阻止事件的冒泡传播，但不阻止其默认行为</span><br><span class=\"line\">returne false;      // 阻止两者</span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\">e.stopPropagation();</span><br><span class=\"line\">e.nativeEvent.stopImmediatePropagation();</span><br></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2>"},{"title":"正则表达式","abbrlink":"2f57a694","date":"2018-01-02T08:27:53.000Z","_content":"\n## 元字符\n\n元字符既可以是放在 `[]` 中的任意单个字符（如 `[a]` 表示匹配单个小写字符 `a` ）\n\n也可以是字符序列（如 `[a-d]` 表示匹配 `a` 、 `b` 、 `c` 、 `d` 之间的任意一个字符，而 `\\w` 表示任意英文字母和数字及下划线）\n\n下面是一些常见的元字符：\n\n| 元字符    | 含义 |\n| ---       | --- |\n| `.`       | 匹配除 \\n 以外的任何字符（注意元字符是小数点）。 |\n| `[abcde]` | 匹配 `abcde` 之中的任意一个字符 |\n| `[a-h]`   | 匹配 `a` 到 `h` 之间的任意一个字符 |\n| `[^fgh]`  | 不与 `fgh` 之中的任意一个字符匹配 |\n| `\\w`      | 匹配大小写英文字符及数字 `0` 到 `9` 之间的任意一个及下划线，相当于 `[a-zA-Z0-9_]` |\n| `\\W`      | 不匹配大小写英文字符及数字 `0` 到 `9` 之间的任意一个，相当于 `[^a-zA-Z0-9_]` |\n| `\\s`      | 匹配任何空白字符，相当于 `[ \\f\\n\\r\\t\\v]` |\n| `\\S`      | 匹配任何非空白字符，相当于 `[^\\s]` |\n| `\\d`      | 匹配任何 `0` 到 `9` 之间的单个数字，相当于 `[0-9]` |\n| `\\D`      | 不匹配任何 `0` 到 `9` 之间的单个数字，相当于 `[^0-9]` |\n| `[\\u4e00-\\u9fa5]` | 匹配任意单个汉字（这里用的是 `Unicode` 编码表示汉字的 ) |\n\n## 正则表达式限定符\n\n上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。\n\n下面是一些常见的限定符 ( 下表中 `n` 和 `m` 都是表示整数，并且 `0 < n < m`) ： \n\n| 限定符  | 含义                                 |\n| ---     | ---                                  |\n| `*`     | 匹配 0 到多个元字符，相当于 `{0,}`   |\n| `?`     | 匹配 0 到 1 个元字符，相当于 `{0,1}` |\n| `+`     | 匹配至少 1 个元字符，相当于 `{1,}`   |\n| `{n}`   | 匹配 `n` 个元字符                    |\n| `{n,}`  | 匹配至少 `n` 个元字符                |\n| `{n,m}` | 匹配 `n` 到 `m` 个元字符             |\n| `\\b`    | 匹配单词边界                         |\n| `^`     | 字符串必须以指定的字符开始           |\n| `$`     | 字符串必须以指定的字符结束           |\n\n## 其他\n1. 由于在正则表达式中`\\`、`?`、`*`、`^`、`$`、`+`、`(`、`)`、`|`、`{`、`[`等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \\ ”，那么正则表达式应该这么写： \\\\+ 。\n\n2. 可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 `^(13)[4-9]\\d{8}$` 表示任意以 `13` 开头的移动手机号码。\n\n3. 另外对于中文字符的匹配是采用其对应的 `Unicode` 编码来匹配的，对于单个 `Unicode` 字符，如 `\\u4e00` 表示汉字“一”， `\\u9fa5`  表示汉字“龥”，在 `Unicode` 编码中这分别是所能表示的汉字的第一个和最后一个的 `Unicode` 编码，在 `Unicode` 编码中能表示 20901 个汉字。\n\n4. 关于 `\\b` 的用法，它代表单词的开始或者结尾，以字符串 `123a 345b 456 789d` 作为示例字符串，如果正则表达式是 `\\b\\d{3}\\b`，则仅能匹配 `456` 。\n\n5. 可以使用 `|` 来表示或的关系，例如 `[z|j|q]` 表示匹配 `z` 、 `j` 、 `q` 之中的任意一个字母。\n\n6. 正则验证工具： https://regexper.com/ \n\n## 正则对象属性\n\n > 属性均为只读，无法设置其值\n\n| 属性        |  含义                 | 默认值 |\n| ---         | ---                  | --- |\n| `global`    | 是否全文搜索          | `false` |\n| `ignoreCase` | 是否大小写敏感        | `false` |\n| `multiline` | 多行搜索              | `false` |\n| `lastIndex` | 是当前表达式匹配内容的最后一个字符的下一个位置| 无 |\n| `source`    | 正则表达式的文本字符串  | 无 |\n\n  如下：\n\n    ```js\n    var reg1 = /\\w/;\n    var reg2 = /\\w/gim;\n\n    console.log(reg1.global);        // false\n    console.log(reg1.ignoreCase);    // false\n    console.log(reg1.multiline);     // false\n    console.log(reg1.source);        // \"\\w\"\n\n    console.log(reg2.global);        // true\n    console.log(reg2.ignoreCase);    // true\n    console.log(reg2.multiline);     // true\n    console.log(reg2.source);        // \"\\w\"\n    ```\n## 正则对象方法\n### `RegExp.prototype.test(str)`\n\n+ 用于测试字符串参数中是否存在匹配正则表达式模式的字符串\n+ 如果存在则返回 `true`，否则返回 `false`\n\n    牛刀小试：\n    ```js\n    var reg = /\\w/;\n\n    reg.test('a');    // true\n    reg.test('ab');   // true\n    reg.test('$');    // true\n    ```\n\n    加上 `g` 标志后，结果有了一丝不同~~\n    ```js\n    var reg = /\\w/g;\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // false\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // false\n    ```\n\n这是因为在匹配的时候并不是每次都是从头开始的，而是每次匹配都会从上次匹配结果的下一个位置开始匹配，也就是 `lastIndex` 属性\n\n+ 第一次匹配到 `a`，\n+ 第二次从 `b` 开始，匹配到 `b`\n+ 第三次从 `b` 开始，没有匹配结果\n+ 因此出现上面的现象\n\n    ```js\n    var reg = /\\w/g;\n    while(reg.test('ab')) {\n        console.log(reg.lastIndex);\n    }\n    // 打印结果为 1，2\n    ```\n\n** `test()` 本意测试字符串和正则能否匹配上，而不关心是在哪个位置匹配到，所以就没必要加上 `g` 标志。**\n\n\n### `RegExp.prototype.exec(str)`\n\n+ 使用正则表达式对字符串进行搜索，并将更新全局 RegExp 对象的属性以反映匹配结果\n+ 如果没有匹配的文本则返回 `null`，否则返回一个结果数组，数组有两个属性：\n  - index 声明匹配文本地第一个字符的位置\n  - input 存放被检索的字符串 `string`\n  - 第一个元素是与正则表达式相匹配的文本\n  - 第二个元素是与正则表达式的第一个子表达式相匹配的文本（如果有的话）\n  - 第三个元素是与正则表达式的第二个子表达式相匹配的文本（如果有的话），以此类推...\n\n#### 非全局调用 `exec()` ，返回数组\n\n    ```js\n    var reg = /\\d(\\w)\\d/;\n    var str = '1a2b3c4d5e';\n    var ret = reg.exec(str);\n\n    console.log(reg.lastIndex);  \n    // 0  非全局下，lastIndex 不生效，在此处无意义\n\n    console.log(ret.index);      \n    // 0  匹配结果（1a2）的第一个字符在被检索的字符串(1a2b3c4d5e)中的位置\n\n    console.log(ret.input);      \n    // 1a2b3c4d5e\n\n    console.log(ret.toString()); \n    // 1a2,a\n    ```\n\n\n#### 全局调用 `exec()` 时，可以通过循环可以把每次匹配到的结果都拿到\n\n```js\nvar reg = /\\d(\\w)(\\w)\\d/g;\nvar str = '$1az2bb3cy4dd5ee';\n\nwhile(ret = reg.exec(str)) {\n    console.log(reg.lastIndex + '\\t' + ret.index + '\\t' + ret.toString());\n    // 5\t1\t1az2,a,z\n    // 11\t7\t3cy4,c,y\n}\n```\n\n+ 第一次匹配到的字符串是 `1az2` ，它在原字符串中的下一个字符的位置为 `5` ，且它第一个字符 `1` 在原字符串的位置为 `1`，其中第一个子表达式 `a`，第二个子表达式 `z`\n+ 第二次匹配到的字符串是 `3cy4` ，它在原字符串中的下一个字符的位置为 `11` ，且它第一个字符 `3` 在原字符串的位置为 `7`，其中第一个子表达式 `c`，第二个子表达式 `y`\n\n## 字符串的与正则相关的方法\n\n### 01-String.prototype.replace()\n\n`replace()` 方法的参数可以是一下几种方式：\n\n#### 1. `replace( str, str )`\n\n    ```js\n    'a1b'.replace('1', '2');    // \"a2b\"\n\n    'a1b1c1'.replace('1', '2');    // \"a2b1c1\"\n    ```\n\n\n#### 2. `replace( str, reg )`\n\n    ```js\n    'a1b1c1'.replace(/1/g, '2');    // \"a2b2c2\"\n    ```\n\n\n#### 3. `replace( str, function )`\n\n\n\n##### 示例：字符串中每个数字都加 1\n    ```js\n    'a1b2c3d4e5'.replace(/\\d/g, function ( match, index, origin ) {\n        // 正则表达式没有分组内容\n        console.log(index);  // 1 3 5 7 9\n        return parseInt(match) + 1;\n    });\n    // \"a2b3c4d5e6\"\n    ```\n\n\n##### 示例：获取 `url` 中的查询参数\n    ```js\n    // 1. 准备工作：取得查询字符串\n    // 假设当前 URL 为 'http://www.baidu.com?ie=UTF-8&wd=regexp'\n    // 可用如下方法获取查询字符串\n    // var searchStr = location.search.slice(1);  // 'ie=UTF-8&wd=regexp'\n\n    // 2. 利用正则获取查询参数\n    var searchStr = 'ie=UTF-8&wd=regexp';\n    var paraObj = {};\n\n    searchStr.replace(/([^=&]+)=([^=&]*)/ig, function ( match, group1, group2, index, origin) {\n\n        console.log(match + '\\t' + group1 + '\\t' + group2 + '\\t' + index + '\\t' + origin);\n        // ie=UTF-8    ie  UTF-8   0   ie=UTF-8&wd=regexp\n        // wd=regexp    wd  regexp  9   ie=UTF-8&wd=regexp\n        paraObj[group1] = group2\n\n    })\n    console.log(paraObj);\n    ```\n**function 参数含义：**\n\n1. 匹配字符串\n2. 正则表达式分组内容，没有分组则没有该参数\n3. 匹配项在字符串中的 `index`\n4. 原字符串\n\n|        | `match`     | `group1` | `group2` | `index` | `origin`             |\n|---     | :---:         | :---:      | :---:      | :---:     | :---:                  |\n| 第一次 | `ie=UTF-8`  | `ie`     | `UTF-8`  | `0`     | `ie=UTF-8&wd=regexp` |\n| 第二次 | `wd=regexp` | `wd`     | `regexp` | `9`     | `ie=UTF-8&wd=regexp` |\n\n### `String.prototype.search(reg)`\n\n+ `search()` 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串\n+ 方法返回第一个匹配结果 `index` ，差找不到返回 `-1`\n+ `search()` 不执行全局匹配，他将会略全局标志 `g` ，并且总是从字符串的开始进行检索\n\n    ```js\n    'a1b2c3d4'.search('1');\n    'a1b2c3d4'.search(/1/);\n    ```\n\n传入的参数不是正则的时候会尝试将其转换为正则\n\n### `String.prototype.match(reg)`\n\n+ `match()` 检索字符串，以找到一个或多个与正则表达式相匹配的文本\n+ 正则是否具有全局标志 `g` ，对结果影响很大\n\n### `String.prototype.split(reg)`\n\n    ```js\n    'a,b,c,d'.split(',');    // [\"a\", \"b\", \"c\", \"d\"]\n\n    'a1b2c3d'.split(/\\d/);   // [\"a\", \"b\", \"c\", \"d\"]\n    ```\n","source":"_posts/regexp.md","raw":"---\ntitle: 正则表达式\ntags:\n  - regexp\ncategories:\n  - JavaScript\nabbrlink: 2f57a694\ndate: 2018-01-02 16:27:53\n---\n\n## 元字符\n\n元字符既可以是放在 `[]` 中的任意单个字符（如 `[a]` 表示匹配单个小写字符 `a` ）\n\n也可以是字符序列（如 `[a-d]` 表示匹配 `a` 、 `b` 、 `c` 、 `d` 之间的任意一个字符，而 `\\w` 表示任意英文字母和数字及下划线）\n\n下面是一些常见的元字符：\n\n| 元字符    | 含义 |\n| ---       | --- |\n| `.`       | 匹配除 \\n 以外的任何字符（注意元字符是小数点）。 |\n| `[abcde]` | 匹配 `abcde` 之中的任意一个字符 |\n| `[a-h]`   | 匹配 `a` 到 `h` 之间的任意一个字符 |\n| `[^fgh]`  | 不与 `fgh` 之中的任意一个字符匹配 |\n| `\\w`      | 匹配大小写英文字符及数字 `0` 到 `9` 之间的任意一个及下划线，相当于 `[a-zA-Z0-9_]` |\n| `\\W`      | 不匹配大小写英文字符及数字 `0` 到 `9` 之间的任意一个，相当于 `[^a-zA-Z0-9_]` |\n| `\\s`      | 匹配任何空白字符，相当于 `[ \\f\\n\\r\\t\\v]` |\n| `\\S`      | 匹配任何非空白字符，相当于 `[^\\s]` |\n| `\\d`      | 匹配任何 `0` 到 `9` 之间的单个数字，相当于 `[0-9]` |\n| `\\D`      | 不匹配任何 `0` 到 `9` 之间的单个数字，相当于 `[^0-9]` |\n| `[\\u4e00-\\u9fa5]` | 匹配任意单个汉字（这里用的是 `Unicode` 编码表示汉字的 ) |\n\n## 正则表达式限定符\n\n上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。\n\n下面是一些常见的限定符 ( 下表中 `n` 和 `m` 都是表示整数，并且 `0 < n < m`) ： \n\n| 限定符  | 含义                                 |\n| ---     | ---                                  |\n| `*`     | 匹配 0 到多个元字符，相当于 `{0,}`   |\n| `?`     | 匹配 0 到 1 个元字符，相当于 `{0,1}` |\n| `+`     | 匹配至少 1 个元字符，相当于 `{1,}`   |\n| `{n}`   | 匹配 `n` 个元字符                    |\n| `{n,}`  | 匹配至少 `n` 个元字符                |\n| `{n,m}` | 匹配 `n` 到 `m` 个元字符             |\n| `\\b`    | 匹配单词边界                         |\n| `^`     | 字符串必须以指定的字符开始           |\n| `$`     | 字符串必须以指定的字符结束           |\n\n## 其他\n1. 由于在正则表达式中`\\`、`?`、`*`、`^`、`$`、`+`、`(`、`)`、`|`、`{`、`[`等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \\ ”，那么正则表达式应该这么写： \\\\+ 。\n\n2. 可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 `^(13)[4-9]\\d{8}$` 表示任意以 `13` 开头的移动手机号码。\n\n3. 另外对于中文字符的匹配是采用其对应的 `Unicode` 编码来匹配的，对于单个 `Unicode` 字符，如 `\\u4e00` 表示汉字“一”， `\\u9fa5`  表示汉字“龥”，在 `Unicode` 编码中这分别是所能表示的汉字的第一个和最后一个的 `Unicode` 编码，在 `Unicode` 编码中能表示 20901 个汉字。\n\n4. 关于 `\\b` 的用法，它代表单词的开始或者结尾，以字符串 `123a 345b 456 789d` 作为示例字符串，如果正则表达式是 `\\b\\d{3}\\b`，则仅能匹配 `456` 。\n\n5. 可以使用 `|` 来表示或的关系，例如 `[z|j|q]` 表示匹配 `z` 、 `j` 、 `q` 之中的任意一个字母。\n\n6. 正则验证工具： https://regexper.com/ \n\n## 正则对象属性\n\n > 属性均为只读，无法设置其值\n\n| 属性        |  含义                 | 默认值 |\n| ---         | ---                  | --- |\n| `global`    | 是否全文搜索          | `false` |\n| `ignoreCase` | 是否大小写敏感        | `false` |\n| `multiline` | 多行搜索              | `false` |\n| `lastIndex` | 是当前表达式匹配内容的最后一个字符的下一个位置| 无 |\n| `source`    | 正则表达式的文本字符串  | 无 |\n\n  如下：\n\n    ```js\n    var reg1 = /\\w/;\n    var reg2 = /\\w/gim;\n\n    console.log(reg1.global);        // false\n    console.log(reg1.ignoreCase);    // false\n    console.log(reg1.multiline);     // false\n    console.log(reg1.source);        // \"\\w\"\n\n    console.log(reg2.global);        // true\n    console.log(reg2.ignoreCase);    // true\n    console.log(reg2.multiline);     // true\n    console.log(reg2.source);        // \"\\w\"\n    ```\n## 正则对象方法\n### `RegExp.prototype.test(str)`\n\n+ 用于测试字符串参数中是否存在匹配正则表达式模式的字符串\n+ 如果存在则返回 `true`，否则返回 `false`\n\n    牛刀小试：\n    ```js\n    var reg = /\\w/;\n\n    reg.test('a');    // true\n    reg.test('ab');   // true\n    reg.test('$');    // true\n    ```\n\n    加上 `g` 标志后，结果有了一丝不同~~\n    ```js\n    var reg = /\\w/g;\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // false\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // true\n    reg.test('ab');    // false\n    ```\n\n这是因为在匹配的时候并不是每次都是从头开始的，而是每次匹配都会从上次匹配结果的下一个位置开始匹配，也就是 `lastIndex` 属性\n\n+ 第一次匹配到 `a`，\n+ 第二次从 `b` 开始，匹配到 `b`\n+ 第三次从 `b` 开始，没有匹配结果\n+ 因此出现上面的现象\n\n    ```js\n    var reg = /\\w/g;\n    while(reg.test('ab')) {\n        console.log(reg.lastIndex);\n    }\n    // 打印结果为 1，2\n    ```\n\n** `test()` 本意测试字符串和正则能否匹配上，而不关心是在哪个位置匹配到，所以就没必要加上 `g` 标志。**\n\n\n### `RegExp.prototype.exec(str)`\n\n+ 使用正则表达式对字符串进行搜索，并将更新全局 RegExp 对象的属性以反映匹配结果\n+ 如果没有匹配的文本则返回 `null`，否则返回一个结果数组，数组有两个属性：\n  - index 声明匹配文本地第一个字符的位置\n  - input 存放被检索的字符串 `string`\n  - 第一个元素是与正则表达式相匹配的文本\n  - 第二个元素是与正则表达式的第一个子表达式相匹配的文本（如果有的话）\n  - 第三个元素是与正则表达式的第二个子表达式相匹配的文本（如果有的话），以此类推...\n\n#### 非全局调用 `exec()` ，返回数组\n\n    ```js\n    var reg = /\\d(\\w)\\d/;\n    var str = '1a2b3c4d5e';\n    var ret = reg.exec(str);\n\n    console.log(reg.lastIndex);  \n    // 0  非全局下，lastIndex 不生效，在此处无意义\n\n    console.log(ret.index);      \n    // 0  匹配结果（1a2）的第一个字符在被检索的字符串(1a2b3c4d5e)中的位置\n\n    console.log(ret.input);      \n    // 1a2b3c4d5e\n\n    console.log(ret.toString()); \n    // 1a2,a\n    ```\n\n\n#### 全局调用 `exec()` 时，可以通过循环可以把每次匹配到的结果都拿到\n\n```js\nvar reg = /\\d(\\w)(\\w)\\d/g;\nvar str = '$1az2bb3cy4dd5ee';\n\nwhile(ret = reg.exec(str)) {\n    console.log(reg.lastIndex + '\\t' + ret.index + '\\t' + ret.toString());\n    // 5\t1\t1az2,a,z\n    // 11\t7\t3cy4,c,y\n}\n```\n\n+ 第一次匹配到的字符串是 `1az2` ，它在原字符串中的下一个字符的位置为 `5` ，且它第一个字符 `1` 在原字符串的位置为 `1`，其中第一个子表达式 `a`，第二个子表达式 `z`\n+ 第二次匹配到的字符串是 `3cy4` ，它在原字符串中的下一个字符的位置为 `11` ，且它第一个字符 `3` 在原字符串的位置为 `7`，其中第一个子表达式 `c`，第二个子表达式 `y`\n\n## 字符串的与正则相关的方法\n\n### 01-String.prototype.replace()\n\n`replace()` 方法的参数可以是一下几种方式：\n\n#### 1. `replace( str, str )`\n\n    ```js\n    'a1b'.replace('1', '2');    // \"a2b\"\n\n    'a1b1c1'.replace('1', '2');    // \"a2b1c1\"\n    ```\n\n\n#### 2. `replace( str, reg )`\n\n    ```js\n    'a1b1c1'.replace(/1/g, '2');    // \"a2b2c2\"\n    ```\n\n\n#### 3. `replace( str, function )`\n\n\n\n##### 示例：字符串中每个数字都加 1\n    ```js\n    'a1b2c3d4e5'.replace(/\\d/g, function ( match, index, origin ) {\n        // 正则表达式没有分组内容\n        console.log(index);  // 1 3 5 7 9\n        return parseInt(match) + 1;\n    });\n    // \"a2b3c4d5e6\"\n    ```\n\n\n##### 示例：获取 `url` 中的查询参数\n    ```js\n    // 1. 准备工作：取得查询字符串\n    // 假设当前 URL 为 'http://www.baidu.com?ie=UTF-8&wd=regexp'\n    // 可用如下方法获取查询字符串\n    // var searchStr = location.search.slice(1);  // 'ie=UTF-8&wd=regexp'\n\n    // 2. 利用正则获取查询参数\n    var searchStr = 'ie=UTF-8&wd=regexp';\n    var paraObj = {};\n\n    searchStr.replace(/([^=&]+)=([^=&]*)/ig, function ( match, group1, group2, index, origin) {\n\n        console.log(match + '\\t' + group1 + '\\t' + group2 + '\\t' + index + '\\t' + origin);\n        // ie=UTF-8    ie  UTF-8   0   ie=UTF-8&wd=regexp\n        // wd=regexp    wd  regexp  9   ie=UTF-8&wd=regexp\n        paraObj[group1] = group2\n\n    })\n    console.log(paraObj);\n    ```\n**function 参数含义：**\n\n1. 匹配字符串\n2. 正则表达式分组内容，没有分组则没有该参数\n3. 匹配项在字符串中的 `index`\n4. 原字符串\n\n|        | `match`     | `group1` | `group2` | `index` | `origin`             |\n|---     | :---:         | :---:      | :---:      | :---:     | :---:                  |\n| 第一次 | `ie=UTF-8`  | `ie`     | `UTF-8`  | `0`     | `ie=UTF-8&wd=regexp` |\n| 第二次 | `wd=regexp` | `wd`     | `regexp` | `9`     | `ie=UTF-8&wd=regexp` |\n\n### `String.prototype.search(reg)`\n\n+ `search()` 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串\n+ 方法返回第一个匹配结果 `index` ，差找不到返回 `-1`\n+ `search()` 不执行全局匹配，他将会略全局标志 `g` ，并且总是从字符串的开始进行检索\n\n    ```js\n    'a1b2c3d4'.search('1');\n    'a1b2c3d4'.search(/1/);\n    ```\n\n传入的参数不是正则的时候会尝试将其转换为正则\n\n### `String.prototype.match(reg)`\n\n+ `match()` 检索字符串，以找到一个或多个与正则表达式相匹配的文本\n+ 正则是否具有全局标志 `g` ，对结果影响很大\n\n### `String.prototype.split(reg)`\n\n    ```js\n    'a,b,c,d'.split(',');    // [\"a\", \"b\", \"c\", \"d\"]\n\n    'a1b2c3d'.split(/\\d/);   // [\"a\", \"b\", \"c\", \"d\"]\n    ```\n","slug":"regexp","published":1,"updated":"2018-01-07T14:44:29.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdok000j0gqmv45zn2g6","content":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>元字符既可以是放在 <code>[]</code> 中的任意单个字符（如 <code>[a]</code> 表示匹配单个小写字符 <code>a</code> ）</p>\n<p>也可以是字符序列（如 <code>[a-d]</code> 表示匹配 <code>a</code> 、 <code>b</code> 、 <code>c</code> 、 <code>d</code> 之间的任意一个字符，而 <code>\\w</code> 表示任意英文字母和数字及下划线）</p>\n<p>下面是一些常见的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除 \\n 以外的任何字符（注意元字符是小数点）。</td>\n</tr>\n<tr>\n<td><code>[abcde]</code></td>\n<td>匹配 <code>abcde</code> 之中的任意一个字符</td>\n</tr>\n<tr>\n<td><code>[a-h]</code></td>\n<td>匹配 <code>a</code> 到 <code>h</code> 之间的任意一个字符</td>\n</tr>\n<tr>\n<td><code>[^fgh]</code></td>\n<td>不与 <code>fgh</code> 之中的任意一个字符匹配</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个及下划线，相当于 <code>[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>不匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个，相当于 <code>[^a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任何空白字符，相当于 <code>[ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任何非空白字符，相当于 <code>[^\\s]</code></td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[0-9]</code></td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>不匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[^0-9]</code></td>\n</tr>\n<tr>\n<td><code>[\\u4e00-\\u9fa5]</code></td>\n<td>匹配任意单个汉字（这里用的是 <code>Unicode</code> 编码表示汉字的 )</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"正则表达式限定符\"><a href=\"#正则表达式限定符\" class=\"headerlink\" title=\"正则表达式限定符\"></a>正则表达式限定符</h2><p>上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。</p>\n<p>下面是一些常见的限定符 ( 下表中 <code>n</code> 和 <code>m</code> 都是表示整数，并且 <code>0 &lt; n &lt; m</code>) ： </p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>匹配 0 到多个元字符，相当于 <code>{0,}</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配 0 到 1 个元字符，相当于 <code>{0,1}</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配至少 1 个元字符，相当于 <code>{1,}</code></td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>匹配 <code>n</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>匹配至少 <code>n</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>匹配 <code>n</code> 到 <code>m</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配单词边界</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>字符串必须以指定的字符开始</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>字符串必须以指定的字符结束</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>由于在正则表达式中<code>\\</code>、<code>?</code>、<code>*</code>、<code>^</code>、<code>$</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>|</code>、<code>{</code>、<code>[</code>等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \\ ”，那么正则表达式应该这么写： \\+ 。</p>\n</li>\n<li><p>可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 <code>^(13)[4-9]\\d{8}$</code> 表示任意以 <code>13</code> 开头的移动手机号码。</p>\n</li>\n<li><p>另外对于中文字符的匹配是采用其对应的 <code>Unicode</code> 编码来匹配的，对于单个 <code>Unicode</code> 字符，如 <code>\\u4e00</code> 表示汉字“一”， <code>\\u9fa5</code>  表示汉字“龥”，在 <code>Unicode</code> 编码中这分别是所能表示的汉字的第一个和最后一个的 <code>Unicode</code> 编码，在 <code>Unicode</code> 编码中能表示 20901 个汉字。</p>\n</li>\n<li><p>关于 <code>\\b</code> 的用法，它代表单词的开始或者结尾，以字符串 <code>123a 345b 456 789d</code> 作为示例字符串，如果正则表达式是 <code>\\b\\d{3}\\b</code>，则仅能匹配 <code>456</code> 。</p>\n</li>\n<li><p>可以使用 <code>|</code> 来表示或的关系，例如 <code>[z|j|q]</code> 表示匹配 <code>z</code> 、 <code>j</code> 、 <code>q</code> 之中的任意一个字母。</p>\n</li>\n<li><p>正则验证工具： <a href=\"https://regexper.com/\" target=\"_blank\" rel=\"noopener\">https://regexper.com/</a> </p>\n</li>\n</ol>\n<h2 id=\"正则对象属性\"><a href=\"#正则对象属性\" class=\"headerlink\" title=\"正则对象属性\"></a>正则对象属性</h2><blockquote>\n<p>属性均为只读，无法设置其值</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>global</code></td>\n<td>是否全文搜索</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>是否大小写敏感</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>多行搜索</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>lastIndex</code></td>\n<td>是当前表达式匹配内容的最后一个字符的下一个位置</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>正则表达式的文本字符串</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<p>  如下：</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/\\w/gim</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.global);        <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.ignoreCase);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.multiline);     <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.source);        <span class=\"comment\">// \"\\w\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.global);        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.ignoreCase);    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.multiline);     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.source);        <span class=\"comment\">// \"\\w\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"正则对象方法\"><a href=\"#正则对象方法\" class=\"headerlink\" title=\"正则对象方法\"></a>正则对象方法</h2><h3 id=\"RegExp-prototype-test-str\"><a href=\"#RegExp-prototype-test-str\" class=\"headerlink\" title=\"RegExp.prototype.test(str)\"></a><code>RegExp.prototype.test(str)</code></h3><ul>\n<li>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</li>\n<li><p>如果存在则返回 <code>true</code>，否则返回 <code>false</code></p>\n<p>  牛刀小试：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg.test(<span class=\"string\">'a'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);   <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'$'</span>);    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>  加上 <code>g</code> 标志后，结果有了一丝不同~~</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/g</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// false</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这是因为在匹配的时候并不是每次都是从头开始的，而是每次匹配都会从上次匹配结果的下一个位置开始匹配，也就是 <code>lastIndex</code> 属性</p>\n<ul>\n<li>第一次匹配到 <code>a</code>，</li>\n<li>第二次从 <code>b</code> 开始，匹配到 <code>b</code></li>\n<li>第三次从 <code>b</code> 开始，没有匹配结果</li>\n<li><p>因此出现上面的现象</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(reg.test(<span class=\"string\">'ab'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reg.lastIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果为 1，2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong> <code>test()</code> 本意测试字符串和正则能否匹配上，而不关心是在哪个位置匹配到，所以就没必要加上 <code>g</code> 标志。</strong></p>\n<h3 id=\"RegExp-prototype-exec-str\"><a href=\"#RegExp-prototype-exec-str\" class=\"headerlink\" title=\"RegExp.prototype.exec(str)\"></a><code>RegExp.prototype.exec(str)</code></h3><ul>\n<li>使用正则表达式对字符串进行搜索，并将更新全局 RegExp 对象的属性以反映匹配结果</li>\n<li>如果没有匹配的文本则返回 <code>null</code>，否则返回一个结果数组，数组有两个属性：<ul>\n<li>index 声明匹配文本地第一个字符的位置</li>\n<li>input 存放被检索的字符串 <code>string</code></li>\n<li>第一个元素是与正则表达式相匹配的文本</li>\n<li>第二个元素是与正则表达式的第一个子表达式相匹配的文本（如果有的话）</li>\n<li>第三个元素是与正则表达式的第二个子表达式相匹配的文本（如果有的话），以此类推…</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"非全局调用-exec-，返回数组\"><a href=\"#非全局调用-exec-，返回数组\" class=\"headerlink\" title=\"非全局调用 exec() ，返回数组\"></a>非全局调用 <code>exec()</code> ，返回数组</h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d(\\w)\\d/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'1a2b3c4d5e'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ret = reg.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.lastIndex);  </span><br><span class=\"line\"><span class=\"comment\">// 0  非全局下，lastIndex 不生效，在此处无意义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.index);      </span><br><span class=\"line\"><span class=\"comment\">// 0  匹配结果（1a2）的第一个字符在被检索的字符串(1a2b3c4d5e)中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.input);      </span><br><span class=\"line\"><span class=\"comment\">// 1a2b3c4d5e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.toString()); </span><br><span class=\"line\"><span class=\"comment\">// 1a2,a</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到\"><a href=\"#全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到\" class=\"headerlink\" title=\"全局调用 exec() 时，可以通过循环可以把每次匹配到的结果都拿到\"></a>全局调用 <code>exec()</code> 时，可以通过循环可以把每次匹配到的结果都拿到</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d(\\w)(\\w)\\d/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'$1az2bb3cy4dd5ee'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(ret = reg.exec(str)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reg.lastIndex + <span class=\"string\">'\\t'</span> + ret.index + <span class=\"string\">'\\t'</span> + ret.toString());</span><br><span class=\"line\">    <span class=\"comment\">// 5\t1\t1az2,a,z</span></span><br><span class=\"line\">    <span class=\"comment\">// 11\t7\t3cy4,c,y</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一次匹配到的字符串是 <code>1az2</code> ，它在原字符串中的下一个字符的位置为 <code>5</code> ，且它第一个字符 <code>1</code> 在原字符串的位置为 <code>1</code>，其中第一个子表达式 <code>a</code>，第二个子表达式 <code>z</code></li>\n<li>第二次匹配到的字符串是 <code>3cy4</code> ，它在原字符串中的下一个字符的位置为 <code>11</code> ，且它第一个字符 <code>3</code> 在原字符串的位置为 <code>7</code>，其中第一个子表达式 <code>c</code>，第二个子表达式 <code>y</code></li>\n</ul>\n<h2 id=\"字符串的与正则相关的方法\"><a href=\"#字符串的与正则相关的方法\" class=\"headerlink\" title=\"字符串的与正则相关的方法\"></a>字符串的与正则相关的方法</h2><h3 id=\"01-String-prototype-replace\"><a href=\"#01-String-prototype-replace\" class=\"headerlink\" title=\"01-String.prototype.replace()\"></a>01-String.prototype.replace()</h3><p><code>replace()</code> 方法的参数可以是一下几种方式：</p>\n<h4 id=\"1-replace-str-str\"><a href=\"#1-replace-str-str\" class=\"headerlink\" title=\"1. replace( str, str )\"></a>1. <code>replace( str, str )</code></h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b'</span>.replace(<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a1b1c1'</span>.replace(<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b1c1\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"2-replace-str-reg\"><a href=\"#2-replace-str-reg\" class=\"headerlink\" title=\"2. replace( str, reg )\"></a>2. <code>replace( str, reg )</code></h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b1c1'</span>.replace(<span class=\"regexp\">/1/g</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b2c2\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"3-replace-str-function\"><a href=\"#3-replace-str-function\" class=\"headerlink\" title=\"3. replace( str, function )\"></a>3. <code>replace( str, function )</code></h4><h5 id=\"示例：字符串中每个数字都加-1\"><a href=\"#示例：字符串中每个数字都加-1\" class=\"headerlink\" title=\"示例：字符串中每个数字都加 1\"></a>示例：字符串中每个数字都加 1</h5><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4e5'</span>.replace(<span class=\"regexp\">/\\d/g</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> match, index, origin </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 正则表达式没有分组内容</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);  <span class=\"comment\">// 1 3 5 7 9</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(match) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// \"a2b3c4d5e6\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h5 id=\"示例：获取-url-中的查询参数\"><a href=\"#示例：获取-url-中的查询参数\" class=\"headerlink\" title=\"示例：获取 url 中的查询参数\"></a>示例：获取 <code>url</code> 中的查询参数</h5><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 准备工作：取得查询字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 假设当前 URL 为 'http://www.baidu.com?ie=UTF-8&amp;wd=regexp'</span></span><br><span class=\"line\"><span class=\"comment\">// 可用如下方法获取查询字符串</span></span><br><span class=\"line\"><span class=\"comment\">// var searchStr = location.search.slice(1);  // 'ie=UTF-8&amp;wd=regexp'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 利用正则获取查询参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchStr = <span class=\"string\">'ie=UTF-8&amp;wd=regexp'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> paraObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">searchStr.replace(<span class=\"regexp\">/([^=&amp;]+)=([^=&amp;]*)/ig</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> match, group1, group2, index, origin</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(match + <span class=\"string\">'\\t'</span> + group1 + <span class=\"string\">'\\t'</span> + group2 + <span class=\"string\">'\\t'</span> + index + <span class=\"string\">'\\t'</span> + origin);</span><br><span class=\"line\">    <span class=\"comment\">// ie=UTF-8    ie  UTF-8   0   ie=UTF-8&amp;wd=regexp</span></span><br><span class=\"line\">    <span class=\"comment\">// wd=regexp    wd  regexp  9   ie=UTF-8&amp;wd=regexp</span></span><br><span class=\"line\">    paraObj[group1] = group2</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(paraObj);</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>function 参数含义：</strong></p>\n<ol>\n<li>匹配字符串</li>\n<li>正则表达式分组内容，没有分组则没有该参数</li>\n<li>匹配项在字符串中的 <code>index</code></li>\n<li>原字符串</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"><code>match</code></th>\n<th style=\"text-align:center\"><code>group1</code></th>\n<th style=\"text-align:center\"><code>group2</code></th>\n<th style=\"text-align:center\"><code>index</code></th>\n<th style=\"text-align:center\"><code>origin</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一次</td>\n<td style=\"text-align:center\"><code>ie=UTF-8</code></td>\n<td style=\"text-align:center\"><code>ie</code></td>\n<td style=\"text-align:center\"><code>UTF-8</code></td>\n<td style=\"text-align:center\"><code>0</code></td>\n<td style=\"text-align:center\"><code>ie=UTF-8&amp;wd=regexp</code></td>\n</tr>\n<tr>\n<td>第二次</td>\n<td style=\"text-align:center\"><code>wd=regexp</code></td>\n<td style=\"text-align:center\"><code>wd</code></td>\n<td style=\"text-align:center\"><code>regexp</code></td>\n<td style=\"text-align:center\"><code>9</code></td>\n<td style=\"text-align:center\"><code>ie=UTF-8&amp;wd=regexp</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"String-prototype-search-reg\"><a href=\"#String-prototype-search-reg\" class=\"headerlink\" title=\"String.prototype.search(reg)\"></a><code>String.prototype.search(reg)</code></h3><ul>\n<li><code>search()</code> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串</li>\n<li>方法返回第一个匹配结果 <code>index</code> ，差找不到返回 <code>-1</code></li>\n<li><p><code>search()</code> 不执行全局匹配，他将会略全局标志 <code>g</code> ，并且总是从字符串的开始进行检索</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.search(<span class=\"string\">'1'</span>);</span><br><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.search(<span class=\"regexp\">/1/</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>传入的参数不是正则的时候会尝试将其转换为正则</p>\n<h3 id=\"String-prototype-match-reg\"><a href=\"#String-prototype-match-reg\" class=\"headerlink\" title=\"String.prototype.match(reg)\"></a><code>String.prototype.match(reg)</code></h3><ul>\n<li><code>match()</code> 检索字符串，以找到一个或多个与正则表达式相匹配的文本</li>\n<li>正则是否具有全局标志 <code>g</code> ，对结果影响很大</li>\n</ul>\n<h3 id=\"String-prototype-split-reg\"><a href=\"#String-prototype-split-reg\" class=\"headerlink\" title=\"String.prototype.split(reg)\"></a><code>String.prototype.split(reg)</code></h3><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a,b,c,d'</span>.split(<span class=\"string\">','</span>);    <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a1b2c3d'</span>.split(<span class=\"regexp\">/\\d/</span>);   <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>元字符既可以是放在 <code>[]</code> 中的任意单个字符（如 <code>[a]</code> 表示匹配单个小写字符 <code>a</code> ）</p>\n<p>也可以是字符序列（如 <code>[a-d]</code> 表示匹配 <code>a</code> 、 <code>b</code> 、 <code>c</code> 、 <code>d</code> 之间的任意一个字符，而 <code>\\w</code> 表示任意英文字母和数字及下划线）</p>\n<p>下面是一些常见的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除 \\n 以外的任何字符（注意元字符是小数点）。</td>\n</tr>\n<tr>\n<td><code>[abcde]</code></td>\n<td>匹配 <code>abcde</code> 之中的任意一个字符</td>\n</tr>\n<tr>\n<td><code>[a-h]</code></td>\n<td>匹配 <code>a</code> 到 <code>h</code> 之间的任意一个字符</td>\n</tr>\n<tr>\n<td><code>[^fgh]</code></td>\n<td>不与 <code>fgh</code> 之中的任意一个字符匹配</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个及下划线，相当于 <code>[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>不匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个，相当于 <code>[^a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任何空白字符，相当于 <code>[ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任何非空白字符，相当于 <code>[^\\s]</code></td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[0-9]</code></td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>不匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[^0-9]</code></td>\n</tr>\n<tr>\n<td><code>[\\u4e00-\\u9fa5]</code></td>\n<td>匹配任意单个汉字（这里用的是 <code>Unicode</code> 编码表示汉字的 )</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"正则表达式限定符\"><a href=\"#正则表达式限定符\" class=\"headerlink\" title=\"正则表达式限定符\"></a>正则表达式限定符</h2><p>上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。</p>\n<p>下面是一些常见的限定符 ( 下表中 <code>n</code> 和 <code>m</code> 都是表示整数，并且 <code>0 &lt; n &lt; m</code>) ： </p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>匹配 0 到多个元字符，相当于 <code>{0,}</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配 0 到 1 个元字符，相当于 <code>{0,1}</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配至少 1 个元字符，相当于 <code>{1,}</code></td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>匹配 <code>n</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>匹配至少 <code>n</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>匹配 <code>n</code> 到 <code>m</code> 个元字符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配单词边界</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>字符串必须以指定的字符开始</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>字符串必须以指定的字符结束</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>由于在正则表达式中<code>\\</code>、<code>?</code>、<code>*</code>、<code>^</code>、<code>$</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>|</code>、<code>{</code>、<code>[</code>等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \\ ”，那么正则表达式应该这么写： \\+ 。</p>\n</li>\n<li><p>可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 <code>^(13)[4-9]\\d{8}$</code> 表示任意以 <code>13</code> 开头的移动手机号码。</p>\n</li>\n<li><p>另外对于中文字符的匹配是采用其对应的 <code>Unicode</code> 编码来匹配的，对于单个 <code>Unicode</code> 字符，如 <code>\\u4e00</code> 表示汉字“一”， <code>\\u9fa5</code>  表示汉字“龥”，在 <code>Unicode</code> 编码中这分别是所能表示的汉字的第一个和最后一个的 <code>Unicode</code> 编码，在 <code>Unicode</code> 编码中能表示 20901 个汉字。</p>\n</li>\n<li><p>关于 <code>\\b</code> 的用法，它代表单词的开始或者结尾，以字符串 <code>123a 345b 456 789d</code> 作为示例字符串，如果正则表达式是 <code>\\b\\d{3}\\b</code>，则仅能匹配 <code>456</code> 。</p>\n</li>\n<li><p>可以使用 <code>|</code> 来表示或的关系，例如 <code>[z|j|q]</code> 表示匹配 <code>z</code> 、 <code>j</code> 、 <code>q</code> 之中的任意一个字母。</p>\n</li>\n<li><p>正则验证工具： <a href=\"https://regexper.com/\" target=\"_blank\" rel=\"noopener\">https://regexper.com/</a> </p>\n</li>\n</ol>\n<h2 id=\"正则对象属性\"><a href=\"#正则对象属性\" class=\"headerlink\" title=\"正则对象属性\"></a>正则对象属性</h2><blockquote>\n<p>属性均为只读，无法设置其值</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>global</code></td>\n<td>是否全文搜索</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>是否大小写敏感</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>多行搜索</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>lastIndex</code></td>\n<td>是当前表达式匹配内容的最后一个字符的下一个位置</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>正则表达式的文本字符串</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<p>  如下：</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg1 = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/\\w/gim</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.global);        <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.ignoreCase);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.multiline);     <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg1.source);        <span class=\"comment\">// \"\\w\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.global);        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.ignoreCase);    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.multiline);     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg2.source);        <span class=\"comment\">// \"\\w\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"正则对象方法\"><a href=\"#正则对象方法\" class=\"headerlink\" title=\"正则对象方法\"></a>正则对象方法</h2><h3 id=\"RegExp-prototype-test-str\"><a href=\"#RegExp-prototype-test-str\" class=\"headerlink\" title=\"RegExp.prototype.test(str)\"></a><code>RegExp.prototype.test(str)</code></h3><ul>\n<li>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</li>\n<li><p>如果存在则返回 <code>true</code>，否则返回 <code>false</code></p>\n<p>  牛刀小试：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg.test(<span class=\"string\">'a'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);   <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'$'</span>);    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>  加上 <code>g</code> 标志后，结果有了一丝不同~~</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/g</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// false</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'ab'</span>);    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这是因为在匹配的时候并不是每次都是从头开始的，而是每次匹配都会从上次匹配结果的下一个位置开始匹配，也就是 <code>lastIndex</code> 属性</p>\n<ul>\n<li>第一次匹配到 <code>a</code>，</li>\n<li>第二次从 <code>b</code> 开始，匹配到 <code>b</code></li>\n<li>第三次从 <code>b</code> 开始，没有匹配结果</li>\n<li><p>因此出现上面的现象</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(reg.test(<span class=\"string\">'ab'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reg.lastIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果为 1，2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong> <code>test()</code> 本意测试字符串和正则能否匹配上，而不关心是在哪个位置匹配到，所以就没必要加上 <code>g</code> 标志。</strong></p>\n<h3 id=\"RegExp-prototype-exec-str\"><a href=\"#RegExp-prototype-exec-str\" class=\"headerlink\" title=\"RegExp.prototype.exec(str)\"></a><code>RegExp.prototype.exec(str)</code></h3><ul>\n<li>使用正则表达式对字符串进行搜索，并将更新全局 RegExp 对象的属性以反映匹配结果</li>\n<li>如果没有匹配的文本则返回 <code>null</code>，否则返回一个结果数组，数组有两个属性：<ul>\n<li>index 声明匹配文本地第一个字符的位置</li>\n<li>input 存放被检索的字符串 <code>string</code></li>\n<li>第一个元素是与正则表达式相匹配的文本</li>\n<li>第二个元素是与正则表达式的第一个子表达式相匹配的文本（如果有的话）</li>\n<li>第三个元素是与正则表达式的第二个子表达式相匹配的文本（如果有的话），以此类推…</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"非全局调用-exec-，返回数组\"><a href=\"#非全局调用-exec-，返回数组\" class=\"headerlink\" title=\"非全局调用 exec() ，返回数组\"></a>非全局调用 <code>exec()</code> ，返回数组</h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d(\\w)\\d/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'1a2b3c4d5e'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ret = reg.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.lastIndex);  </span><br><span class=\"line\"><span class=\"comment\">// 0  非全局下，lastIndex 不生效，在此处无意义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.index);      </span><br><span class=\"line\"><span class=\"comment\">// 0  匹配结果（1a2）的第一个字符在被检索的字符串(1a2b3c4d5e)中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.input);      </span><br><span class=\"line\"><span class=\"comment\">// 1a2b3c4d5e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ret.toString()); </span><br><span class=\"line\"><span class=\"comment\">// 1a2,a</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到\"><a href=\"#全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到\" class=\"headerlink\" title=\"全局调用 exec() 时，可以通过循环可以把每次匹配到的结果都拿到\"></a>全局调用 <code>exec()</code> 时，可以通过循环可以把每次匹配到的结果都拿到</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d(\\w)(\\w)\\d/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'$1az2bb3cy4dd5ee'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(ret = reg.exec(str)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reg.lastIndex + <span class=\"string\">'\\t'</span> + ret.index + <span class=\"string\">'\\t'</span> + ret.toString());</span><br><span class=\"line\">    <span class=\"comment\">// 5\t1\t1az2,a,z</span></span><br><span class=\"line\">    <span class=\"comment\">// 11\t7\t3cy4,c,y</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一次匹配到的字符串是 <code>1az2</code> ，它在原字符串中的下一个字符的位置为 <code>5</code> ，且它第一个字符 <code>1</code> 在原字符串的位置为 <code>1</code>，其中第一个子表达式 <code>a</code>，第二个子表达式 <code>z</code></li>\n<li>第二次匹配到的字符串是 <code>3cy4</code> ，它在原字符串中的下一个字符的位置为 <code>11</code> ，且它第一个字符 <code>3</code> 在原字符串的位置为 <code>7</code>，其中第一个子表达式 <code>c</code>，第二个子表达式 <code>y</code></li>\n</ul>\n<h2 id=\"字符串的与正则相关的方法\"><a href=\"#字符串的与正则相关的方法\" class=\"headerlink\" title=\"字符串的与正则相关的方法\"></a>字符串的与正则相关的方法</h2><h3 id=\"01-String-prototype-replace\"><a href=\"#01-String-prototype-replace\" class=\"headerlink\" title=\"01-String.prototype.replace()\"></a>01-String.prototype.replace()</h3><p><code>replace()</code> 方法的参数可以是一下几种方式：</p>\n<h4 id=\"1-replace-str-str\"><a href=\"#1-replace-str-str\" class=\"headerlink\" title=\"1. replace( str, str )\"></a>1. <code>replace( str, str )</code></h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b'</span>.replace(<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a1b1c1'</span>.replace(<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b1c1\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"2-replace-str-reg\"><a href=\"#2-replace-str-reg\" class=\"headerlink\" title=\"2. replace( str, reg )\"></a>2. <code>replace( str, reg )</code></h4><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b1c1'</span>.replace(<span class=\"regexp\">/1/g</span>, <span class=\"string\">'2'</span>);    <span class=\"comment\">// \"a2b2c2\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h4 id=\"3-replace-str-function\"><a href=\"#3-replace-str-function\" class=\"headerlink\" title=\"3. replace( str, function )\"></a>3. <code>replace( str, function )</code></h4><h5 id=\"示例：字符串中每个数字都加-1\"><a href=\"#示例：字符串中每个数字都加-1\" class=\"headerlink\" title=\"示例：字符串中每个数字都加 1\"></a>示例：字符串中每个数字都加 1</h5><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4e5'</span>.replace(<span class=\"regexp\">/\\d/g</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> match, index, origin </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 正则表达式没有分组内容</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index);  <span class=\"comment\">// 1 3 5 7 9</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(match) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// \"a2b3c4d5e6\"</span></span><br></pre></td></tr></table></figure>\n</code></pre><h5 id=\"示例：获取-url-中的查询参数\"><a href=\"#示例：获取-url-中的查询参数\" class=\"headerlink\" title=\"示例：获取 url 中的查询参数\"></a>示例：获取 <code>url</code> 中的查询参数</h5><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 准备工作：取得查询字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 假设当前 URL 为 'http://www.baidu.com?ie=UTF-8&amp;wd=regexp'</span></span><br><span class=\"line\"><span class=\"comment\">// 可用如下方法获取查询字符串</span></span><br><span class=\"line\"><span class=\"comment\">// var searchStr = location.search.slice(1);  // 'ie=UTF-8&amp;wd=regexp'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 利用正则获取查询参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchStr = <span class=\"string\">'ie=UTF-8&amp;wd=regexp'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> paraObj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">searchStr.replace(<span class=\"regexp\">/([^=&amp;]+)=([^=&amp;]*)/ig</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> match, group1, group2, index, origin</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(match + <span class=\"string\">'\\t'</span> + group1 + <span class=\"string\">'\\t'</span> + group2 + <span class=\"string\">'\\t'</span> + index + <span class=\"string\">'\\t'</span> + origin);</span><br><span class=\"line\">    <span class=\"comment\">// ie=UTF-8    ie  UTF-8   0   ie=UTF-8&amp;wd=regexp</span></span><br><span class=\"line\">    <span class=\"comment\">// wd=regexp    wd  regexp  9   ie=UTF-8&amp;wd=regexp</span></span><br><span class=\"line\">    paraObj[group1] = group2</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(paraObj);</span><br></pre></td></tr></table></figure>\n</code></pre><p><strong>function 参数含义：</strong></p>\n<ol>\n<li>匹配字符串</li>\n<li>正则表达式分组内容，没有分组则没有该参数</li>\n<li>匹配项在字符串中的 <code>index</code></li>\n<li>原字符串</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"><code>match</code></th>\n<th style=\"text-align:center\"><code>group1</code></th>\n<th style=\"text-align:center\"><code>group2</code></th>\n<th style=\"text-align:center\"><code>index</code></th>\n<th style=\"text-align:center\"><code>origin</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一次</td>\n<td style=\"text-align:center\"><code>ie=UTF-8</code></td>\n<td style=\"text-align:center\"><code>ie</code></td>\n<td style=\"text-align:center\"><code>UTF-8</code></td>\n<td style=\"text-align:center\"><code>0</code></td>\n<td style=\"text-align:center\"><code>ie=UTF-8&amp;wd=regexp</code></td>\n</tr>\n<tr>\n<td>第二次</td>\n<td style=\"text-align:center\"><code>wd=regexp</code></td>\n<td style=\"text-align:center\"><code>wd</code></td>\n<td style=\"text-align:center\"><code>regexp</code></td>\n<td style=\"text-align:center\"><code>9</code></td>\n<td style=\"text-align:center\"><code>ie=UTF-8&amp;wd=regexp</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"String-prototype-search-reg\"><a href=\"#String-prototype-search-reg\" class=\"headerlink\" title=\"String.prototype.search(reg)\"></a><code>String.prototype.search(reg)</code></h3><ul>\n<li><code>search()</code> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串</li>\n<li>方法返回第一个匹配结果 <code>index</code> ，差找不到返回 <code>-1</code></li>\n<li><p><code>search()</code> 不执行全局匹配，他将会略全局标志 <code>g</code> ，并且总是从字符串的开始进行检索</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.search(<span class=\"string\">'1'</span>);</span><br><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.search(<span class=\"regexp\">/1/</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>传入的参数不是正则的时候会尝试将其转换为正则</p>\n<h3 id=\"String-prototype-match-reg\"><a href=\"#String-prototype-match-reg\" class=\"headerlink\" title=\"String.prototype.match(reg)\"></a><code>String.prototype.match(reg)</code></h3><ul>\n<li><code>match()</code> 检索字符串，以找到一个或多个与正则表达式相匹配的文本</li>\n<li>正则是否具有全局标志 <code>g</code> ，对结果影响很大</li>\n</ul>\n<h3 id=\"String-prototype-split-reg\"><a href=\"#String-prototype-split-reg\" class=\"headerlink\" title=\"String.prototype.split(reg)\"></a><code>String.prototype.split(reg)</code></h3><pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a,b,c,d'</span>.split(<span class=\"string\">','</span>);    <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a1b2c3d'</span>.split(<span class=\"regexp\">/\\d/</span>);   <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"GET 和 POST 的区别","abbrlink":"d4ca5e4c","date":"2017-11-25T15:31:23.000Z","_content":"\n## 从表象上看：\n\n1. `GET` 参数通过 URL 传递，`POST` 放在 `Request body` 中。\n2. `GET` 产生的 URL 地址可以被记录到浏览器历史中，而 `POST` 不可以。\n3. `GET` 比 `POST` 更不安全，因为参数直接暴露在 `URL` 上，所以不能用来传递敏感信息。\n4. `GET` 请求在URL中传送的参数是有长度限制的，而 `POST` 没有。\n\n## 底层来看：\n\n**无区别**\n\n解释如下：\n1. 给 `GET` 加上 `request body`，给 `POST` 带上 url 参数，技术上是完全行的通的\n2. 为了给不同的区别不同类型的请求，才定义了 `GET`、`POST`、`PUT`、`DELETE`，依次对应 查、改、增、删\n3. 业界不成文的规定是，（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。","source":"_posts/js/the-difference-of-get-and-post-method.md","raw":"---\ntitle: GET 和 POST 的区别\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: d4ca5e4c\ndate: 2017-11-25 23:31:23\n---\n\n## 从表象上看：\n\n1. `GET` 参数通过 URL 传递，`POST` 放在 `Request body` 中。\n2. `GET` 产生的 URL 地址可以被记录到浏览器历史中，而 `POST` 不可以。\n3. `GET` 比 `POST` 更不安全，因为参数直接暴露在 `URL` 上，所以不能用来传递敏感信息。\n4. `GET` 请求在URL中传送的参数是有长度限制的，而 `POST` 没有。\n\n## 底层来看：\n\n**无区别**\n\n解释如下：\n1. 给 `GET` 加上 `request body`，给 `POST` 带上 url 参数，技术上是完全行的通的\n2. 为了给不同的区别不同类型的请求，才定义了 `GET`、`POST`、`PUT`、`DELETE`，依次对应 查、改、增、删\n3. 业界不成文的规定是，（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。","slug":"js/the-difference-of-get-and-post-method","published":1,"updated":"2018-01-07T14:44:29.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdql001h0gqmdlkle0p5","content":"<h2 id=\"从表象上看：\"><a href=\"#从表象上看：\" class=\"headerlink\" title=\"从表象上看：\"></a>从表象上看：</h2><ol>\n<li><code>GET</code> 参数通过 URL 传递，<code>POST</code> 放在 <code>Request body</code> 中。</li>\n<li><code>GET</code> 产生的 URL 地址可以被记录到浏览器历史中，而 <code>POST</code> 不可以。</li>\n<li><code>GET</code> 比 <code>POST</code> 更不安全，因为参数直接暴露在 <code>URL</code> 上，所以不能用来传递敏感信息。</li>\n<li><code>GET</code> 请求在URL中传送的参数是有长度限制的，而 <code>POST</code> 没有。</li>\n</ol>\n<h2 id=\"底层来看：\"><a href=\"#底层来看：\" class=\"headerlink\" title=\"底层来看：\"></a>底层来看：</h2><p><strong>无区别</strong></p>\n<p>解释如下：</p>\n<ol>\n<li>给 <code>GET</code> 加上 <code>request body</code>，给 <code>POST</code> 带上 url 参数，技术上是完全行的通的</li>\n<li>为了给不同的区别不同类型的请求，才定义了 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，依次对应 查、改、增、删</li>\n<li>业界不成文的规定是，（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。</li>\n</ol>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"从表象上看：\"><a href=\"#从表象上看：\" class=\"headerlink\" title=\"从表象上看：\"></a>从表象上看：</h2><ol>\n<li><code>GET</code> 参数通过 URL 传递，<code>POST</code> 放在 <code>Request body</code> 中。</li>\n<li><code>GET</code> 产生的 URL 地址可以被记录到浏览器历史中，而 <code>POST</code> 不可以。</li>\n<li><code>GET</code> 比 <code>POST</code> 更不安全，因为参数直接暴露在 <code>URL</code> 上，所以不能用来传递敏感信息。</li>\n<li><code>GET</code> 请求在URL中传送的参数是有长度限制的，而 <code>POST</code> 没有。</li>\n</ol>\n<h2 id=\"底层来看：\"><a href=\"#底层来看：\" class=\"headerlink\" title=\"底层来看：\"></a>底层来看：</h2><p><strong>无区别</strong></p>\n<p>解释如下：</p>\n<ol>\n<li>给 <code>GET</code> 加上 <code>request body</code>，给 <code>POST</code> 带上 url 参数，技术上是完全行的通的</li>\n<li>为了给不同的区别不同类型的请求，才定义了 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，依次对应 查、改、增、删</li>\n<li>业界不成文的规定是，（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。</li>\n</ol>\n"},{"title":"Git 分支","abbrlink":"798d2056","date":"2018-01-06T07:43:23.000Z","_content":"\n### 前言\n  \n\n### 查看分支\n1. `git branch` 查看本地分支\n```bash\n$ git branch\n* master\n```\n  + 美元符号 `$` 是命令提示符，即后面语句为执行的命令\n  + 星号 `*` 表示当前分支为 `master`\n\n1. `git branch -r` 查看远程分支\n```bash\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n```\n  + `origin` 是默认的远程仓库的名字，`origin/master` 表示远程仓库的 `master` 分支\n  + `origin/HEAD` 就像一个指针，表示默认分支，此处指向 `origin/master`，即 `origin/master` 是默认分支。\n\n1. `git branch -a` 查看所有分支，包含本地分支和远程分支\n```\n$ git branch -a\n* master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n  + 当前分支为 `master`\n  + `remotes` 表示远程主机，远程主机可能不止一个，因此要指定远程主机的名字，`origin` 为远程主机的名字\n\n### 创建分支\n1. `git branch <分支名字>` 用于创建分支，默认以 `HEAD`（通常是 `master` 分支）作为起点来创建分支\n```bash\n$ git branch dev\n\n$ git branch\n  dev\n* master\n```\n  + `git branch` 命令仅仅建立了一个新分支，但不会自动切换到这个分支中去，因此当前分支仍是 `master`\n\n### 切换分支\n1. `git checkout <分支名字>` 用于切换分支\n```bash\n$ git checkout dev\nSwitched to branch 'dev'\n\n$ git branch\n* dev\n  master\n```\n  + 切换分支之后，会有提示信息：`Switched to branch 'dev'`\n  + 通过 `git branch` 命令查看，当前分支已经切换到 `dev`\n\n### 创建并自动切换到新分支\n1. `git checkout -b <分支名字>` 通过增加 `-b` 参数会创建分支并且切换到此分支：\n```bash\n$ git checkout -b feature\nSwitched to a new branch 'feature'\n\n$ git branch\n  dev\n* feature\n  master\n```\n  + 切换分支之后，会有提示信息：`Switched to a new branch 'feature''`\n  + 通过 `git branch` 命令查看，当前分支已经切换到 `feature`\n\n### 将本地分支推送到远程\n1. `git push <远程主机名> <本地分支名>:<远程分支名>` \n```bash\n$ git push origin feature:feature\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n * [new branch]      feature -> feature\n```\n  + 提示信息：`* [new branch]      feature -> feature` ，说明 push 成功！\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/feature` 已经被创建成功\n```bash\n$ git branch -a\n  dev\n* feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n\n1. `git push <远程主机名> <本地分支名>` 如果忽略远程分支名，则表示将本地分支推送到与本地分支存在追踪关系的远程分支，如果该远程分支不存在，则会被新建。\n```bash\n$ git push origin dev\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n * [new branch]      dev -> dev\n```\n  + 同样的提示：`* [new branch]      dev -> dev`\n  + 同样再来次验证，发现远程分支 `origin/dev` 已经被创建成功！\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/dev\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n### 合并分支\n1. `git merge <分支名字>` 用于合并分支（将指定分支合并到当前分支）\n  例如在 `dev` 分支创建了一个 `test.md` 文件，就可以使用此命令把 `dev` 合并到 `master` 上（需提前切换到 `master` 分支）\n```bash\n$ git merge dev\nUpdating 75dd5ff..f21cc70\nFast-forward\n test.md | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 test.md\n```\n\n  最后别忘了，提交 `master` 分支\n```bash\n$ git push origin master\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n   75dd5ff..f21cc70  master -> master\n```\n\n### 删除本地分支\n\n1. `git branch -d <本地分支名>` 删除本地分支，但只能删除已经被 merge 的分支。\n```bash\n$ git branch -d dev\nerror: The branch 'dev' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D dev'.\n```\n  + 删除失败，git 提示：`dev` 分支没有被合并，如果要强行删除，需要使用命令 `git branch -D dev`\n  + 需要注意的是，这里的合并，并不一定是合并到 `master` 分支，合并到任何分支都可以\n\n1. `git branch -D <本地分支名>` 强行删除本地分支，即使此分支没有被 merge\n```bash\n$ git branch -D dev\nDeleted branch dev (was 4a332d3).\n```\n  + 删除成功！\n\n### 删除远程分支\n\n1. `git push origin :<远程分支名>` 将一个空分支推送到远程分支，也就意味着将删除这个远程分支\n```bash\n$ git push origin :dev\nTo https://github.com/wencaistorm/git-learn.git\n - [deleted]         dev\n```\n  + 删除成功，并且给出提示信息：` - [deleted]         dev`\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/dev` 已经被删除\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n2. `git push origin --delete <远程分支名>` 通过 `--delete` 或者 `-d` 参数删除远程分支\n```bash\n$ git push origin --delete feature\nTo https://github.com/wencaistorm/git-learn.git\n - [deleted]         feature\n```\n  + 删除成功，同样给出提示信息：` - [deleted]         feature`\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/feature` 已经被删除\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n### 重命名分支\n  分支情况如下：\n```bash\n$ git branch\n  master\n* new\n```\n  现在想把 `new` 分支重命名为 `newer` 分支，可以通过 `git branch -m <重命名前分支名称> <重命名后分支名称>`\n```bash\n$ git branch -m new newer\n```\n修改成功，重新查看分支\n```bash\n$ git branch\n  master\n* newer\n```\n\n### 总结\n最后总结一下，因为 `<远程主机名>` 通常默认为 `origin` ，因此这里直接以 `origin` 表示 `<远程主机名>`：\n+ 查看分支\n  - `git branch` 查看本地分支\n  - `git branch -r` 查看远程分支\n  - `git branch -a` 查看所有分支\n+ 创建和切换分支\n  - `git branch <分支名字>` 创建分支\n  - `git checkout <分支名字>` 切换分支\n  - `git checkout -b <分支名字>` 创建并自动切换到新分支\n+ 把本地分支推送到远程\n  - `git push origin <本地分支名>:<远程分支名>` （冒号两侧没有空格）\n  - `git push origin <本地分支名>`\n+ 合并分支 `git merge <分支名字>`\n+ 删除本地分支（注意`-d` 和 `-D` 的区别）\n  - `git branch -d <本地分支名>` 删除本地分支，但只能删除已经被 merge 的分支。\n  - `git branch -D <本地分支名>` 强行删除本地分支，即使此分支没有被 merge\n+ 删除远程分支\n  - `git push origin :<远程分支名>` （冒号左侧有两个空格）\n  - `git push origin --delete <远程分支名>` 或 `git push origin -D <远程分支名>` （`--delete` 和 `-D` 作用相同）\n+ 重命名分支 `git branch -m <重命名前分支名称> <重命名后分支名称>`","source":"_posts/git/git-branch.md","raw":"---\ntitle: Git 分支\ntags:\n  - Git\ncategories:\n  - Git\nabbrlink: 798d2056\ndate: 2018-01-06 15:43:23\n---\n\n### 前言\n  \n\n### 查看分支\n1. `git branch` 查看本地分支\n```bash\n$ git branch\n* master\n```\n  + 美元符号 `$` 是命令提示符，即后面语句为执行的命令\n  + 星号 `*` 表示当前分支为 `master`\n\n1. `git branch -r` 查看远程分支\n```bash\n$ git branch -r\n  origin/HEAD -> origin/master\n  origin/master\n```\n  + `origin` 是默认的远程仓库的名字，`origin/master` 表示远程仓库的 `master` 分支\n  + `origin/HEAD` 就像一个指针，表示默认分支，此处指向 `origin/master`，即 `origin/master` 是默认分支。\n\n1. `git branch -a` 查看所有分支，包含本地分支和远程分支\n```\n$ git branch -a\n* master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n  + 当前分支为 `master`\n  + `remotes` 表示远程主机，远程主机可能不止一个，因此要指定远程主机的名字，`origin` 为远程主机的名字\n\n### 创建分支\n1. `git branch <分支名字>` 用于创建分支，默认以 `HEAD`（通常是 `master` 分支）作为起点来创建分支\n```bash\n$ git branch dev\n\n$ git branch\n  dev\n* master\n```\n  + `git branch` 命令仅仅建立了一个新分支，但不会自动切换到这个分支中去，因此当前分支仍是 `master`\n\n### 切换分支\n1. `git checkout <分支名字>` 用于切换分支\n```bash\n$ git checkout dev\nSwitched to branch 'dev'\n\n$ git branch\n* dev\n  master\n```\n  + 切换分支之后，会有提示信息：`Switched to branch 'dev'`\n  + 通过 `git branch` 命令查看，当前分支已经切换到 `dev`\n\n### 创建并自动切换到新分支\n1. `git checkout -b <分支名字>` 通过增加 `-b` 参数会创建分支并且切换到此分支：\n```bash\n$ git checkout -b feature\nSwitched to a new branch 'feature'\n\n$ git branch\n  dev\n* feature\n  master\n```\n  + 切换分支之后，会有提示信息：`Switched to a new branch 'feature''`\n  + 通过 `git branch` 命令查看，当前分支已经切换到 `feature`\n\n### 将本地分支推送到远程\n1. `git push <远程主机名> <本地分支名>:<远程分支名>` \n```bash\n$ git push origin feature:feature\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n * [new branch]      feature -> feature\n```\n  + 提示信息：`* [new branch]      feature -> feature` ，说明 push 成功！\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/feature` 已经被创建成功\n```bash\n$ git branch -a\n  dev\n* feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n\n1. `git push <远程主机名> <本地分支名>` 如果忽略远程分支名，则表示将本地分支推送到与本地分支存在追踪关系的远程分支，如果该远程分支不存在，则会被新建。\n```bash\n$ git push origin dev\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n * [new branch]      dev -> dev\n```\n  + 同样的提示：`* [new branch]      dev -> dev`\n  + 同样再来次验证，发现远程分支 `origin/dev` 已经被创建成功！\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/dev\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n### 合并分支\n1. `git merge <分支名字>` 用于合并分支（将指定分支合并到当前分支）\n  例如在 `dev` 分支创建了一个 `test.md` 文件，就可以使用此命令把 `dev` 合并到 `master` 上（需提前切换到 `master` 分支）\n```bash\n$ git merge dev\nUpdating 75dd5ff..f21cc70\nFast-forward\n test.md | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 test.md\n```\n\n  最后别忘了，提交 `master` 分支\n```bash\n$ git push origin master\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/wencaistorm/git-learn.git\n   75dd5ff..f21cc70  master -> master\n```\n\n### 删除本地分支\n\n1. `git branch -d <本地分支名>` 删除本地分支，但只能删除已经被 merge 的分支。\n```bash\n$ git branch -d dev\nerror: The branch 'dev' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D dev'.\n```\n  + 删除失败，git 提示：`dev` 分支没有被合并，如果要强行删除，需要使用命令 `git branch -D dev`\n  + 需要注意的是，这里的合并，并不一定是合并到 `master` 分支，合并到任何分支都可以\n\n1. `git branch -D <本地分支名>` 强行删除本地分支，即使此分支没有被 merge\n```bash\n$ git branch -D dev\nDeleted branch dev (was 4a332d3).\n```\n  + 删除成功！\n\n### 删除远程分支\n\n1. `git push origin :<远程分支名>` 将一个空分支推送到远程分支，也就意味着将删除这个远程分支\n```bash\n$ git push origin :dev\nTo https://github.com/wencaistorm/git-learn.git\n - [deleted]         dev\n```\n  + 删除成功，并且给出提示信息：` - [deleted]         dev`\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/dev` 已经被删除\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/feature\n  remotes/origin/master\n```\n\n2. `git push origin --delete <远程分支名>` 通过 `--delete` 或者 `-d` 参数删除远程分支\n```bash\n$ git push origin --delete feature\nTo https://github.com/wencaistorm/git-learn.git\n - [deleted]         feature\n```\n  + 删除成功，同样给出提示信息：` - [deleted]         feature`\n  + 通过 `git branch -a` 命令验证，发现远程分支 `origin/feature` 已经被删除\n```bash\n$ git branch -a\n* dev\n  feature\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n### 重命名分支\n  分支情况如下：\n```bash\n$ git branch\n  master\n* new\n```\n  现在想把 `new` 分支重命名为 `newer` 分支，可以通过 `git branch -m <重命名前分支名称> <重命名后分支名称>`\n```bash\n$ git branch -m new newer\n```\n修改成功，重新查看分支\n```bash\n$ git branch\n  master\n* newer\n```\n\n### 总结\n最后总结一下，因为 `<远程主机名>` 通常默认为 `origin` ，因此这里直接以 `origin` 表示 `<远程主机名>`：\n+ 查看分支\n  - `git branch` 查看本地分支\n  - `git branch -r` 查看远程分支\n  - `git branch -a` 查看所有分支\n+ 创建和切换分支\n  - `git branch <分支名字>` 创建分支\n  - `git checkout <分支名字>` 切换分支\n  - `git checkout -b <分支名字>` 创建并自动切换到新分支\n+ 把本地分支推送到远程\n  - `git push origin <本地分支名>:<远程分支名>` （冒号两侧没有空格）\n  - `git push origin <本地分支名>`\n+ 合并分支 `git merge <分支名字>`\n+ 删除本地分支（注意`-d` 和 `-D` 的区别）\n  - `git branch -d <本地分支名>` 删除本地分支，但只能删除已经被 merge 的分支。\n  - `git branch -D <本地分支名>` 强行删除本地分支，即使此分支没有被 merge\n+ 删除远程分支\n  - `git push origin :<远程分支名>` （冒号左侧有两个空格）\n  - `git push origin --delete <远程分支名>` 或 `git push origin -D <远程分支名>` （`--delete` 和 `-D` 作用相同）\n+ 重命名分支 `git branch -m <重命名前分支名称> <重命名后分支名称>`","slug":"git/git-branch","published":1,"updated":"2018-01-07T14:44:29.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdqq001i0gqmjtqukm9c","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><ol>\n<li><p><code>git branch</code> 查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>美元符号 <code>$</code> 是命令提示符，即后面语句为执行的命令</li>\n<li>星号 <code>*</code> 表示当前分支为 <code>master</code></li>\n</ul>\n</li>\n<li><p><code>git branch -r</code> 查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -r</span><br><span class=\"line\">  origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>origin</code> 是默认的远程仓库的名字，<code>origin/master</code> 表示远程仓库的 <code>master</code> 分支</li>\n<li><code>origin/HEAD</code> 就像一个指针，表示默认分支，此处指向 <code>origin/master</code>，即 <code>origin/master</code> 是默认分支。</li>\n</ul>\n</li>\n<li><p><code>git branch -a</code> 查看所有分支，包含本地分支和远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当前分支为 <code>master</code></li>\n<li><code>remotes</code> 表示远程主机，远程主机可能不止一个，因此要指定远程主机的名字，<code>origin</code> 为远程主机的名字</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><ol>\n<li><p><code>git branch &lt;分支名字&gt;</code> 用于创建分支，默认以 <code>HEAD</code>（通常是 <code>master</code> 分支）作为起点来创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git branch</code> 命令仅仅建立了一个新分支，但不会自动切换到这个分支中去，因此当前分支仍是 <code>master</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><ol>\n<li><p><code>git checkout &lt;分支名字&gt;</code> 用于切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched to branch <span class=\"string\">'dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换分支之后，会有提示信息：<code>Switched to branch &#39;dev&#39;</code></li>\n<li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>dev</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建并自动切换到新分支\"><a href=\"#创建并自动切换到新分支\" class=\"headerlink\" title=\"创建并自动切换到新分支\"></a>创建并自动切换到新分支</h3><ol>\n<li><p><code>git checkout -b &lt;分支名字&gt;</code> 通过增加 <code>-b</code> 参数会创建分支并且切换到此分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'feature'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* feature</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换分支之后，会有提示信息：<code>Switched to a new branch &#39;feature&#39;&#39;</code></li>\n<li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>feature</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"将本地分支推送到远程\"><a href=\"#将本地分支推送到远程\" class=\"headerlink\" title=\"将本地分支推送到远程\"></a>将本地分支推送到远程</h3><ol>\n<li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin feature:feature</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> * [new branch]      feature -&gt; feature</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提示信息：<code>* [new branch]      feature -&gt; feature</code> ，说明 push 成功！</li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被创建成功<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code> 如果忽略远程分支名，则表示将本地分支推送到与本地分支存在追踪关系的远程分支，如果该远程分支不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样的提示：<code>* [new branch]      dev -&gt; dev</code></li>\n<li>同样再来次验证，发现远程分支 <code>origin/dev</code> 已经被创建成功！<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/dev</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><ol>\n<li><p><code>git merge &lt;分支名字&gt;</code> 用于合并分支（将指定分支合并到当前分支）<br>例如在 <code>dev</code> 分支创建了一个 <code>test.md</code> 文件，就可以使用此命令把 <code>dev</code> 合并到 <code>master</code> 上（需提前切换到 <code>master</code> 分支）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge dev</span><br><span class=\"line\">Updating 75dd5ff..f21cc70</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> test.md | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test.md</span><br></pre></td></tr></table></figure>\n<p>最后别忘了，提交 <code>master</code> 分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\">   75dd5ff..f21cc70  master -&gt; master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><ol>\n<li><p><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d dev</span><br><span class=\"line\">error: The branch <span class=\"string\">'dev'</span> is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D dev'</span>.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除失败，git 提示：<code>dev</code> 分支没有被合并，如果要强行删除，需要使用命令 <code>git branch -D dev</code></li>\n<li>需要注意的是，这里的合并，并不一定是合并到 <code>master</code> 分支，合并到任何分支都可以</li>\n</ul>\n</li>\n<li><p><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D dev</span><br><span class=\"line\">Deleted branch dev (was 4a332d3).</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功！</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><ol>\n<li><p><code>git push origin :&lt;远程分支名&gt;</code> 将一个空分支推送到远程分支，也就意味着将删除这个远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :dev</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> - [deleted]         dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功，并且给出提示信息：<code>- [deleted]         dev</code></li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/dev</code> 已经被删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>git push origin --delete &lt;远程分支名&gt;</code> 通过 <code>--delete</code> 或者 <code>-d</code> 参数删除远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete feature</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> - [deleted]         feature</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功，同样给出提示信息：<code>- [deleted]         feature</code></li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"重命名分支\"><a href=\"#重命名分支\" class=\"headerlink\" title=\"重命名分支\"></a>重命名分支</h3><p>  分支情况如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* new</span><br></pre></td></tr></table></figure></p>\n<p>  现在想把 <code>new</code> 分支重命名为 <code>newer</code> 分支，可以通过 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -m new newer</span><br></pre></td></tr></table></figure></p>\n<p>修改成功，重新查看分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* newer</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>最后总结一下，因为 <code>&lt;远程主机名&gt;</code> 通常默认为 <code>origin</code> ，因此这里直接以 <code>origin</code> 表示 <code>&lt;远程主机名&gt;</code>：</p>\n<ul>\n<li>查看分支<ul>\n<li><code>git branch</code> 查看本地分支</li>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看所有分支</li>\n</ul>\n</li>\n<li>创建和切换分支<ul>\n<li><code>git branch &lt;分支名字&gt;</code> 创建分支</li>\n<li><code>git checkout &lt;分支名字&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;分支名字&gt;</code> 创建并自动切换到新分支</li>\n</ul>\n</li>\n<li>把本地分支推送到远程<ul>\n<li><code>git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> （冒号两侧没有空格）</li>\n<li><code>git push origin &lt;本地分支名&gt;</code></li>\n</ul>\n</li>\n<li>合并分支 <code>git merge &lt;分支名字&gt;</code></li>\n<li>删除本地分支（注意<code>-d</code> 和 <code>-D</code> 的区别）<ul>\n<li><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</li>\n<li><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</li>\n</ul>\n</li>\n<li>删除远程分支<ul>\n<li><code>git push origin :&lt;远程分支名&gt;</code> （冒号左侧有两个空格）</li>\n<li><code>git push origin --delete &lt;远程分支名&gt;</code> 或 <code>git push origin -D &lt;远程分支名&gt;</code> （<code>--delete</code> 和 <code>-D</code> 作用相同）</li>\n</ul>\n</li>\n<li>重命名分支 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code></li>\n</ul>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><ol>\n<li><p><code>git branch</code> 查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>美元符号 <code>$</code> 是命令提示符，即后面语句为执行的命令</li>\n<li>星号 <code>*</code> 表示当前分支为 <code>master</code></li>\n</ul>\n</li>\n<li><p><code>git branch -r</code> 查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -r</span><br><span class=\"line\">  origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>origin</code> 是默认的远程仓库的名字，<code>origin/master</code> 表示远程仓库的 <code>master</code> 分支</li>\n<li><code>origin/HEAD</code> 就像一个指针，表示默认分支，此处指向 <code>origin/master</code>，即 <code>origin/master</code> 是默认分支。</li>\n</ul>\n</li>\n<li><p><code>git branch -a</code> 查看所有分支，包含本地分支和远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当前分支为 <code>master</code></li>\n<li><code>remotes</code> 表示远程主机，远程主机可能不止一个，因此要指定远程主机的名字，<code>origin</code> 为远程主机的名字</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><ol>\n<li><p><code>git branch &lt;分支名字&gt;</code> 用于创建分支，默认以 <code>HEAD</code>（通常是 <code>master</code> 分支）作为起点来创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch dev</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git branch</code> 命令仅仅建立了一个新分支，但不会自动切换到这个分支中去，因此当前分支仍是 <code>master</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><ol>\n<li><p><code>git checkout &lt;分支名字&gt;</code> 用于切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched to branch <span class=\"string\">'dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换分支之后，会有提示信息：<code>Switched to branch &#39;dev&#39;</code></li>\n<li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>dev</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建并自动切换到新分支\"><a href=\"#创建并自动切换到新分支\" class=\"headerlink\" title=\"创建并自动切换到新分支\"></a>创建并自动切换到新分支</h3><ol>\n<li><p><code>git checkout -b &lt;分支名字&gt;</code> 通过增加 <code>-b</code> 参数会创建分支并且切换到此分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'feature'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* feature</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切换分支之后，会有提示信息：<code>Switched to a new branch &#39;feature&#39;&#39;</code></li>\n<li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>feature</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"将本地分支推送到远程\"><a href=\"#将本地分支推送到远程\" class=\"headerlink\" title=\"将本地分支推送到远程\"></a>将本地分支推送到远程</h3><ol>\n<li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin feature:feature</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> * [new branch]      feature -&gt; feature</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提示信息：<code>* [new branch]      feature -&gt; feature</code> ，说明 push 成功！</li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被创建成功<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">  dev</span><br><span class=\"line\">* feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code> 如果忽略远程分支名，则表示将本地分支推送到与本地分支存在追踪关系的远程分支，如果该远程分支不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样的提示：<code>* [new branch]      dev -&gt; dev</code></li>\n<li>同样再来次验证，发现远程分支 <code>origin/dev</code> 已经被创建成功！<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/dev</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><ol>\n<li><p><code>git merge &lt;分支名字&gt;</code> 用于合并分支（将指定分支合并到当前分支）<br>例如在 <code>dev</code> 分支创建了一个 <code>test.md</code> 文件，就可以使用此命令把 <code>dev</code> 合并到 <code>master</code> 上（需提前切换到 <code>master</code> 分支）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge dev</span><br><span class=\"line\">Updating 75dd5ff..f21cc70</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> test.md | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 test.md</span><br></pre></td></tr></table></figure>\n<p>最后别忘了，提交 <code>master</code> 分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\">   75dd5ff..f21cc70  master -&gt; master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><ol>\n<li><p><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d dev</span><br><span class=\"line\">error: The branch <span class=\"string\">'dev'</span> is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D dev'</span>.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除失败，git 提示：<code>dev</code> 分支没有被合并，如果要强行删除，需要使用命令 <code>git branch -D dev</code></li>\n<li>需要注意的是，这里的合并，并不一定是合并到 <code>master</code> 分支，合并到任何分支都可以</li>\n</ul>\n</li>\n<li><p><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D dev</span><br><span class=\"line\">Deleted branch dev (was 4a332d3).</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功！</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><ol>\n<li><p><code>git push origin :&lt;远程分支名&gt;</code> 将一个空分支推送到远程分支，也就意味着将删除这个远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :dev</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> - [deleted]         dev</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功，并且给出提示信息：<code>- [deleted]         dev</code></li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/dev</code> 已经被删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/feature</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>git push origin --delete &lt;远程分支名&gt;</code> 通过 <code>--delete</code> 或者 <code>-d</code> 参数删除远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete feature</span><br><span class=\"line\">To https://github.com/wencaistorm/git-learn.git</span><br><span class=\"line\"> - [deleted]         feature</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除成功，同样给出提示信息：<code>- [deleted]         feature</code></li>\n<li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  feature</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"重命名分支\"><a href=\"#重命名分支\" class=\"headerlink\" title=\"重命名分支\"></a>重命名分支</h3><p>  分支情况如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* new</span><br></pre></td></tr></table></figure></p>\n<p>  现在想把 <code>new</code> 分支重命名为 <code>newer</code> 分支，可以通过 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -m new newer</span><br></pre></td></tr></table></figure></p>\n<p>修改成功，重新查看分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* newer</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>最后总结一下，因为 <code>&lt;远程主机名&gt;</code> 通常默认为 <code>origin</code> ，因此这里直接以 <code>origin</code> 表示 <code>&lt;远程主机名&gt;</code>：</p>\n<ul>\n<li>查看分支<ul>\n<li><code>git branch</code> 查看本地分支</li>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看所有分支</li>\n</ul>\n</li>\n<li>创建和切换分支<ul>\n<li><code>git branch &lt;分支名字&gt;</code> 创建分支</li>\n<li><code>git checkout &lt;分支名字&gt;</code> 切换分支</li>\n<li><code>git checkout -b &lt;分支名字&gt;</code> 创建并自动切换到新分支</li>\n</ul>\n</li>\n<li>把本地分支推送到远程<ul>\n<li><code>git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> （冒号两侧没有空格）</li>\n<li><code>git push origin &lt;本地分支名&gt;</code></li>\n</ul>\n</li>\n<li>合并分支 <code>git merge &lt;分支名字&gt;</code></li>\n<li>删除本地分支（注意<code>-d</code> 和 <code>-D</code> 的区别）<ul>\n<li><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</li>\n<li><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</li>\n</ul>\n</li>\n<li>删除远程分支<ul>\n<li><code>git push origin :&lt;远程分支名&gt;</code> （冒号左侧有两个空格）</li>\n<li><code>git push origin --delete &lt;远程分支名&gt;</code> 或 <code>git push origin -D &lt;远程分支名&gt;</code> （<code>--delete</code> 和 <code>-D</code> 作用相同）</li>\n</ul>\n</li>\n<li>重命名分支 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code></li>\n</ul>\n"},{"title":"Git 基本概念","abbrlink":"f69de184","date":"2017-12-21T05:08:23.000Z","_content":"# git-basic-usege\n\n## 基本概念\n\n### 4 个区\n使用 Git 进行版本管理，不免会遇到几个概念：工作区、暂存区、本地仓库以及远程仓库。\n\n+ 工作目录：很好理解，就是需要对其进行版本管理的文件目录，也就是日常写代码的目录。\n\n+ 远程仓库：如果想要分享你的代码或者与其他开发人员合作，那么就需要将数据放到一台其他开发人员能够连接的服务器上。这台服务器充当代码中转站的角色，这台服务器也有一个和你本地相同的代码库。每当完成一个功能，把最新的代码推送到这个服务器的代码库，别人就通过这台服务器的代码库获取最新的代码。那么这台服务器的代码库就叫做远程仓库。\n\n+ 本地仓库：Git 是分布式版本控制系统，每个人电脑上都有一个完整的代码仓库。相对于远程仓库来说，自己工作用的电脑上面的代码仓库就是本地仓库。为了让远程仓库和本地仓库保持同步，就需要在本地仓库中更新和推送代码。\n\n+ 暂存区：工作的时候，代码进行了修改，文件发生变动，工作结束的时候，把修改的文件提交到版本库中。这时候就需要先把需要提交的文件保存到暂存区，最后把暂存区的文件提交到代码库中。\n    1. 希望只提交其中的部分文件\n    2. 代码提交应该是一项需要慎重的工作，在提交代码之前\n\n### 工作流程\n于是，基本的 Git 工作流程如下：\n\n1. 在工作目录中修改某些文件\n1. 把修改的文件保存到暂存区域。\n1. 将保存在暂存区域的文件提交到本地仓库\n1. 把本地仓库更新到远程仓库\n\n### 文件状态\n相应的，在每个步骤中的文件也就处于不同的状态：\n\n1. 未修改的文件的状态为 “未修改”\n1. 在工作目录中，已修改的文件状态为 “已修改”\n1. 把修改的文件保存到暂存区，此时文件状态由 “已修改” 变为 “已暂存”\n1. 将保存在暂存区域的文件提交到本地仓库，此时文件状态由 “已暂存” 变为 “已提交”\n1. 把本地仓库更新到远程仓库，此时文件状态由 “已提交” 变为 “已推送”\n\n\n## 基本使用\n\n假设现在有一个 git 仓库 git-learn，git 地址是：`https://github.com/wencaizhang/git-learn.git`，现在需要在这个仓库中工作。\n\n### 1. 获取代码\n  ```bash\n  git clone https://github.com/wencaizhang/git-learn.git\n  ```\n  ![](/blog/images/git-clone.png)\n\n  如图所示，仓库中目前只有一个 README.md 文件。\n\n### 2. 修改 README.md 文件，查看仓库状态\n\n  使用 `git status` 可以查看仓库状态\n\n  ![](/blog/images/git-modify.png)\n\n### 3. 查看修改内容\n\n  提交代码应该是一个严谨的工作，因此提交之前最好能确认本次提交的内容。使用 `git diff <filename>` 可以查看文件的改动情况\n\n  ![](/blog/images/git-diff.png)\n\n  `-` 表示删除，`+` 表示增加，因此，此文件删除了一行，同时增加了一行\n\n### 4. 撤销修改\n\n  此时，如果因为某种原因，希望此文件还原到一开始的状态（即撤销修改的内容），可以使用 `git checkout <filename>` 命令\n\n  ![](/blog/images/git-checkout.png)\n\n\n### 5. 保存到暂存区域\n\n  如果不打算撤销，而是接着往下进行提交工作，那么就可以使用 `git add <filename>` 命令可以把修改的文件保存到暂存区\n\n  ![](/blog/images/git-add.png)\n\n### 6. 查看暂存区内容\n\n  在整个工作流程中，是随时都可查看修改内容的，当文件保存到暂存区之后，可以使用 `git diff --staged <filename>` 命令查看（和修改区查看相比，多一个参数 `--staged`）\n\n  ![](/blog/images/git-diff-staged.png)\n\n### 7. 撤销暂存\n\n  不巧的是，在上一步查看修改内容之后，发现之前的修改有所不妥，不想继续往下提交了，希望将此文件还原到一开始的状态（即撤销修改的内容）。\n\n  这时候可以使用 `git reset <filename>` 命令将其从暂存区撤回，然后再使用 `git checkout <filename>` 命令撤销其内容修改\n\n  ![](/blog/images/git-reset.png)\n\n  ![](/blog/images/git-checkout.png)\n\n### 8. 提交到本地仓库\n\n  如果查看了暂存区的文件确认无误，就可以把文件提交到本地仓库了。此时会将暂存区的所有文件全部提交，命令是：`git commit -m \"提交的描述信息\"`\n\n  ![](/blog/images/git-commit-0.png)\n\n  wait a moment，这里提示设置邮箱和用户名（如果安装 git 之后没有设置邮箱和用户名才会有这个提示）\n\n  按照提示进行设置邮箱和用户民，然后进行提交：`git commit -m \"add a line\"`\n\n  ![](/blog/images/git-commit.png)\n\n### 9. 提交到本地仓库后查看提交记录\n\n  通过命令 `git log` ，可以查看每次提交时，提交人的信息，提交时间，提交的描述信息和提交版本号\n\n  ![](/blog/images/git-log.png)\n","source":"_posts/git/git-basic-usege.md","raw":"---\ntitle: Git 基本概念\ntags:\n  - Git\ncategories:\n  - Git\nabbrlink: f69de184\ndate: 2017-12-21 13:08:23\n---\n# git-basic-usege\n\n## 基本概念\n\n### 4 个区\n使用 Git 进行版本管理，不免会遇到几个概念：工作区、暂存区、本地仓库以及远程仓库。\n\n+ 工作目录：很好理解，就是需要对其进行版本管理的文件目录，也就是日常写代码的目录。\n\n+ 远程仓库：如果想要分享你的代码或者与其他开发人员合作，那么就需要将数据放到一台其他开发人员能够连接的服务器上。这台服务器充当代码中转站的角色，这台服务器也有一个和你本地相同的代码库。每当完成一个功能，把最新的代码推送到这个服务器的代码库，别人就通过这台服务器的代码库获取最新的代码。那么这台服务器的代码库就叫做远程仓库。\n\n+ 本地仓库：Git 是分布式版本控制系统，每个人电脑上都有一个完整的代码仓库。相对于远程仓库来说，自己工作用的电脑上面的代码仓库就是本地仓库。为了让远程仓库和本地仓库保持同步，就需要在本地仓库中更新和推送代码。\n\n+ 暂存区：工作的时候，代码进行了修改，文件发生变动，工作结束的时候，把修改的文件提交到版本库中。这时候就需要先把需要提交的文件保存到暂存区，最后把暂存区的文件提交到代码库中。\n    1. 希望只提交其中的部分文件\n    2. 代码提交应该是一项需要慎重的工作，在提交代码之前\n\n### 工作流程\n于是，基本的 Git 工作流程如下：\n\n1. 在工作目录中修改某些文件\n1. 把修改的文件保存到暂存区域。\n1. 将保存在暂存区域的文件提交到本地仓库\n1. 把本地仓库更新到远程仓库\n\n### 文件状态\n相应的，在每个步骤中的文件也就处于不同的状态：\n\n1. 未修改的文件的状态为 “未修改”\n1. 在工作目录中，已修改的文件状态为 “已修改”\n1. 把修改的文件保存到暂存区，此时文件状态由 “已修改” 变为 “已暂存”\n1. 将保存在暂存区域的文件提交到本地仓库，此时文件状态由 “已暂存” 变为 “已提交”\n1. 把本地仓库更新到远程仓库，此时文件状态由 “已提交” 变为 “已推送”\n\n\n## 基本使用\n\n假设现在有一个 git 仓库 git-learn，git 地址是：`https://github.com/wencaizhang/git-learn.git`，现在需要在这个仓库中工作。\n\n### 1. 获取代码\n  ```bash\n  git clone https://github.com/wencaizhang/git-learn.git\n  ```\n  ![](/blog/images/git-clone.png)\n\n  如图所示，仓库中目前只有一个 README.md 文件。\n\n### 2. 修改 README.md 文件，查看仓库状态\n\n  使用 `git status` 可以查看仓库状态\n\n  ![](/blog/images/git-modify.png)\n\n### 3. 查看修改内容\n\n  提交代码应该是一个严谨的工作，因此提交之前最好能确认本次提交的内容。使用 `git diff <filename>` 可以查看文件的改动情况\n\n  ![](/blog/images/git-diff.png)\n\n  `-` 表示删除，`+` 表示增加，因此，此文件删除了一行，同时增加了一行\n\n### 4. 撤销修改\n\n  此时，如果因为某种原因，希望此文件还原到一开始的状态（即撤销修改的内容），可以使用 `git checkout <filename>` 命令\n\n  ![](/blog/images/git-checkout.png)\n\n\n### 5. 保存到暂存区域\n\n  如果不打算撤销，而是接着往下进行提交工作，那么就可以使用 `git add <filename>` 命令可以把修改的文件保存到暂存区\n\n  ![](/blog/images/git-add.png)\n\n### 6. 查看暂存区内容\n\n  在整个工作流程中，是随时都可查看修改内容的，当文件保存到暂存区之后，可以使用 `git diff --staged <filename>` 命令查看（和修改区查看相比，多一个参数 `--staged`）\n\n  ![](/blog/images/git-diff-staged.png)\n\n### 7. 撤销暂存\n\n  不巧的是，在上一步查看修改内容之后，发现之前的修改有所不妥，不想继续往下提交了，希望将此文件还原到一开始的状态（即撤销修改的内容）。\n\n  这时候可以使用 `git reset <filename>` 命令将其从暂存区撤回，然后再使用 `git checkout <filename>` 命令撤销其内容修改\n\n  ![](/blog/images/git-reset.png)\n\n  ![](/blog/images/git-checkout.png)\n\n### 8. 提交到本地仓库\n\n  如果查看了暂存区的文件确认无误，就可以把文件提交到本地仓库了。此时会将暂存区的所有文件全部提交，命令是：`git commit -m \"提交的描述信息\"`\n\n  ![](/blog/images/git-commit-0.png)\n\n  wait a moment，这里提示设置邮箱和用户名（如果安装 git 之后没有设置邮箱和用户名才会有这个提示）\n\n  按照提示进行设置邮箱和用户民，然后进行提交：`git commit -m \"add a line\"`\n\n  ![](/blog/images/git-commit.png)\n\n### 9. 提交到本地仓库后查看提交记录\n\n  通过命令 `git log` ，可以查看每次提交时，提交人的信息，提交时间，提交的描述信息和提交版本号\n\n  ![](/blog/images/git-log.png)\n","slug":"git/git-basic-usege","published":1,"updated":"2018-01-09T10:24:22.937Z","_id":"cjc7hmdqt001k0gqmcidq9bcg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git-basic-usege\"><a href=\"#git-basic-usege\" class=\"headerlink\" title=\"git-basic-usege\"></a>git-basic-usege</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"4-个区\"><a href=\"#4-个区\" class=\"headerlink\" title=\"4 个区\"></a>4 个区</h3><p>使用 Git 进行版本管理，不免会遇到几个概念：工作区、暂存区、本地仓库以及远程仓库。</p>\n<ul>\n<li><p>工作目录：很好理解，就是需要对其进行版本管理的文件目录，也就是日常写代码的目录。</p>\n</li>\n<li><p>远程仓库：如果想要分享你的代码或者与其他开发人员合作，那么就需要将数据放到一台其他开发人员能够连接的服务器上。这台服务器充当代码中转站的角色，这台服务器也有一个和你本地相同的代码库。每当完成一个功能，把最新的代码推送到这个服务器的代码库，别人就通过这台服务器的代码库获取最新的代码。那么这台服务器的代码库就叫做远程仓库。</p>\n</li>\n<li><p>本地仓库：Git 是分布式版本控制系统，每个人电脑上都有一个完整的代码仓库。相对于远程仓库来说，自己工作用的电脑上面的代码仓库就是本地仓库。为了让远程仓库和本地仓库保持同步，就需要在本地仓库中更新和推送代码。</p>\n</li>\n<li><p>暂存区：工作的时候，代码进行了修改，文件发生变动，工作结束的时候，把修改的文件提交到版本库中。这时候就需要先把需要提交的文件保存到暂存区，最后把暂存区的文件提交到代码库中。</p>\n<ol>\n<li>希望只提交其中的部分文件</li>\n<li>代码提交应该是一项需要慎重的工作，在提交代码之前</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><p>于是，基本的 Git 工作流程如下：</p>\n<ol>\n<li>在工作目录中修改某些文件</li>\n<li>把修改的文件保存到暂存区域。</li>\n<li>将保存在暂存区域的文件提交到本地仓库</li>\n<li>把本地仓库更新到远程仓库</li>\n</ol>\n<h3 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h3><p>相应的，在每个步骤中的文件也就处于不同的状态：</p>\n<ol>\n<li>未修改的文件的状态为 “未修改”</li>\n<li>在工作目录中，已修改的文件状态为 “已修改”</li>\n<li>把修改的文件保存到暂存区，此时文件状态由 “已修改” 变为 “已暂存”</li>\n<li>将保存在暂存区域的文件提交到本地仓库，此时文件状态由 “已暂存” 变为 “已提交”</li>\n<li>把本地仓库更新到远程仓库，此时文件状态由 “已提交” 变为 “已推送”</li>\n</ol>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>假设现在有一个 git 仓库 git-learn，git 地址是：<code>https://github.com/wencaizhang/git-learn.git</code>，现在需要在这个仓库中工作。</p>\n<h3 id=\"1-获取代码\"><a href=\"#1-获取代码\" class=\"headerlink\" title=\"1. 获取代码\"></a>1. 获取代码</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wencaizhang/git-learn.git</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"/blog/images/git-clone.png\" alt=\"\"></p>\n<p>  如图所示，仓库中目前只有一个 README.md 文件。</p>\n<h3 id=\"2-修改-README-md-文件，查看仓库状态\"><a href=\"#2-修改-README-md-文件，查看仓库状态\" class=\"headerlink\" title=\"2. 修改 README.md 文件，查看仓库状态\"></a>2. 修改 README.md 文件，查看仓库状态</h3><p>  使用 <code>git status</code> 可以查看仓库状态</p>\n<p>  <img src=\"/blog/images/git-modify.png\" alt=\"\"></p>\n<h3 id=\"3-查看修改内容\"><a href=\"#3-查看修改内容\" class=\"headerlink\" title=\"3. 查看修改内容\"></a>3. 查看修改内容</h3><p>  提交代码应该是一个严谨的工作，因此提交之前最好能确认本次提交的内容。使用 <code>git diff &lt;filename&gt;</code> 可以查看文件的改动情况</p>\n<p>  <img src=\"/blog/images/git-diff.png\" alt=\"\"></p>\n<p>  <code>-</code> 表示删除，<code>+</code> 表示增加，因此，此文件删除了一行，同时增加了一行</p>\n<h3 id=\"4-撤销修改\"><a href=\"#4-撤销修改\" class=\"headerlink\" title=\"4. 撤销修改\"></a>4. 撤销修改</h3><p>  此时，如果因为某种原因，希望此文件还原到一开始的状态（即撤销修改的内容），可以使用 <code>git checkout &lt;filename&gt;</code> 命令</p>\n<p>  <img src=\"/blog/images/git-checkout.png\" alt=\"\"></p>\n<h3 id=\"5-保存到暂存区域\"><a href=\"#5-保存到暂存区域\" class=\"headerlink\" title=\"5. 保存到暂存区域\"></a>5. 保存到暂存区域</h3><p>  如果不打算撤销，而是接着往下进行提交工作，那么就可以使用 <code>git add &lt;filename&gt;</code> 命令可以把修改的文件保存到暂存区</p>\n<p>  <img src=\"/blog/images/git-add.png\" alt=\"\"></p>\n<h3 id=\"6-查看暂存区内容\"><a href=\"#6-查看暂存区内容\" class=\"headerlink\" title=\"6. 查看暂存区内容\"></a>6. 查看暂存区内容</h3><p>  在整个工作流程中，是随时都可查看修改内容的，当文件保存到暂存区之后，可以使用 <code>git diff --staged &lt;filename&gt;</code> 命令查看（和修改区查看相比，多一个参数 <code>--staged</code>）</p>\n<p>  <img src=\"/blog/images/git-diff-staged.png\" alt=\"\"></p>\n<h3 id=\"7-撤销暂存\"><a href=\"#7-撤销暂存\" class=\"headerlink\" title=\"7. 撤销暂存\"></a>7. 撤销暂存</h3><p>  不巧的是，在上一步查看修改内容之后，发现之前的修改有所不妥，不想继续往下提交了，希望将此文件还原到一开始的状态（即撤销修改的内容）。</p>\n<p>  这时候可以使用 <code>git reset &lt;filename&gt;</code> 命令将其从暂存区撤回，然后再使用 <code>git checkout &lt;filename&gt;</code> 命令撤销其内容修改</p>\n<p>  <img src=\"/blog/images/git-reset.png\" alt=\"\"></p>\n<p>  <img src=\"/blog/images/git-checkout.png\" alt=\"\"></p>\n<h3 id=\"8-提交到本地仓库\"><a href=\"#8-提交到本地仓库\" class=\"headerlink\" title=\"8. 提交到本地仓库\"></a>8. 提交到本地仓库</h3><p>  如果查看了暂存区的文件确认无误，就可以把文件提交到本地仓库了。此时会将暂存区的所有文件全部提交，命令是：<code>git commit -m &quot;提交的描述信息&quot;</code></p>\n<p>  <img src=\"/blog/images/git-commit-0.png\" alt=\"\"></p>\n<p>  wait a moment，这里提示设置邮箱和用户名（如果安装 git 之后没有设置邮箱和用户名才会有这个提示）</p>\n<p>  按照提示进行设置邮箱和用户民，然后进行提交：<code>git commit -m &quot;add a line&quot;</code></p>\n<p>  <img src=\"/blog/images/git-commit.png\" alt=\"\"></p>\n<h3 id=\"9-提交到本地仓库后查看提交记录\"><a href=\"#9-提交到本地仓库后查看提交记录\" class=\"headerlink\" title=\"9. 提交到本地仓库后查看提交记录\"></a>9. 提交到本地仓库后查看提交记录</h3><p>  通过命令 <code>git log</code> ，可以查看每次提交时，提交人的信息，提交时间，提交的描述信息和提交版本号</p>\n<p>  <img src=\"/blog/images/git-log.png\" alt=\"\"></p>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h1 id=\"git-basic-usege\"><a href=\"#git-basic-usege\" class=\"headerlink\" title=\"git-basic-usege\"></a>git-basic-usege</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"4-个区\"><a href=\"#4-个区\" class=\"headerlink\" title=\"4 个区\"></a>4 个区</h3><p>使用 Git 进行版本管理，不免会遇到几个概念：工作区、暂存区、本地仓库以及远程仓库。</p>\n<ul>\n<li><p>工作目录：很好理解，就是需要对其进行版本管理的文件目录，也就是日常写代码的目录。</p>\n</li>\n<li><p>远程仓库：如果想要分享你的代码或者与其他开发人员合作，那么就需要将数据放到一台其他开发人员能够连接的服务器上。这台服务器充当代码中转站的角色，这台服务器也有一个和你本地相同的代码库。每当完成一个功能，把最新的代码推送到这个服务器的代码库，别人就通过这台服务器的代码库获取最新的代码。那么这台服务器的代码库就叫做远程仓库。</p>\n</li>\n<li><p>本地仓库：Git 是分布式版本控制系统，每个人电脑上都有一个完整的代码仓库。相对于远程仓库来说，自己工作用的电脑上面的代码仓库就是本地仓库。为了让远程仓库和本地仓库保持同步，就需要在本地仓库中更新和推送代码。</p>\n</li>\n<li><p>暂存区：工作的时候，代码进行了修改，文件发生变动，工作结束的时候，把修改的文件提交到版本库中。这时候就需要先把需要提交的文件保存到暂存区，最后把暂存区的文件提交到代码库中。</p>\n<ol>\n<li>希望只提交其中的部分文件</li>\n<li>代码提交应该是一项需要慎重的工作，在提交代码之前</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><p>于是，基本的 Git 工作流程如下：</p>\n<ol>\n<li>在工作目录中修改某些文件</li>\n<li>把修改的文件保存到暂存区域。</li>\n<li>将保存在暂存区域的文件提交到本地仓库</li>\n<li>把本地仓库更新到远程仓库</li>\n</ol>\n<h3 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h3><p>相应的，在每个步骤中的文件也就处于不同的状态：</p>\n<ol>\n<li>未修改的文件的状态为 “未修改”</li>\n<li>在工作目录中，已修改的文件状态为 “已修改”</li>\n<li>把修改的文件保存到暂存区，此时文件状态由 “已修改” 变为 “已暂存”</li>\n<li>将保存在暂存区域的文件提交到本地仓库，此时文件状态由 “已暂存” 变为 “已提交”</li>\n<li>把本地仓库更新到远程仓库，此时文件状态由 “已提交” 变为 “已推送”</li>\n</ol>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>假设现在有一个 git 仓库 git-learn，git 地址是：<code>https://github.com/wencaizhang/git-learn.git</code>，现在需要在这个仓库中工作。</p>\n<h3 id=\"1-获取代码\"><a href=\"#1-获取代码\" class=\"headerlink\" title=\"1. 获取代码\"></a>1. 获取代码</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wencaizhang/git-learn.git</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"/blog/images/git-clone.png\" alt=\"\"></p>\n<p>  如图所示，仓库中目前只有一个 README.md 文件。</p>\n<h3 id=\"2-修改-README-md-文件，查看仓库状态\"><a href=\"#2-修改-README-md-文件，查看仓库状态\" class=\"headerlink\" title=\"2. 修改 README.md 文件，查看仓库状态\"></a>2. 修改 README.md 文件，查看仓库状态</h3><p>  使用 <code>git status</code> 可以查看仓库状态</p>\n<p>  <img src=\"/blog/images/git-modify.png\" alt=\"\"></p>\n<h3 id=\"3-查看修改内容\"><a href=\"#3-查看修改内容\" class=\"headerlink\" title=\"3. 查看修改内容\"></a>3. 查看修改内容</h3><p>  提交代码应该是一个严谨的工作，因此提交之前最好能确认本次提交的内容。使用 <code>git diff &lt;filename&gt;</code> 可以查看文件的改动情况</p>\n<p>  <img src=\"/blog/images/git-diff.png\" alt=\"\"></p>\n<p>  <code>-</code> 表示删除，<code>+</code> 表示增加，因此，此文件删除了一行，同时增加了一行</p>\n<h3 id=\"4-撤销修改\"><a href=\"#4-撤销修改\" class=\"headerlink\" title=\"4. 撤销修改\"></a>4. 撤销修改</h3><p>  此时，如果因为某种原因，希望此文件还原到一开始的状态（即撤销修改的内容），可以使用 <code>git checkout &lt;filename&gt;</code> 命令</p>\n<p>  <img src=\"/blog/images/git-checkout.png\" alt=\"\"></p>\n<h3 id=\"5-保存到暂存区域\"><a href=\"#5-保存到暂存区域\" class=\"headerlink\" title=\"5. 保存到暂存区域\"></a>5. 保存到暂存区域</h3><p>  如果不打算撤销，而是接着往下进行提交工作，那么就可以使用 <code>git add &lt;filename&gt;</code> 命令可以把修改的文件保存到暂存区</p>\n<p>  <img src=\"/blog/images/git-add.png\" alt=\"\"></p>\n<h3 id=\"6-查看暂存区内容\"><a href=\"#6-查看暂存区内容\" class=\"headerlink\" title=\"6. 查看暂存区内容\"></a>6. 查看暂存区内容</h3><p>  在整个工作流程中，是随时都可查看修改内容的，当文件保存到暂存区之后，可以使用 <code>git diff --staged &lt;filename&gt;</code> 命令查看（和修改区查看相比，多一个参数 <code>--staged</code>）</p>\n<p>  <img src=\"/blog/images/git-diff-staged.png\" alt=\"\"></p>\n<h3 id=\"7-撤销暂存\"><a href=\"#7-撤销暂存\" class=\"headerlink\" title=\"7. 撤销暂存\"></a>7. 撤销暂存</h3><p>  不巧的是，在上一步查看修改内容之后，发现之前的修改有所不妥，不想继续往下提交了，希望将此文件还原到一开始的状态（即撤销修改的内容）。</p>\n<p>  这时候可以使用 <code>git reset &lt;filename&gt;</code> 命令将其从暂存区撤回，然后再使用 <code>git checkout &lt;filename&gt;</code> 命令撤销其内容修改</p>\n<p>  <img src=\"/blog/images/git-reset.png\" alt=\"\"></p>\n<p>  <img src=\"/blog/images/git-checkout.png\" alt=\"\"></p>\n<h3 id=\"8-提交到本地仓库\"><a href=\"#8-提交到本地仓库\" class=\"headerlink\" title=\"8. 提交到本地仓库\"></a>8. 提交到本地仓库</h3><p>  如果查看了暂存区的文件确认无误，就可以把文件提交到本地仓库了。此时会将暂存区的所有文件全部提交，命令是：<code>git commit -m &quot;提交的描述信息&quot;</code></p>\n<p>  <img src=\"/blog/images/git-commit-0.png\" alt=\"\"></p>\n<p>  wait a moment，这里提示设置邮箱和用户名（如果安装 git 之后没有设置邮箱和用户名才会有这个提示）</p>\n<p>  按照提示进行设置邮箱和用户民，然后进行提交：<code>git commit -m &quot;add a line&quot;</code></p>\n<p>  <img src=\"/blog/images/git-commit.png\" alt=\"\"></p>\n<h3 id=\"9-提交到本地仓库后查看提交记录\"><a href=\"#9-提交到本地仓库后查看提交记录\" class=\"headerlink\" title=\"9. 提交到本地仓库后查看提交记录\"></a>9. 提交到本地仓库后查看提交记录</h3><p>  通过命令 <code>git log</code> ，可以查看每次提交时，提交人的信息，提交时间，提交的描述信息和提交版本号</p>\n<p>  <img src=\"/blog/images/git-log.png\" alt=\"\"></p>\n"},{"title":"切换浏览器 tab 标签时动态设置网页 title","abbrlink":"4e4f3b4e","date":"2017-12-22T13:50:23.000Z","_content":"\n## 效果\n在[饿了么官网](https://www.ele.me/home/)看到一个网页效果，在饿了么网页和其他标签页之间相互切换时，饿了么网页的 title，发生了变化。\n\n饿了么官网: https://www.ele.me/home/\n\n效果如下：\n\n![](/images/change-title.gif)\n\n\n## 代码实现\n\n### 预备知识\n1. `visibilitychange` 事件，会在浏览器标签页被隐藏或显示的时候会触发\n2. `document.hidden` ，只读属性，返回一个布尔值标识当前页面是否隐藏\n3. `document.visibilityState`，只读属性，返回 `document` 的可见性，有 4 个值：\n  + `visible` : 此时页面内容至少是部分可见。 即此页面在前景标签页中，并且窗口没有最小化\n  + `hidden` : 此时页面对用户不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于锁屏状态\n  + `prerender` : 页面此时正在渲染中， 因此是不可见的. 文档只能从此状态开始，永远不能从其他值变为此状态\n  + `unloaded` : 页面从内存中卸载清除\n\n### 具体代码\n+ 使用 `document.hidden` 属性\n```js\nvar titleFocus = '饿了么';\nvar titleBlur = '记得回来哦';\n\nfunction toggleTitleHandler(bool) {\n    document.title = bool ? titleBlur : titleFocus;\n}\n\ndocument.addEventListener(\"visibilitychange\", function () {\n  toggleTitleHandler(document.hidden);\n}, false);\n```\n+ 使用 `document.visibilityState` 属性\n```js\nvar titleFocus = '饿了么';\nvar titleBlur = '记得回来哦';\n\nfunction toggleTitleHandler(visibilityState) {\n    document.title = visibilityState === 'hidden' ? titleBlur : titleFocus;\n}\n\ndocument.addEventListener(\"visibilitychange\", function () {\n  toggleTitleHandler(document.visibilityState);\n}, false);\n```\n\n## 其他\n\n  此 API 存在兼容性问题，支持 IE10+ \n\n  推荐阅读： [Page Visibility(页面可见性) API介绍、微拓展 - 张鑫旭](http://www.zhangxinxu.com/wordpress/?p=2790)（PS：此处献上我的膝盖）\n\n  最后，细心的同学可能会发现，本站也是有此效果的哦~","source":"_posts/js/toggle-title-on-focus-and-blur.md","raw":"---\ntitle: 切换浏览器 tab 标签时动态设置网页 title\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 4e4f3b4e\ndate: 2017-12-22 21:50:23\n---\n\n## 效果\n在[饿了么官网](https://www.ele.me/home/)看到一个网页效果，在饿了么网页和其他标签页之间相互切换时，饿了么网页的 title，发生了变化。\n\n饿了么官网: https://www.ele.me/home/\n\n效果如下：\n\n![](/images/change-title.gif)\n\n\n## 代码实现\n\n### 预备知识\n1. `visibilitychange` 事件，会在浏览器标签页被隐藏或显示的时候会触发\n2. `document.hidden` ，只读属性，返回一个布尔值标识当前页面是否隐藏\n3. `document.visibilityState`，只读属性，返回 `document` 的可见性，有 4 个值：\n  + `visible` : 此时页面内容至少是部分可见。 即此页面在前景标签页中，并且窗口没有最小化\n  + `hidden` : 此时页面对用户不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于锁屏状态\n  + `prerender` : 页面此时正在渲染中， 因此是不可见的. 文档只能从此状态开始，永远不能从其他值变为此状态\n  + `unloaded` : 页面从内存中卸载清除\n\n### 具体代码\n+ 使用 `document.hidden` 属性\n```js\nvar titleFocus = '饿了么';\nvar titleBlur = '记得回来哦';\n\nfunction toggleTitleHandler(bool) {\n    document.title = bool ? titleBlur : titleFocus;\n}\n\ndocument.addEventListener(\"visibilitychange\", function () {\n  toggleTitleHandler(document.hidden);\n}, false);\n```\n+ 使用 `document.visibilityState` 属性\n```js\nvar titleFocus = '饿了么';\nvar titleBlur = '记得回来哦';\n\nfunction toggleTitleHandler(visibilityState) {\n    document.title = visibilityState === 'hidden' ? titleBlur : titleFocus;\n}\n\ndocument.addEventListener(\"visibilitychange\", function () {\n  toggleTitleHandler(document.visibilityState);\n}, false);\n```\n\n## 其他\n\n  此 API 存在兼容性问题，支持 IE10+ \n\n  推荐阅读： [Page Visibility(页面可见性) API介绍、微拓展 - 张鑫旭](http://www.zhangxinxu.com/wordpress/?p=2790)（PS：此处献上我的膝盖）\n\n  最后，细心的同学可能会发现，本站也是有此效果的哦~","slug":"js/toggle-title-on-focus-and-blur","published":1,"updated":"2018-01-07T14:44:29.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdqw001n0gqm8adyhxxc","content":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>在<a href=\"https://www.ele.me/home/\" target=\"_blank\" rel=\"noopener\">饿了么官网</a>看到一个网页效果，在饿了么网页和其他标签页之间相互切换时，饿了么网页的 title，发生了变化。</p>\n<p>饿了么官网: <a href=\"https://www.ele.me/home/\" target=\"_blank\" rel=\"noopener\">https://www.ele.me/home/</a></p>\n<p>效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/change-title.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ol>\n<li><code>visibilitychange</code> 事件，会在浏览器标签页被隐藏或显示的时候会触发</li>\n<li><code>document.hidden</code> ，只读属性，返回一个布尔值标识当前页面是否隐藏</li>\n<li><code>document.visibilityState</code>，只读属性，返回 <code>document</code> 的可见性，有 4 个值：<ul>\n<li><code>visible</code> : 此时页面内容至少是部分可见。 即此页面在前景标签页中，并且窗口没有最小化</li>\n<li><code>hidden</code> : 此时页面对用户不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于锁屏状态</li>\n<li><code>prerender</code> : 页面此时正在渲染中， 因此是不可见的. 文档只能从此状态开始，永远不能从其他值变为此状态</li>\n<li><code>unloaded</code> : 页面从内存中卸载清除</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><ul>\n<li><p>使用 <code>document.hidden</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> titleFocus = <span class=\"string\">'饿了么'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleBlur = <span class=\"string\">'记得回来哦'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTitleHandler</span>(<span class=\"params\">bool</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = bool ? titleBlur : titleFocus;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"visibilitychange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  toggleTitleHandler(<span class=\"built_in\">document</span>.hidden);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>document.visibilityState</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> titleFocus = <span class=\"string\">'饿了么'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleBlur = <span class=\"string\">'记得回来哦'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTitleHandler</span>(<span class=\"params\">visibilityState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = visibilityState === <span class=\"string\">'hidden'</span> ? titleBlur : titleFocus;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"visibilitychange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  toggleTitleHandler(<span class=\"built_in\">document</span>.visibilityState);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>  此 API 存在兼容性问题，支持 IE10+ </p>\n<p>  推荐阅读： <a href=\"http://www.zhangxinxu.com/wordpress/?p=2790\" target=\"_blank\" rel=\"noopener\">Page Visibility(页面可见性) API介绍、微拓展 - 张鑫旭</a>（PS：此处献上我的膝盖）</p>\n<p>  最后，细心的同学可能会发现，本站也是有此效果的哦~</p>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>在<a href=\"https://www.ele.me/home/\" target=\"_blank\" rel=\"noopener\">饿了么官网</a>看到一个网页效果，在饿了么网页和其他标签页之间相互切换时，饿了么网页的 title，发生了变化。</p>\n<p>饿了么官网: <a href=\"https://www.ele.me/home/\" target=\"_blank\" rel=\"noopener\">https://www.ele.me/home/</a></p>\n<p>效果如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/images/change-title.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ol>\n<li><code>visibilitychange</code> 事件，会在浏览器标签页被隐藏或显示的时候会触发</li>\n<li><code>document.hidden</code> ，只读属性，返回一个布尔值标识当前页面是否隐藏</li>\n<li><code>document.visibilityState</code>，只读属性，返回 <code>document</code> 的可见性，有 4 个值：<ul>\n<li><code>visible</code> : 此时页面内容至少是部分可见。 即此页面在前景标签页中，并且窗口没有最小化</li>\n<li><code>hidden</code> : 此时页面对用户不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于锁屏状态</li>\n<li><code>prerender</code> : 页面此时正在渲染中， 因此是不可见的. 文档只能从此状态开始，永远不能从其他值变为此状态</li>\n<li><code>unloaded</code> : 页面从内存中卸载清除</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><ul>\n<li><p>使用 <code>document.hidden</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> titleFocus = <span class=\"string\">'饿了么'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleBlur = <span class=\"string\">'记得回来哦'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTitleHandler</span>(<span class=\"params\">bool</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = bool ? titleBlur : titleFocus;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"visibilitychange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  toggleTitleHandler(<span class=\"built_in\">document</span>.hidden);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>document.visibilityState</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> titleFocus = <span class=\"string\">'饿了么'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleBlur = <span class=\"string\">'记得回来哦'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTitleHandler</span>(<span class=\"params\">visibilityState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = visibilityState === <span class=\"string\">'hidden'</span> ? titleBlur : titleFocus;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"visibilitychange\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  toggleTitleHandler(<span class=\"built_in\">document</span>.visibilityState);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>  此 API 存在兼容性问题，支持 IE10+ </p>\n<p>  推荐阅读： <a href=\"http://www.zhangxinxu.com/wordpress/?p=2790\" target=\"_blank\" rel=\"noopener\">Page Visibility(页面可见性) API介绍、微拓展 - 张鑫旭</a>（PS：此处献上我的膝盖）</p>\n<p>  最后，细心的同学可能会发现，本站也是有此效果的哦~</p>\n"},{"title":"trim 方法","abbrlink":"bf9063ac","date":"2017-11-25T13:31:23.000Z","_content":"\n## 前言\n\n> `trim()` 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。\n\n删除字符串两端的空白字符可以说是非常常见的需求\n<!--more-->\n我通常用的是 jQuery 提供的 `$.trim()` 方法，但其实原生 JavaScript 已经提供了 `trim()` 方法，IE9 以上浏览器已经支持此方法，而且 [MDN 文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim) 也已经提供了兼容旧环境的方法。\n\nso，以后并不一定非要依赖第三方库，完全可以使用原生 tirm() 方法，或者自定义此方法的兼容写法。\n\n## 通过正则简单实现：\n\n```js\nif(!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^\\s+|\\s+$/g,'');\n  };\n}\nif(!String.prototype.trimLeft) {\n  String.prototype.trimLeft = function () {\n    return this.replace(/^\\s+/,'');\n  };\n}\nif(!String.prototype.trimRight) {\n  String.prototype.trimRight = function () {\n    return this.replace(/\\s+$/,'');\n  };\n}\n```\n用到的正则：\n1. `\\s` 匹配任何空白字符\n2. `+` 匹配至少 1 个元字符\n3. `^` 字符串必须以指定的字符开始\n4. `$` 字符串必须以指定的字符结束\n5. `|` 或者\n6. `g` 全局匹配\n\n## more：\n+ 更多的实现方式参考：[JavaScript trim函数大赏 - 司徒正美](http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html)\n+ MDN 文档：[String.prototype.trim() - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)","source":"_posts/js/trim 方法.md","raw":"---\ntitle: trim 方法\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: bf9063ac\ndate: 2017-11-25 21:31:23\n---\n\n## 前言\n\n> `trim()` 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。\n\n删除字符串两端的空白字符可以说是非常常见的需求\n<!--more-->\n我通常用的是 jQuery 提供的 `$.trim()` 方法，但其实原生 JavaScript 已经提供了 `trim()` 方法，IE9 以上浏览器已经支持此方法，而且 [MDN 文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim) 也已经提供了兼容旧环境的方法。\n\nso，以后并不一定非要依赖第三方库，完全可以使用原生 tirm() 方法，或者自定义此方法的兼容写法。\n\n## 通过正则简单实现：\n\n```js\nif(!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^\\s+|\\s+$/g,'');\n  };\n}\nif(!String.prototype.trimLeft) {\n  String.prototype.trimLeft = function () {\n    return this.replace(/^\\s+/,'');\n  };\n}\nif(!String.prototype.trimRight) {\n  String.prototype.trimRight = function () {\n    return this.replace(/\\s+$/,'');\n  };\n}\n```\n用到的正则：\n1. `\\s` 匹配任何空白字符\n2. `+` 匹配至少 1 个元字符\n3. `^` 字符串必须以指定的字符开始\n4. `$` 字符串必须以指定的字符结束\n5. `|` 或者\n6. `g` 全局匹配\n\n## more：\n+ 更多的实现方式参考：[JavaScript trim函数大赏 - 司徒正美](http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html)\n+ MDN 文档：[String.prototype.trim() - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)","slug":"js/trim 方法","published":1,"updated":"2018-01-07T14:44:29.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdr0001p0gqm8akqxxcb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p><code>trim()</code> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。</p>\n</blockquote>\n<p>删除字符串两端的空白字符可以说是非常常见的需求<br><a id=\"more\"></a><br>我通常用的是 jQuery 提供的 <code>$.trim()</code> 方法，但其实原生 JavaScript 已经提供了 <code>trim()</code> 方法，IE9 以上浏览器已经支持此方法，而且 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener\">MDN 文档</a> 也已经提供了兼容旧环境的方法。</p>\n<p>so，以后并不一定非要依赖第三方库，完全可以使用原生 tirm() 方法，或者自定义此方法的兼容写法。</p>\n<h2 id=\"通过正则简单实现：\"><a href=\"#通过正则简单实现：\" class=\"headerlink\" title=\"通过正则简单实现：\"></a>通过正则简单实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trim) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trimLeft) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trimLeft = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+/</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trimRight) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trimRight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\s+$/</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用到的正则：</p>\n<ol>\n<li><code>\\s</code> 匹配任何空白字符</li>\n<li><code>+</code> 匹配至少 1 个元字符</li>\n<li><code>^</code> 字符串必须以指定的字符开始</li>\n<li><code>$</code> 字符串必须以指定的字符结束</li>\n<li><code>|</code> 或者</li>\n<li><code>g</code> 全局匹配</li>\n</ol>\n<h2 id=\"more：\"><a href=\"#more：\" class=\"headerlink\" title=\"more：\"></a>more：</h2><ul>\n<li>更多的实现方式参考：<a href=\"http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html\" target=\"_blank\" rel=\"noopener\">JavaScript trim函数大赏 - 司徒正美</a></li>\n<li>MDN 文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener\">String.prototype.trim() - MDN</a></li>\n</ul>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p><code>trim()</code> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。</p>\n</blockquote>\n<p>删除字符串两端的空白字符可以说是非常常见的需求<br>","more":"<br>我通常用的是 jQuery 提供的 <code>$.trim()</code> 方法，但其实原生 JavaScript 已经提供了 <code>trim()</code> 方法，IE9 以上浏览器已经支持此方法，而且 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener\">MDN 文档</a> 也已经提供了兼容旧环境的方法。</p>\n<p>so，以后并不一定非要依赖第三方库，完全可以使用原生 tirm() 方法，或者自定义此方法的兼容写法。</p>\n<h2 id=\"通过正则简单实现：\"><a href=\"#通过正则简单实现：\" class=\"headerlink\" title=\"通过正则简单实现：\"></a>通过正则简单实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trim) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trimLeft) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trimLeft = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+/</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">String</span>.prototype.trimRight) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span>.prototype.trimRight = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/\\s+$/</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用到的正则：</p>\n<ol>\n<li><code>\\s</code> 匹配任何空白字符</li>\n<li><code>+</code> 匹配至少 1 个元字符</li>\n<li><code>^</code> 字符串必须以指定的字符开始</li>\n<li><code>$</code> 字符串必须以指定的字符结束</li>\n<li><code>|</code> 或者</li>\n<li><code>g</code> 全局匹配</li>\n</ol>\n<h2 id=\"more：\"><a href=\"#more：\" class=\"headerlink\" title=\"more：\"></a>more：</h2><ul>\n<li>更多的实现方式参考：<a href=\"http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html\" target=\"_blank\" rel=\"noopener\">JavaScript trim函数大赏 - 司徒正美</a></li>\n<li>MDN 文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" target=\"_blank\" rel=\"noopener\">String.prototype.trim() - MDN</a></li>\n</ul>"},{"title":"好用工具集合","abbrlink":"2956e245","date":"2017-11-24T12:20:53.000Z","updated":"2017-12-30T02:20:33.000Z","_content":"\n> 工欲善其事必先利其器\n> 轻功不代表武功，但是速度，决定了你和我的距离\n<!--more-->\n\n#### qimage-win - windows 版本 markdown 一键贴图工具\n  - 地址：https://github.com/jiwenxing/qiniu-image-tool-win/releases\n  - 简介：windows版本markdown一键贴图工具，支持本地文件、截图、网络图片一键上传七牛云并返回图片引用，让markdown中贴图变成一种享受。\n  - preview：\n  ![](https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true)\n\n#### cmder - 程序员的命令行神器（windows 平台）\n  - 地址：http://cmder.net/\n  - 简介：windows 平台最好用的命令行\n    + 可代替 `cmd` 和 `powershell`\n    + 自带 `Git`\n    + 支持 `ssh` 协议，可作为虚拟终端登录服务器\n    + 支持部分 Linux 命令\n  - preview：\n  ![](http://cmder.net/img/main.jpg)\n\n#### clover - 为您的 Windows Explorer 插上翅膀！\n  - 地址：http://cn.ejie.me/\n  - 简介：Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。\n  - preview：\n  ![](http://cn.ejie.me/images/clover.jpg)\n\n#### everything - 速度最快的的文件搜索工具\n  - 地址：http://www.voidtools.com/\n  - 简介：Locate files and folders by name instantly.\n  - preview：\n  ![](http://www.voidtools.com/support/everything/Everything.Search.Window.png)\n\n#### FastStone Capture\n  - 地址：https://faststone-capture.en.softonic.com/\n  - 简介：Image viewer, editor and screen capture\n  - preview：\n  ![](https://images.sftcdn.net/images/t_optimized,f_auto/p/2d6fec86-9a63-11e6-9800-00163ec9f5fa/3887784174/faststone-capture-screenshot.jpg)\n\n#### autohotkey - win 下效率神器\n  - 地址：https://autohotkey.com/\n  - 简介：Powerful. Easy to learn. The ultimate automation scripting language for Windows.\n\n#### BaiduPanDownloadWinform - 百度网盘不限速下载工具\n  - 地址：https://github.com/Accelerider/BaiduPanDownloadWinform/releases\n  - 简介：百度网盘不限速下载工具\n  - preview：\n  ![](http://www.xz7.com/up/2017-11/2017112309442752887.gif)\n\n#### TeamViewer - 远程支持、远程访问、在线协作和会议\n  - 地址：https://www.teamviewer.com/zhCN/\n  - 简介：远程桌面控制，个人免费。 如果您回到家后想连接控制在学校或公司里自己的电脑，TeamViewer无疑就是最佳的解决方案\n  - preview：\n  ![](http://src.onlinedown.net/d/file/p/2016-09-26/900188817cb50d4f2633d3215a50da21.jpg)\n  \n#### Snipaste - 开发了三年的截图工具，但不只是截图\n  - 地址: https://zh.snipaste.com/download.html\n  - 简介: Snipaste，顾名思义， Snip + Paste，截图 + 贴图。使用参考：[开发了三年的截图工具，但不只是截图](https://www.v2ex.com/t/295433?p=1)\n  - preview：\n  ![](http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg)\n  ![](http://ww2.sinaimg.cn/large/840a8430jw1f68ocr946wg20qv0hiwsz.jpg)\n\n\n#### Listary - Windows 文件浏览增强工具\n  - 地址: http://www.listary.com/\n  - 简介: 笨拙的文件管理系统是否减慢了你的工作流程？那就是用 Listary 吧！\n  - preview：\n  ![](http://img1.appinn.com/2011/11/1-20111107-162041.png)\n\n\n#### 未完待续……\n","source":"_posts/tool/awesome-tools.md","raw":"---\ntitle: 好用工具集合\ntags:\n  - tool\ncategories: tool\nabbrlink: '2956e245'\ndate: 2017-11-24 20:20:53\nupdated: 2017-12-30 10:20:33\n---\n\n> 工欲善其事必先利其器\n> 轻功不代表武功，但是速度，决定了你和我的距离\n<!--more-->\n\n#### qimage-win - windows 版本 markdown 一键贴图工具\n  - 地址：https://github.com/jiwenxing/qiniu-image-tool-win/releases\n  - 简介：windows版本markdown一键贴图工具，支持本地文件、截图、网络图片一键上传七牛云并返回图片引用，让markdown中贴图变成一种享受。\n  - preview：\n  ![](https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true)\n\n#### cmder - 程序员的命令行神器（windows 平台）\n  - 地址：http://cmder.net/\n  - 简介：windows 平台最好用的命令行\n    + 可代替 `cmd` 和 `powershell`\n    + 自带 `Git`\n    + 支持 `ssh` 协议，可作为虚拟终端登录服务器\n    + 支持部分 Linux 命令\n  - preview：\n  ![](http://cmder.net/img/main.jpg)\n\n#### clover - 为您的 Windows Explorer 插上翅膀！\n  - 地址：http://cn.ejie.me/\n  - 简介：Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。\n  - preview：\n  ![](http://cn.ejie.me/images/clover.jpg)\n\n#### everything - 速度最快的的文件搜索工具\n  - 地址：http://www.voidtools.com/\n  - 简介：Locate files and folders by name instantly.\n  - preview：\n  ![](http://www.voidtools.com/support/everything/Everything.Search.Window.png)\n\n#### FastStone Capture\n  - 地址：https://faststone-capture.en.softonic.com/\n  - 简介：Image viewer, editor and screen capture\n  - preview：\n  ![](https://images.sftcdn.net/images/t_optimized,f_auto/p/2d6fec86-9a63-11e6-9800-00163ec9f5fa/3887784174/faststone-capture-screenshot.jpg)\n\n#### autohotkey - win 下效率神器\n  - 地址：https://autohotkey.com/\n  - 简介：Powerful. Easy to learn. The ultimate automation scripting language for Windows.\n\n#### BaiduPanDownloadWinform - 百度网盘不限速下载工具\n  - 地址：https://github.com/Accelerider/BaiduPanDownloadWinform/releases\n  - 简介：百度网盘不限速下载工具\n  - preview：\n  ![](http://www.xz7.com/up/2017-11/2017112309442752887.gif)\n\n#### TeamViewer - 远程支持、远程访问、在线协作和会议\n  - 地址：https://www.teamviewer.com/zhCN/\n  - 简介：远程桌面控制，个人免费。 如果您回到家后想连接控制在学校或公司里自己的电脑，TeamViewer无疑就是最佳的解决方案\n  - preview：\n  ![](http://src.onlinedown.net/d/file/p/2016-09-26/900188817cb50d4f2633d3215a50da21.jpg)\n  \n#### Snipaste - 开发了三年的截图工具，但不只是截图\n  - 地址: https://zh.snipaste.com/download.html\n  - 简介: Snipaste，顾名思义， Snip + Paste，截图 + 贴图。使用参考：[开发了三年的截图工具，但不只是截图](https://www.v2ex.com/t/295433?p=1)\n  - preview：\n  ![](http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg)\n  ![](http://ww2.sinaimg.cn/large/840a8430jw1f68ocr946wg20qv0hiwsz.jpg)\n\n\n#### Listary - Windows 文件浏览增强工具\n  - 地址: http://www.listary.com/\n  - 简介: 笨拙的文件管理系统是否减慢了你的工作流程？那就是用 Listary 吧！\n  - preview：\n  ![](http://img1.appinn.com/2011/11/1-20111107-162041.png)\n\n\n#### 未完待续……\n","slug":"tool/awesome-tools","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdr5001r0gqmng0kfmyi","content":"<blockquote>\n<p>工欲善其事必先利其器<br>轻功不代表武功，但是速度，决定了你和我的距离<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"qimage-win-windows-版本-markdown-一键贴图工具\"><a href=\"#qimage-win-windows-版本-markdown-一键贴图工具\" class=\"headerlink\" title=\"qimage-win - windows 版本 markdown 一键贴图工具\"></a>qimage-win - windows 版本 markdown 一键贴图工具</h4><ul>\n<li>地址：<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/jiwenxing/qiniu-image-tool-win/releases</a></li>\n<li>简介：windows版本markdown一键贴图工具，支持本地文件、截图、网络图片一键上传七牛云并返回图片引用，让markdown中贴图变成一种享受。</li>\n<li>preview：<br><img src=\"https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true\" alt=\"\"></li>\n</ul>\n<h4 id=\"cmder-程序员的命令行神器（windows-平台）\"><a href=\"#cmder-程序员的命令行神器（windows-平台）\" class=\"headerlink\" title=\"cmder - 程序员的命令行神器（windows 平台）\"></a>cmder - 程序员的命令行神器（windows 平台）</h4><ul>\n<li>地址：<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">http://cmder.net/</a></li>\n<li>简介：windows 平台最好用的命令行<ul>\n<li>可代替 <code>cmd</code> 和 <code>powershell</code></li>\n<li>自带 <code>Git</code></li>\n<li>支持 <code>ssh</code> 协议，可作为虚拟终端登录服务器</li>\n<li>支持部分 Linux 命令</li>\n</ul>\n</li>\n<li>preview：<br><img src=\"http://cmder.net/img/main.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"clover-为您的-Windows-Explorer-插上翅膀！\"><a href=\"#clover-为您的-Windows-Explorer-插上翅膀！\" class=\"headerlink\" title=\"clover - 为您的 Windows Explorer 插上翅膀！\"></a>clover - 为您的 Windows Explorer 插上翅膀！</h4><ul>\n<li>地址：<a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">http://cn.ejie.me/</a></li>\n<li>简介：Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</li>\n<li>preview：<br><img src=\"http://cn.ejie.me/images/clover.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"everything-速度最快的的文件搜索工具\"><a href=\"#everything-速度最快的的文件搜索工具\" class=\"headerlink\" title=\"everything - 速度最快的的文件搜索工具\"></a>everything - 速度最快的的文件搜索工具</h4><ul>\n<li>地址：<a href=\"http://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">http://www.voidtools.com/</a></li>\n<li>简介：Locate files and folders by name instantly.</li>\n<li>preview：<br><img src=\"http://www.voidtools.com/support/everything/Everything.Search.Window.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"FastStone-Capture\"><a href=\"#FastStone-Capture\" class=\"headerlink\" title=\"FastStone Capture\"></a>FastStone Capture</h4><ul>\n<li>地址：<a href=\"https://faststone-capture.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://faststone-capture.en.softonic.com/</a></li>\n<li>简介：Image viewer, editor and screen capture</li>\n<li>preview：<br><img src=\"https://images.sftcdn.net/images/t_optimized,f_auto/p/2d6fec86-9a63-11e6-9800-00163ec9f5fa/3887784174/faststone-capture-screenshot.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"autohotkey-win-下效率神器\"><a href=\"#autohotkey-win-下效率神器\" class=\"headerlink\" title=\"autohotkey - win 下效率神器\"></a>autohotkey - win 下效率神器</h4><ul>\n<li>地址：<a href=\"https://autohotkey.com/\" target=\"_blank\" rel=\"noopener\">https://autohotkey.com/</a></li>\n<li>简介：Powerful. Easy to learn. The ultimate automation scripting language for Windows.</li>\n</ul>\n<h4 id=\"BaiduPanDownloadWinform-百度网盘不限速下载工具\"><a href=\"#BaiduPanDownloadWinform-百度网盘不限速下载工具\" class=\"headerlink\" title=\"BaiduPanDownloadWinform - 百度网盘不限速下载工具\"></a>BaiduPanDownloadWinform - 百度网盘不限速下载工具</h4><ul>\n<li>地址：<a href=\"https://github.com/Accelerider/BaiduPanDownloadWinform/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Accelerider/BaiduPanDownloadWinform/releases</a></li>\n<li>简介：百度网盘不限速下载工具</li>\n<li>preview：<br><img src=\"http://www.xz7.com/up/2017-11/2017112309442752887.gif\" alt=\"\"></li>\n</ul>\n<h4 id=\"TeamViewer-远程支持、远程访问、在线协作和会议\"><a href=\"#TeamViewer-远程支持、远程访问、在线协作和会议\" class=\"headerlink\" title=\"TeamViewer - 远程支持、远程访问、在线协作和会议\"></a>TeamViewer - 远程支持、远程访问、在线协作和会议</h4><ul>\n<li>地址：<a href=\"https://www.teamviewer.com/zhCN/\" target=\"_blank\" rel=\"noopener\">https://www.teamviewer.com/zhCN/</a></li>\n<li>简介：远程桌面控制，个人免费。 如果您回到家后想连接控制在学校或公司里自己的电脑，TeamViewer无疑就是最佳的解决方案</li>\n<li>preview：<br><img src=\"http://src.onlinedown.net/d/file/p/2016-09-26/900188817cb50d4f2633d3215a50da21.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Snipaste-开发了三年的截图工具，但不只是截图\"><a href=\"#Snipaste-开发了三年的截图工具，但不只是截图\" class=\"headerlink\" title=\"Snipaste - 开发了三年的截图工具，但不只是截图\"></a>Snipaste - 开发了三年的截图工具，但不只是截图</h4><ul>\n<li>地址: <a href=\"https://zh.snipaste.com/download.html\" target=\"_blank\" rel=\"noopener\">https://zh.snipaste.com/download.html</a></li>\n<li>简介: Snipaste，顾名思义， Snip + Paste，截图 + 贴图。使用参考：<a href=\"https://www.v2ex.com/t/295433?p=1\" target=\"_blank\" rel=\"noopener\">开发了三年的截图工具，但不只是截图</a></li>\n<li>preview：<br><img src=\"http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg\" alt=\"\"><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww2.sinaimg.cn/large/840a8430jw1f68ocr946wg20qv0hiwsz.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h4 id=\"Listary-Windows-文件浏览增强工具\"><a href=\"#Listary-Windows-文件浏览增强工具\" class=\"headerlink\" title=\"Listary - Windows 文件浏览增强工具\"></a>Listary - Windows 文件浏览增强工具</h4><ul>\n<li>地址: <a href=\"http://www.listary.com/\" target=\"_blank\" rel=\"noopener\">http://www.listary.com/</a></li>\n<li>简介: 笨拙的文件管理系统是否减慢了你的工作流程？那就是用 Listary 吧！</li>\n<li>preview：<br><img src=\"http://img1.appinn.com/2011/11/1-20111107-162041.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h4>","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<blockquote>\n<p>工欲善其事必先利其器<br>轻功不代表武功，但是速度，决定了你和我的距离<br>","more":"</p>\n</blockquote>\n<h4 id=\"qimage-win-windows-版本-markdown-一键贴图工具\"><a href=\"#qimage-win-windows-版本-markdown-一键贴图工具\" class=\"headerlink\" title=\"qimage-win - windows 版本 markdown 一键贴图工具\"></a>qimage-win - windows 版本 markdown 一键贴图工具</h4><ul>\n<li>地址：<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/jiwenxing/qiniu-image-tool-win/releases</a></li>\n<li>简介：windows版本markdown一键贴图工具，支持本地文件、截图、网络图片一键上传七牛云并返回图片引用，让markdown中贴图变成一种享受。</li>\n<li>preview：<br><img src=\"https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true\" alt=\"\"></li>\n</ul>\n<h4 id=\"cmder-程序员的命令行神器（windows-平台）\"><a href=\"#cmder-程序员的命令行神器（windows-平台）\" class=\"headerlink\" title=\"cmder - 程序员的命令行神器（windows 平台）\"></a>cmder - 程序员的命令行神器（windows 平台）</h4><ul>\n<li>地址：<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">http://cmder.net/</a></li>\n<li>简介：windows 平台最好用的命令行<ul>\n<li>可代替 <code>cmd</code> 和 <code>powershell</code></li>\n<li>自带 <code>Git</code></li>\n<li>支持 <code>ssh</code> 协议，可作为虚拟终端登录服务器</li>\n<li>支持部分 Linux 命令</li>\n</ul>\n</li>\n<li>preview：<br><img src=\"http://cmder.net/img/main.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"clover-为您的-Windows-Explorer-插上翅膀！\"><a href=\"#clover-为您的-Windows-Explorer-插上翅膀！\" class=\"headerlink\" title=\"clover - 为您的 Windows Explorer 插上翅膀！\"></a>clover - 为您的 Windows Explorer 插上翅膀！</h4><ul>\n<li>地址：<a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">http://cn.ejie.me/</a></li>\n<li>简介：Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</li>\n<li>preview：<br><img src=\"http://cn.ejie.me/images/clover.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"everything-速度最快的的文件搜索工具\"><a href=\"#everything-速度最快的的文件搜索工具\" class=\"headerlink\" title=\"everything - 速度最快的的文件搜索工具\"></a>everything - 速度最快的的文件搜索工具</h4><ul>\n<li>地址：<a href=\"http://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">http://www.voidtools.com/</a></li>\n<li>简介：Locate files and folders by name instantly.</li>\n<li>preview：<br><img src=\"http://www.voidtools.com/support/everything/Everything.Search.Window.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"FastStone-Capture\"><a href=\"#FastStone-Capture\" class=\"headerlink\" title=\"FastStone Capture\"></a>FastStone Capture</h4><ul>\n<li>地址：<a href=\"https://faststone-capture.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://faststone-capture.en.softonic.com/</a></li>\n<li>简介：Image viewer, editor and screen capture</li>\n<li>preview：<br><img src=\"https://images.sftcdn.net/images/t_optimized,f_auto/p/2d6fec86-9a63-11e6-9800-00163ec9f5fa/3887784174/faststone-capture-screenshot.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"autohotkey-win-下效率神器\"><a href=\"#autohotkey-win-下效率神器\" class=\"headerlink\" title=\"autohotkey - win 下效率神器\"></a>autohotkey - win 下效率神器</h4><ul>\n<li>地址：<a href=\"https://autohotkey.com/\" target=\"_blank\" rel=\"noopener\">https://autohotkey.com/</a></li>\n<li>简介：Powerful. Easy to learn. The ultimate automation scripting language for Windows.</li>\n</ul>\n<h4 id=\"BaiduPanDownloadWinform-百度网盘不限速下载工具\"><a href=\"#BaiduPanDownloadWinform-百度网盘不限速下载工具\" class=\"headerlink\" title=\"BaiduPanDownloadWinform - 百度网盘不限速下载工具\"></a>BaiduPanDownloadWinform - 百度网盘不限速下载工具</h4><ul>\n<li>地址：<a href=\"https://github.com/Accelerider/BaiduPanDownloadWinform/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Accelerider/BaiduPanDownloadWinform/releases</a></li>\n<li>简介：百度网盘不限速下载工具</li>\n<li>preview：<br><img src=\"http://www.xz7.com/up/2017-11/2017112309442752887.gif\" alt=\"\"></li>\n</ul>\n<h4 id=\"TeamViewer-远程支持、远程访问、在线协作和会议\"><a href=\"#TeamViewer-远程支持、远程访问、在线协作和会议\" class=\"headerlink\" title=\"TeamViewer - 远程支持、远程访问、在线协作和会议\"></a>TeamViewer - 远程支持、远程访问、在线协作和会议</h4><ul>\n<li>地址：<a href=\"https://www.teamviewer.com/zhCN/\" target=\"_blank\" rel=\"noopener\">https://www.teamviewer.com/zhCN/</a></li>\n<li>简介：远程桌面控制，个人免费。 如果您回到家后想连接控制在学校或公司里自己的电脑，TeamViewer无疑就是最佳的解决方案</li>\n<li>preview：<br><img src=\"http://src.onlinedown.net/d/file/p/2016-09-26/900188817cb50d4f2633d3215a50da21.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Snipaste-开发了三年的截图工具，但不只是截图\"><a href=\"#Snipaste-开发了三年的截图工具，但不只是截图\" class=\"headerlink\" title=\"Snipaste - 开发了三年的截图工具，但不只是截图\"></a>Snipaste - 开发了三年的截图工具，但不只是截图</h4><ul>\n<li>地址: <a href=\"https://zh.snipaste.com/download.html\" target=\"_blank\" rel=\"noopener\">https://zh.snipaste.com/download.html</a></li>\n<li>简介: Snipaste，顾名思义， Snip + Paste，截图 + 贴图。使用参考：<a href=\"https://www.v2ex.com/t/295433?p=1\" target=\"_blank\" rel=\"noopener\">开发了三年的截图工具，但不只是截图</a></li>\n<li>preview：<br><img src=\"http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg\" alt=\"\"><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww2.sinaimg.cn/large/840a8430jw1f68ocr946wg20qv0hiwsz.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h4 id=\"Listary-Windows-文件浏览增强工具\"><a href=\"#Listary-Windows-文件浏览增强工具\" class=\"headerlink\" title=\"Listary - Windows 文件浏览增强工具\"></a>Listary - Windows 文件浏览增强工具</h4><ul>\n<li>地址: <a href=\"http://www.listary.com/\" target=\"_blank\" rel=\"noopener\">http://www.listary.com/</a></li>\n<li>简介: 笨拙的文件管理系统是否减慢了你的工作流程？那就是用 Listary 吧！</li>\n<li>preview：<br><img src=\"http://img1.appinn.com/2011/11/1-20111107-162041.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h4>"},{"title":"近期用到的 jQuery 方法整理","abbrlink":"347a9caf","date":"2017-05-27T14:22:53.000Z","_content":"\n好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。\n<!--more-->\n\n## 一、选择器部分\n \n1. `$(\"input[type='radio']\")` 选择不同 `type` 的 `input`\n \n2. `$(\"input[type='radio']:checked\")` 选择被选中的 `radio`\n \n3. 选择父类元素\n    + `$selector.parent('td')` 仅限于直接父类元素 `parent`\n    + `$(this).parents('.content')` 只要是父类元素即可，能向父级多级查找 `parents`\n \n4. 选择子类元素\n    + `$ele.children('p.tip');`\n    + `$this.siblings('.content').find('textarea')`\n \n5. 选择兄弟元素 `$selector.parent('td').siblings('.title')`\n \n \n## 二、插入和删除元素\n \n### 1. 插入\n \n1. 在被选元素的结尾插入内容\n    > `$ele.append(\"<p class='tip red'> &nbsp;&nbsp;请选择</p>\");`\n \n2. 在被选元素的开头插入内容\n    > `$(\".must\").prepend(\"<span class='red star'>*&nbsp;</span>\");`\n \n3. 在被选元素之前插入内容\n    > `$('.item:eq(2)').before($('.milestone'));`\n \n4. 在被选元素之后插入内容\n    > `$('.item:eq(2)').after($('.milestone'));`\n \n### 2. 删除\n \n1. `remove()` 删除被选元素（及其子元素），可传入参数（选择器）作为过滤条件\n    > `$tip.remove()` 或 `$(\"p\").remove(\".italic\");`\n \n2. `empty()` 删除被选元素的子元素\n    > `$tip.empty()`\n \n## 三、设置元素样式\n \n## 四、动画\n \n### 1. `animate` 动画使用固定值\n \n```js\n$dialog.animate({\n    top: \"60px\"\n})\n```\n \n### 2. `animate` 动画使用相对值\n \n```js\n$dialog.animate({\n    top: \"-=60px\"\n})\n```\n \n### 3. 判断当前是否有动画尚未执行完毕\n+ 如果正在执行动画返回 `true`\n    > `$(\".box\").is(\":animated\")`\n \n \n## 五、获取和设置元素的值\n \n1. 获取文本域的输入的内容\n    > `var $val = $this.siblings('.content').find('textarea').val();`\n \n2. 获取属性值\n    > `var id = $(this).parents('.item').attr('id');`\n \n## 六、其他的一些方法\n \n1. 清空被选中的 `radio`\n    > `$(\"input[type='radio']\").removeAttr('checked');`\n \n2. 判断 `radio` 是否被选中\n    > `$(this).is(\":checked\")`\n \n3. 判断元素是否具有指定的类名\n    > `$(this).hasClass(\"bad\")`\n \n4. `jQuery` 对象有 `length` 属性，该属性表示选中的 `DOM` 元素的个数\n    > `if($radiosChecked.length != 2) {}`\n \n5. 判断选中元素是否为 `display:none` 状态\n    > `if(!$(this).is(\":hidden\")) {}`\n \n6. 序列化表单数据，用于 `ajax` 提交表单数据\n    > `$('form').serialize()`\n \n7. 输入框失去焦点\n    > `$('input').blur(function () {});`\n ","source":"_posts/js/近期用到的-jQuery-方法整理.md","raw":"---\ntitle: 近期用到的 jQuery 方法整理\ntags:\n  - js\n  - jQuery\ncategories: JavaScript\nabbrlink: 347a9caf\ndate: 2017-05-27 22:22:53\n---\n\n好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。\n<!--more-->\n\n## 一、选择器部分\n \n1. `$(\"input[type='radio']\")` 选择不同 `type` 的 `input`\n \n2. `$(\"input[type='radio']:checked\")` 选择被选中的 `radio`\n \n3. 选择父类元素\n    + `$selector.parent('td')` 仅限于直接父类元素 `parent`\n    + `$(this).parents('.content')` 只要是父类元素即可，能向父级多级查找 `parents`\n \n4. 选择子类元素\n    + `$ele.children('p.tip');`\n    + `$this.siblings('.content').find('textarea')`\n \n5. 选择兄弟元素 `$selector.parent('td').siblings('.title')`\n \n \n## 二、插入和删除元素\n \n### 1. 插入\n \n1. 在被选元素的结尾插入内容\n    > `$ele.append(\"<p class='tip red'> &nbsp;&nbsp;请选择</p>\");`\n \n2. 在被选元素的开头插入内容\n    > `$(\".must\").prepend(\"<span class='red star'>*&nbsp;</span>\");`\n \n3. 在被选元素之前插入内容\n    > `$('.item:eq(2)').before($('.milestone'));`\n \n4. 在被选元素之后插入内容\n    > `$('.item:eq(2)').after($('.milestone'));`\n \n### 2. 删除\n \n1. `remove()` 删除被选元素（及其子元素），可传入参数（选择器）作为过滤条件\n    > `$tip.remove()` 或 `$(\"p\").remove(\".italic\");`\n \n2. `empty()` 删除被选元素的子元素\n    > `$tip.empty()`\n \n## 三、设置元素样式\n \n## 四、动画\n \n### 1. `animate` 动画使用固定值\n \n```js\n$dialog.animate({\n    top: \"60px\"\n})\n```\n \n### 2. `animate` 动画使用相对值\n \n```js\n$dialog.animate({\n    top: \"-=60px\"\n})\n```\n \n### 3. 判断当前是否有动画尚未执行完毕\n+ 如果正在执行动画返回 `true`\n    > `$(\".box\").is(\":animated\")`\n \n \n## 五、获取和设置元素的值\n \n1. 获取文本域的输入的内容\n    > `var $val = $this.siblings('.content').find('textarea').val();`\n \n2. 获取属性值\n    > `var id = $(this).parents('.item').attr('id');`\n \n## 六、其他的一些方法\n \n1. 清空被选中的 `radio`\n    > `$(\"input[type='radio']\").removeAttr('checked');`\n \n2. 判断 `radio` 是否被选中\n    > `$(this).is(\":checked\")`\n \n3. 判断元素是否具有指定的类名\n    > `$(this).hasClass(\"bad\")`\n \n4. `jQuery` 对象有 `length` 属性，该属性表示选中的 `DOM` 元素的个数\n    > `if($radiosChecked.length != 2) {}`\n \n5. 判断选中元素是否为 `display:none` 状态\n    > `if(!$(this).is(\":hidden\")) {}`\n \n6. 序列化表单数据，用于 `ajax` 提交表单数据\n    > `$('form').serialize()`\n \n7. 输入框失去焦点\n    > `$('input').blur(function () {});`\n ","slug":"js/近期用到的-jQuery-方法整理","published":1,"updated":"2018-01-07T14:44:29.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdr8001v0gqmxb0qf9ov","content":"<p>好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。<br><a id=\"more\"></a></p>\n<h2 id=\"一、选择器部分\"><a href=\"#一、选择器部分\" class=\"headerlink\" title=\"一、选择器部分\"></a>一、选择器部分</h2><ol>\n<li><p><code>$(&quot;input[type=&#39;radio&#39;]&quot;)</code> 选择不同 <code>type</code> 的 <code>input</code></p>\n</li>\n<li><p><code>$(&quot;input[type=&#39;radio&#39;]:checked&quot;)</code> 选择被选中的 <code>radio</code></p>\n</li>\n<li><p>选择父类元素</p>\n<ul>\n<li><code>$selector.parent(&#39;td&#39;)</code> 仅限于直接父类元素 <code>parent</code></li>\n<li><code>$(this).parents(&#39;.content&#39;)</code> 只要是父类元素即可，能向父级多级查找 <code>parents</code></li>\n</ul>\n</li>\n<li><p>选择子类元素</p>\n<ul>\n<li><code>$ele.children(&#39;p.tip&#39;);</code></li>\n<li><code>$this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;)</code></li>\n</ul>\n</li>\n<li><p>选择兄弟元素 <code>$selector.parent(&#39;td&#39;).siblings(&#39;.title&#39;)</code></p>\n</li>\n</ol>\n<h2 id=\"二、插入和删除元素\"><a href=\"#二、插入和删除元素\" class=\"headerlink\" title=\"二、插入和删除元素\"></a>二、插入和删除元素</h2><h3 id=\"1-插入\"><a href=\"#1-插入\" class=\"headerlink\" title=\"1. 插入\"></a>1. 插入</h3><ol>\n<li><p>在被选元素的结尾插入内容</p>\n<blockquote>\n<p><code>$ele.append(&quot;&lt;p class=&#39;tip red&#39;&gt; &amp;nbsp;&amp;nbsp;请选择&lt;/p&gt;&quot;);</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素的开头插入内容</p>\n<blockquote>\n<p><code>$(&quot;.must&quot;).prepend(&quot;&lt;span class=&#39;red star&#39;&gt;*&amp;nbsp;&lt;/span&gt;&quot;);</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素之前插入内容</p>\n<blockquote>\n<p><code>$(&#39;.item:eq(2)&#39;).before($(&#39;.milestone&#39;));</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素之后插入内容</p>\n<blockquote>\n<p><code>$(&#39;.item:eq(2)&#39;).after($(&#39;.milestone&#39;));</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2-删除\"><a href=\"#2-删除\" class=\"headerlink\" title=\"2. 删除\"></a>2. 删除</h3><ol>\n<li><p><code>remove()</code> 删除被选元素（及其子元素），可传入参数（选择器）作为过滤条件</p>\n<blockquote>\n<p><code>$tip.remove()</code> 或 <code>$(&quot;p&quot;).remove(&quot;.italic&quot;);</code></p>\n</blockquote>\n</li>\n<li><p><code>empty()</code> 删除被选元素的子元素</p>\n<blockquote>\n<p><code>$tip.empty()</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"三、设置元素样式\"><a href=\"#三、设置元素样式\" class=\"headerlink\" title=\"三、设置元素样式\"></a>三、设置元素样式</h2><h2 id=\"四、动画\"><a href=\"#四、动画\" class=\"headerlink\" title=\"四、动画\"></a>四、动画</h2><h3 id=\"1-animate-动画使用固定值\"><a href=\"#1-animate-动画使用固定值\" class=\"headerlink\" title=\"1. animate 动画使用固定值\"></a>1. <code>animate</code> 动画使用固定值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dialog.animate(&#123;</span><br><span class=\"line\">    top: <span class=\"string\">\"60px\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-animate-动画使用相对值\"><a href=\"#2-animate-动画使用相对值\" class=\"headerlink\" title=\"2. animate 动画使用相对值\"></a>2. <code>animate</code> 动画使用相对值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dialog.animate(&#123;</span><br><span class=\"line\">    top: <span class=\"string\">\"-=60px\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-判断当前是否有动画尚未执行完毕\"><a href=\"#3-判断当前是否有动画尚未执行完毕\" class=\"headerlink\" title=\"3. 判断当前是否有动画尚未执行完毕\"></a>3. 判断当前是否有动画尚未执行完毕</h3><ul>\n<li>如果正在执行动画返回 <code>true</code><blockquote>\n<p><code>$(&quot;.box&quot;).is(&quot;:animated&quot;)</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"五、获取和设置元素的值\"><a href=\"#五、获取和设置元素的值\" class=\"headerlink\" title=\"五、获取和设置元素的值\"></a>五、获取和设置元素的值</h2><ol>\n<li><p>获取文本域的输入的内容</p>\n<blockquote>\n<p><code>var $val = $this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;).val();</code></p>\n</blockquote>\n</li>\n<li><p>获取属性值</p>\n<blockquote>\n<p><code>var id = $(this).parents(&#39;.item&#39;).attr(&#39;id&#39;);</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"六、其他的一些方法\"><a href=\"#六、其他的一些方法\" class=\"headerlink\" title=\"六、其他的一些方法\"></a>六、其他的一些方法</h2><ol>\n<li><p>清空被选中的 <code>radio</code></p>\n<blockquote>\n<p><code>$(&quot;input[type=&#39;radio&#39;]&quot;).removeAttr(&#39;checked&#39;);</code></p>\n</blockquote>\n</li>\n<li><p>判断 <code>radio</code> 是否被选中</p>\n<blockquote>\n<p><code>$(this).is(&quot;:checked&quot;)</code></p>\n</blockquote>\n</li>\n<li><p>判断元素是否具有指定的类名</p>\n<blockquote>\n<p><code>$(this).hasClass(&quot;bad&quot;)</code></p>\n</blockquote>\n</li>\n<li><p><code>jQuery</code> 对象有 <code>length</code> 属性，该属性表示选中的 <code>DOM</code> 元素的个数</p>\n<blockquote>\n<p><code>if($radiosChecked.length != 2) {}</code></p>\n</blockquote>\n</li>\n<li><p>判断选中元素是否为 <code>display:none</code> 状态</p>\n<blockquote>\n<p><code>if(!$(this).is(&quot;:hidden&quot;)) {}</code></p>\n</blockquote>\n</li>\n<li><p>序列化表单数据，用于 <code>ajax</code> 提交表单数据</p>\n<blockquote>\n<p><code>$(&#39;form&#39;).serialize()</code></p>\n</blockquote>\n</li>\n<li><p>输入框失去焦点</p>\n<blockquote>\n<p><code>$(&#39;input&#39;).blur(function () {});</code></p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"<p>好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。<br>","more":"</p>\n<h2 id=\"一、选择器部分\"><a href=\"#一、选择器部分\" class=\"headerlink\" title=\"一、选择器部分\"></a>一、选择器部分</h2><ol>\n<li><p><code>$(&quot;input[type=&#39;radio&#39;]&quot;)</code> 选择不同 <code>type</code> 的 <code>input</code></p>\n</li>\n<li><p><code>$(&quot;input[type=&#39;radio&#39;]:checked&quot;)</code> 选择被选中的 <code>radio</code></p>\n</li>\n<li><p>选择父类元素</p>\n<ul>\n<li><code>$selector.parent(&#39;td&#39;)</code> 仅限于直接父类元素 <code>parent</code></li>\n<li><code>$(this).parents(&#39;.content&#39;)</code> 只要是父类元素即可，能向父级多级查找 <code>parents</code></li>\n</ul>\n</li>\n<li><p>选择子类元素</p>\n<ul>\n<li><code>$ele.children(&#39;p.tip&#39;);</code></li>\n<li><code>$this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;)</code></li>\n</ul>\n</li>\n<li><p>选择兄弟元素 <code>$selector.parent(&#39;td&#39;).siblings(&#39;.title&#39;)</code></p>\n</li>\n</ol>\n<h2 id=\"二、插入和删除元素\"><a href=\"#二、插入和删除元素\" class=\"headerlink\" title=\"二、插入和删除元素\"></a>二、插入和删除元素</h2><h3 id=\"1-插入\"><a href=\"#1-插入\" class=\"headerlink\" title=\"1. 插入\"></a>1. 插入</h3><ol>\n<li><p>在被选元素的结尾插入内容</p>\n<blockquote>\n<p><code>$ele.append(&quot;&lt;p class=&#39;tip red&#39;&gt; &amp;nbsp;&amp;nbsp;请选择&lt;/p&gt;&quot;);</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素的开头插入内容</p>\n<blockquote>\n<p><code>$(&quot;.must&quot;).prepend(&quot;&lt;span class=&#39;red star&#39;&gt;*&amp;nbsp;&lt;/span&gt;&quot;);</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素之前插入内容</p>\n<blockquote>\n<p><code>$(&#39;.item:eq(2)&#39;).before($(&#39;.milestone&#39;));</code></p>\n</blockquote>\n</li>\n<li><p>在被选元素之后插入内容</p>\n<blockquote>\n<p><code>$(&#39;.item:eq(2)&#39;).after($(&#39;.milestone&#39;));</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2-删除\"><a href=\"#2-删除\" class=\"headerlink\" title=\"2. 删除\"></a>2. 删除</h3><ol>\n<li><p><code>remove()</code> 删除被选元素（及其子元素），可传入参数（选择器）作为过滤条件</p>\n<blockquote>\n<p><code>$tip.remove()</code> 或 <code>$(&quot;p&quot;).remove(&quot;.italic&quot;);</code></p>\n</blockquote>\n</li>\n<li><p><code>empty()</code> 删除被选元素的子元素</p>\n<blockquote>\n<p><code>$tip.empty()</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"三、设置元素样式\"><a href=\"#三、设置元素样式\" class=\"headerlink\" title=\"三、设置元素样式\"></a>三、设置元素样式</h2><h2 id=\"四、动画\"><a href=\"#四、动画\" class=\"headerlink\" title=\"四、动画\"></a>四、动画</h2><h3 id=\"1-animate-动画使用固定值\"><a href=\"#1-animate-动画使用固定值\" class=\"headerlink\" title=\"1. animate 动画使用固定值\"></a>1. <code>animate</code> 动画使用固定值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dialog.animate(&#123;</span><br><span class=\"line\">    top: <span class=\"string\">\"60px\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-animate-动画使用相对值\"><a href=\"#2-animate-动画使用相对值\" class=\"headerlink\" title=\"2. animate 动画使用相对值\"></a>2. <code>animate</code> 动画使用相对值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dialog.animate(&#123;</span><br><span class=\"line\">    top: <span class=\"string\">\"-=60px\"</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-判断当前是否有动画尚未执行完毕\"><a href=\"#3-判断当前是否有动画尚未执行完毕\" class=\"headerlink\" title=\"3. 判断当前是否有动画尚未执行完毕\"></a>3. 判断当前是否有动画尚未执行完毕</h3><ul>\n<li>如果正在执行动画返回 <code>true</code><blockquote>\n<p><code>$(&quot;.box&quot;).is(&quot;:animated&quot;)</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"五、获取和设置元素的值\"><a href=\"#五、获取和设置元素的值\" class=\"headerlink\" title=\"五、获取和设置元素的值\"></a>五、获取和设置元素的值</h2><ol>\n<li><p>获取文本域的输入的内容</p>\n<blockquote>\n<p><code>var $val = $this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;).val();</code></p>\n</blockquote>\n</li>\n<li><p>获取属性值</p>\n<blockquote>\n<p><code>var id = $(this).parents(&#39;.item&#39;).attr(&#39;id&#39;);</code></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"六、其他的一些方法\"><a href=\"#六、其他的一些方法\" class=\"headerlink\" title=\"六、其他的一些方法\"></a>六、其他的一些方法</h2><ol>\n<li><p>清空被选中的 <code>radio</code></p>\n<blockquote>\n<p><code>$(&quot;input[type=&#39;radio&#39;]&quot;).removeAttr(&#39;checked&#39;);</code></p>\n</blockquote>\n</li>\n<li><p>判断 <code>radio</code> 是否被选中</p>\n<blockquote>\n<p><code>$(this).is(&quot;:checked&quot;)</code></p>\n</blockquote>\n</li>\n<li><p>判断元素是否具有指定的类名</p>\n<blockquote>\n<p><code>$(this).hasClass(&quot;bad&quot;)</code></p>\n</blockquote>\n</li>\n<li><p><code>jQuery</code> 对象有 <code>length</code> 属性，该属性表示选中的 <code>DOM</code> 元素的个数</p>\n<blockquote>\n<p><code>if($radiosChecked.length != 2) {}</code></p>\n</blockquote>\n</li>\n<li><p>判断选中元素是否为 <code>display:none</code> 状态</p>\n<blockquote>\n<p><code>if(!$(this).is(&quot;:hidden&quot;)) {}</code></p>\n</blockquote>\n</li>\n<li><p>序列化表单数据，用于 <code>ajax</code> 提交表单数据</p>\n<blockquote>\n<p><code>$(&#39;form&#39;).serialize()</code></p>\n</blockquote>\n</li>\n<li><p>输入框失去焦点</p>\n<blockquote>\n<p><code>$(&#39;input&#39;).blur(function () {});</code></p>\n</blockquote>\n</li>\n</ol>"},{"title":"Win下必备神器之Cmder","abbrlink":"42235af","date":"2017-12-23T05:07:23.000Z","_content":"\n## 前言\n\n对于使用 **windows 系统**的，需要经常和**命令行**打交道的童鞋，强烈推荐一个工具：Cmder（[Cmder官网](http://cmder.net/): `http://cmder.net/`）\n\n> 因为**好用**，所以**必备**\n\n本该介绍 Cmder 是什么，如何安装，如何使用……，但是已经有前辈对此进行了详细介绍：\n\n+ [Win下必备神器之Cmder](https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/)\n+ [介绍好用工具：Cmder ( 具有Linux 温度的Windows 命令提示字元工具 )](https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx)\n\n因此，本篇属于 Cmder 进阶篇，适合已经对 Cmder 有所了解的童鞋阅读，如果不知 Cmder 为何物，推荐先行阅读上面文章\n\n## Cmder 如何好用\n\n### 设置默认启动目录\n\n\n### 连接服务器\n因为 Cmder 支持 ssh 命令，因此可以直接连接服务器，命令为：`ssh 用户名@ip`，例如：\n```bash\nssh root@10.2.5.187\n```\n\n### 定义 alias\n  每次连接服务器都需要输入一长串命令，简直不能忍。好在 Cmder 提供了定义 alias 的功能。配置文件是 `cmder\\config\\user-aliases.cmd`，打开之后会发现，Cmder 已经默认定义了一些 alias。\n\n  ```bash\n  e.=explorer .\n  gl=git log --oneline --all --graph --decorate  $*\n  ls=ls --show-control-chars -F --color $*\n  pwd=cd\n  clear=cls\n  history=cat \"%CMDER_ROOT%\\config\\.history\"\n  unalias=alias /d $1\n  vi=vim $*\n  cmderr=cd /d \"%CMDER_ROOT%\"\n  ```\n\n  先解释默认定义的这些 alias 的作用\n  + `e.` : 用资源管理器打开 Cmder 当前所在路径\n  + `gl` : 使用 git 进行代码管理的童鞋应该不陌生，`git log` 加上一些参数\n  + `ls` : 列出当前目录下的文件和目录\n  + `pwd` : 打印当前目录的完整路径名\n  + `clear` : 清除屏幕\n  + `history` : 显示历史命令\n  + `unalias` : 这个，谁知道能告诉我一声么。。。\n  + `vi` : 打开 vim 编辑器\n  + `cmderr` : 切换到 Cmder.exe 所在的目录下\n\n  一键切换到指定目录\n  ```bash\n  tofe=cd /d D:/www/front-end/\n  ```\n\n  一键连接服务器\n  ```bash\n  totest=ssh root@10.2.5.187\n  todev=ssh root@10.2.5.188\n  ```\n\n  更多 alias 的可自由发挥~\n\n### 各种主题\n\n### more\n\n\n## 最后\n\n> 过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封。","source":"_posts/tool/awesome-windows-software-cmder.md","raw":"---\ntitle: Win下必备神器之Cmder\ntags:\n  - tool\ncategories:\n  - tool\nabbrlink: 42235af\ndate: 2017-12-23 13:07:23\n---\n\n## 前言\n\n对于使用 **windows 系统**的，需要经常和**命令行**打交道的童鞋，强烈推荐一个工具：Cmder（[Cmder官网](http://cmder.net/): `http://cmder.net/`）\n\n> 因为**好用**，所以**必备**\n\n本该介绍 Cmder 是什么，如何安装，如何使用……，但是已经有前辈对此进行了详细介绍：\n\n+ [Win下必备神器之Cmder](https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/)\n+ [介绍好用工具：Cmder ( 具有Linux 温度的Windows 命令提示字元工具 )](https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx)\n\n因此，本篇属于 Cmder 进阶篇，适合已经对 Cmder 有所了解的童鞋阅读，如果不知 Cmder 为何物，推荐先行阅读上面文章\n\n## Cmder 如何好用\n\n### 设置默认启动目录\n\n\n### 连接服务器\n因为 Cmder 支持 ssh 命令，因此可以直接连接服务器，命令为：`ssh 用户名@ip`，例如：\n```bash\nssh root@10.2.5.187\n```\n\n### 定义 alias\n  每次连接服务器都需要输入一长串命令，简直不能忍。好在 Cmder 提供了定义 alias 的功能。配置文件是 `cmder\\config\\user-aliases.cmd`，打开之后会发现，Cmder 已经默认定义了一些 alias。\n\n  ```bash\n  e.=explorer .\n  gl=git log --oneline --all --graph --decorate  $*\n  ls=ls --show-control-chars -F --color $*\n  pwd=cd\n  clear=cls\n  history=cat \"%CMDER_ROOT%\\config\\.history\"\n  unalias=alias /d $1\n  vi=vim $*\n  cmderr=cd /d \"%CMDER_ROOT%\"\n  ```\n\n  先解释默认定义的这些 alias 的作用\n  + `e.` : 用资源管理器打开 Cmder 当前所在路径\n  + `gl` : 使用 git 进行代码管理的童鞋应该不陌生，`git log` 加上一些参数\n  + `ls` : 列出当前目录下的文件和目录\n  + `pwd` : 打印当前目录的完整路径名\n  + `clear` : 清除屏幕\n  + `history` : 显示历史命令\n  + `unalias` : 这个，谁知道能告诉我一声么。。。\n  + `vi` : 打开 vim 编辑器\n  + `cmderr` : 切换到 Cmder.exe 所在的目录下\n\n  一键切换到指定目录\n  ```bash\n  tofe=cd /d D:/www/front-end/\n  ```\n\n  一键连接服务器\n  ```bash\n  totest=ssh root@10.2.5.187\n  todev=ssh root@10.2.5.188\n  ```\n\n  更多 alias 的可自由发挥~\n\n### 各种主题\n\n### more\n\n\n## 最后\n\n> 过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封。","slug":"tool/awesome-windows-software-cmder","published":1,"updated":"2018-01-07T14:44:29.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdrc001y0gqmt2ecodux","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于使用 <strong>windows 系统</strong>的，需要经常和<strong>命令行</strong>打交道的童鞋，强烈推荐一个工具：Cmder（<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">Cmder官网</a>: <code>http://cmder.net/</code>）</p>\n<blockquote>\n<p>因为<strong>好用</strong>，所以<strong>必备</strong></p>\n</blockquote>\n<p>本该介绍 Cmder 是什么，如何安装，如何使用……，但是已经有前辈对此进行了详细介绍：</p>\n<ul>\n<li><a href=\"https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/\" target=\"_blank\" rel=\"noopener\">Win下必备神器之Cmder</a></li>\n<li><a href=\"https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx\" target=\"_blank\" rel=\"noopener\">介绍好用工具：Cmder ( 具有Linux 温度的Windows 命令提示字元工具 )</a></li>\n</ul>\n<p>因此，本篇属于 Cmder 进阶篇，适合已经对 Cmder 有所了解的童鞋阅读，如果不知 Cmder 为何物，推荐先行阅读上面文章</p>\n<h2 id=\"Cmder-如何好用\"><a href=\"#Cmder-如何好用\" class=\"headerlink\" title=\"Cmder 如何好用\"></a>Cmder 如何好用</h2><h3 id=\"设置默认启动目录\"><a href=\"#设置默认启动目录\" class=\"headerlink\" title=\"设置默认启动目录\"></a>设置默认启动目录</h3><h3 id=\"连接服务器\"><a href=\"#连接服务器\" class=\"headerlink\" title=\"连接服务器\"></a>连接服务器</h3><p>因为 Cmder 支持 ssh 命令，因此可以直接连接服务器，命令为：<code>ssh 用户名@ip</code>，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@10.2.5.187</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义-alias\"><a href=\"#定义-alias\" class=\"headerlink\" title=\"定义 alias\"></a>定义 alias</h3><p>  每次连接服务器都需要输入一长串命令，简直不能忍。好在 Cmder 提供了定义 alias 的功能。配置文件是 <code>cmder\\config\\user-aliases.cmd</code>，打开之后会发现，Cmder 已经默认定义了一些 alias。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.=explorer .</span><br><span class=\"line\">gl=git <span class=\"built_in\">log</span> --oneline --all --graph --decorate  $*</span><br><span class=\"line\">ls=ls --show-control-chars -F --color $*</span><br><span class=\"line\"><span class=\"built_in\">pwd</span>=<span class=\"built_in\">cd</span></span><br><span class=\"line\">clear=cls</span><br><span class=\"line\"><span class=\"built_in\">history</span>=cat <span class=\"string\">\"%CMDER_ROOT%\\config\\.history\"</span></span><br><span class=\"line\"><span class=\"built_in\">unalias</span>=<span class=\"built_in\">alias</span> /d <span class=\"variable\">$1</span></span><br><span class=\"line\">vi=vim $*</span><br><span class=\"line\">cmderr=<span class=\"built_in\">cd</span> /d <span class=\"string\">\"%CMDER_ROOT%\"</span></span><br></pre></td></tr></table></figure>\n<p>  先解释默认定义的这些 alias 的作用</p>\n<ul>\n<li><code>e.</code> : 用资源管理器打开 Cmder 当前所在路径</li>\n<li><code>gl</code> : 使用 git 进行代码管理的童鞋应该不陌生，<code>git log</code> 加上一些参数</li>\n<li><code>ls</code> : 列出当前目录下的文件和目录</li>\n<li><code>pwd</code> : 打印当前目录的完整路径名</li>\n<li><code>clear</code> : 清除屏幕</li>\n<li><code>history</code> : 显示历史命令</li>\n<li><code>unalias</code> : 这个，谁知道能告诉我一声么。。。</li>\n<li><code>vi</code> : 打开 vim 编辑器</li>\n<li><p><code>cmderr</code> : 切换到 Cmder.exe 所在的目录下</p>\n<p>一键切换到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tofe=<span class=\"built_in\">cd</span> /d D:/www/front-end/</span><br></pre></td></tr></table></figure>\n<p>一键连接服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">totest=ssh root@10.2.5.187</span><br><span class=\"line\">todev=ssh root@10.2.5.188</span><br></pre></td></tr></table></figure>\n<p>更多 alias 的可自由发挥~</p>\n</li>\n</ul>\n<h3 id=\"各种主题\"><a href=\"#各种主题\" class=\"headerlink\" title=\"各种主题\"></a>各种主题</h3><h3 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h3><h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><blockquote>\n<p>过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封。</p>\n</blockquote>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于使用 <strong>windows 系统</strong>的，需要经常和<strong>命令行</strong>打交道的童鞋，强烈推荐一个工具：Cmder（<a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">Cmder官网</a>: <code>http://cmder.net/</code>）</p>\n<blockquote>\n<p>因为<strong>好用</strong>，所以<strong>必备</strong></p>\n</blockquote>\n<p>本该介绍 Cmder 是什么，如何安装，如何使用……，但是已经有前辈对此进行了详细介绍：</p>\n<ul>\n<li><a href=\"https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/\" target=\"_blank\" rel=\"noopener\">Win下必备神器之Cmder</a></li>\n<li><a href=\"https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx\" target=\"_blank\" rel=\"noopener\">介绍好用工具：Cmder ( 具有Linux 温度的Windows 命令提示字元工具 )</a></li>\n</ul>\n<p>因此，本篇属于 Cmder 进阶篇，适合已经对 Cmder 有所了解的童鞋阅读，如果不知 Cmder 为何物，推荐先行阅读上面文章</p>\n<h2 id=\"Cmder-如何好用\"><a href=\"#Cmder-如何好用\" class=\"headerlink\" title=\"Cmder 如何好用\"></a>Cmder 如何好用</h2><h3 id=\"设置默认启动目录\"><a href=\"#设置默认启动目录\" class=\"headerlink\" title=\"设置默认启动目录\"></a>设置默认启动目录</h3><h3 id=\"连接服务器\"><a href=\"#连接服务器\" class=\"headerlink\" title=\"连接服务器\"></a>连接服务器</h3><p>因为 Cmder 支持 ssh 命令，因此可以直接连接服务器，命令为：<code>ssh 用户名@ip</code>，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@10.2.5.187</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义-alias\"><a href=\"#定义-alias\" class=\"headerlink\" title=\"定义 alias\"></a>定义 alias</h3><p>  每次连接服务器都需要输入一长串命令，简直不能忍。好在 Cmder 提供了定义 alias 的功能。配置文件是 <code>cmder\\config\\user-aliases.cmd</code>，打开之后会发现，Cmder 已经默认定义了一些 alias。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.=explorer .</span><br><span class=\"line\">gl=git <span class=\"built_in\">log</span> --oneline --all --graph --decorate  $*</span><br><span class=\"line\">ls=ls --show-control-chars -F --color $*</span><br><span class=\"line\"><span class=\"built_in\">pwd</span>=<span class=\"built_in\">cd</span></span><br><span class=\"line\">clear=cls</span><br><span class=\"line\"><span class=\"built_in\">history</span>=cat <span class=\"string\">\"%CMDER_ROOT%\\config\\.history\"</span></span><br><span class=\"line\"><span class=\"built_in\">unalias</span>=<span class=\"built_in\">alias</span> /d <span class=\"variable\">$1</span></span><br><span class=\"line\">vi=vim $*</span><br><span class=\"line\">cmderr=<span class=\"built_in\">cd</span> /d <span class=\"string\">\"%CMDER_ROOT%\"</span></span><br></pre></td></tr></table></figure>\n<p>  先解释默认定义的这些 alias 的作用</p>\n<ul>\n<li><code>e.</code> : 用资源管理器打开 Cmder 当前所在路径</li>\n<li><code>gl</code> : 使用 git 进行代码管理的童鞋应该不陌生，<code>git log</code> 加上一些参数</li>\n<li><code>ls</code> : 列出当前目录下的文件和目录</li>\n<li><code>pwd</code> : 打印当前目录的完整路径名</li>\n<li><code>clear</code> : 清除屏幕</li>\n<li><code>history</code> : 显示历史命令</li>\n<li><code>unalias</code> : 这个，谁知道能告诉我一声么。。。</li>\n<li><code>vi</code> : 打开 vim 编辑器</li>\n<li><p><code>cmderr</code> : 切换到 Cmder.exe 所在的目录下</p>\n<p>一键切换到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tofe=<span class=\"built_in\">cd</span> /d D:/www/front-end/</span><br></pre></td></tr></table></figure>\n<p>一键连接服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">totest=ssh root@10.2.5.187</span><br><span class=\"line\">todev=ssh root@10.2.5.188</span><br></pre></td></tr></table></figure>\n<p>更多 alias 的可自由发挥~</p>\n</li>\n</ul>\n<h3 id=\"各种主题\"><a href=\"#各种主题\" class=\"headerlink\" title=\"各种主题\"></a>各种主题</h3><h3 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h3><h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><blockquote>\n<p>过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封。</p>\n</blockquote>\n"},{"title":"chrome 插件集","abbrlink":"d2c230b5","date":"2017-12-29T16:20:53.000Z","_content":"### 写在前面\n\nchrome 插件离线安装方法（chrome 插件通常以 `crx` 格式保存）：\n1. chrome 中打开 `chrome://extensions/` 页面\n2. 把后缀为 `crx` 的插件安装文件拖拽到第一步打开的页面中\n3. 浏览器弹出确认安装的提示框，点击“添加扩展程序”即可\n\n下面的插件都在百度云盘做了备份，网盘地址：[https://pan.baidu.com/s/1gfCjRTD](https://pan.baidu.com/s/1gfCjRTD)\n\n### 插件介绍\n#### 谷歌访问助手 - **访问谷歌**\n  + 免费，简单\n  + 坏处：需要设置hao123为主页\n\n#### cVim - 使Chrome浏览器支持Vim的快捷键\n  + 支持 vim 快捷键，解放鼠标\n  + preview:\n    ![](https://pic3.zhimg.com/725af9c97caaa38a28a67f02abad4865_r.jpg)\n\n#### JSONView - web开发 JSON 数据格式化和高亮插件\n  + 在做开发的时候，经常需要从服务器拿数据，一般返回数据都会用 `json` 来封装。由于一些原因，从服务器端取得的json数据，往往是经过unicode编码，没有格式化的数据，很难阅读。JSONView 正是应用与这个场景，它可以将json数据进行转码和格式化，以一种清晰的形式展示给大家\n  + preview:\n    ![](https://images.cnblogs.com/cnblogs_com/hutaoer/2.JPG)\n\n#### Octotree - 你的 GitHub 文档库\n  + 装了这款插件之后，可以在 GitHub 项目页面的左侧看到相应项目的树状结构图，对于项目管理以及具体的文件跳转来说非常方便。\n  + 一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octotree 之后，点击页面左侧项目的树状结构图中对应文件的图标即可下载。\n  + preview:\n    ![](https://pic3.zhimg.com/50/e9420e572117c016241b8d59ad92f663_hd.jpg)\n\n#### Page Ruler ：你的网页标尺\n  + 屏幕尺子插件，非常精确地测量出当前页面某个元素或者是整个页面的大小尺寸\n  + preview:\n    ![](http://chromecj.com/Content/kindeditor/attached/image/20140917/20140917221507_1406.jpg)\n\n\n#### Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」\n  + 能够让你在不离开当前项目窗口的前提下，弹窗显示出你的搜索结果，非常方便\n  + preview:\n    ![](https://pic3.zhimg.com/50/f0e5e55e6aef53722b1f62a44f8af160_hd.jpg)\n\n#### Postman - 强大的 API & HTTP 请求调试工具\n  + 官方网址：[https://www.getpostman.com/](https://www.getpostman.com/)\n  + 不仅可以调试简单的 CSS、HTML、脚本等简单的网页基本信息，它还可以发送几乎所有类型的 HTTP 请求，Postman 在发送网络 HTTP 请求方面可以说是 Chrome 插件类产品中的代表产品之一\n\n#### Infinity 新标签页\n  + Chrome 新标签页应用，重绘了几百个图标，支持自定义搜索，集成天气，带有备忘与 Todo，还可以每日更换壁纸。\n  + 如果你已经厌倦了日复一日的默认新标签页，那就试一试 Infinity 吧！\n\n#### 掘金 - 为设计师、程序员、产品经理每日发现优质内容\n  + 聚合了国内外优质的互联网站点内容，在节省你的筛选成本的同时，帮你发现好内容。\n\n#### Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置\n  + 适用于需要经常切换网络代理的场景\n  + windows 平台蛋疼的代理切换方式谁用谁知道~~~\n\n#### WEB前端助手(FeHelper)\n  + 官方网站：[WEB前端助手](https://www.baidufe.com/fehelper)\n  + 前端开发，你值得拥有！~\n\n#### 广告终结者\n  + 谁用谁知道，自从用了广告终结者，妈妈再也不用担心我看到广告了\n\n#### 猎豹翻译\n  + 英语学习药不能停！\n  + 翻译类插件多如繁星，选择哪一款就看个人爱好了\n  + preview:\n    ![](http://www.cnplugins.com/uploads/crximage/201606/www.cnplugins.com_dojgdllankdpofnmiiaodefbddmkjhna_1.jpg)\n\n#### 为知笔记网页剪辑器\n  + 适合为知笔记用户\n  + 可以很方便的把网页上有价值的内容保存到自己的笔记中\n\n#### 新同文堂 - 网页简繁转换工具\n  + 浏览一些繁体中文网站时（如[鳥哥的 Linux 私房菜](http://linux.vbird.org/linux_basic/)）时还是很好用的\n\n#### chrono 下载管理器\n  + 安装之后在浏览器的右上方可以看到其标记按钮，用户可以点击选择开始、暂停、取消等基础操作。还可以自行进行下载任务的添加，而且点击下载任务还会有对应的下载详情弹出，就像桌面上的下载软件一样。另外用户可以自行设置下载的时间顺序，甚至可以将 Chrome 默认只能同时下载 6 个文件的限制提升到 20 个\n  + preview:\n    ![](http://chromecj.com/Content/kindeditor/attached/image/20170613/20170613180057_9843.jpg)\n\n#### Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\n  + [Listen 1，整合三大音乐平台的 Chrome 扩展 | App+1](https://sspai.com/post/34149)\n  + preview:\n    ![](https://cdn.sspai.com/attachment/origin/2016/05/09/326891.jpg)","source":"_posts/tool/awesome.-chrome-extensions.md","raw":"---\ntitle: chrome 插件集\ntags:\n  - tool\ncategories: tool\nabbrlink: d2c230b5\ndate: 2017-12-30 00:20:53\n---\n### 写在前面\n\nchrome 插件离线安装方法（chrome 插件通常以 `crx` 格式保存）：\n1. chrome 中打开 `chrome://extensions/` 页面\n2. 把后缀为 `crx` 的插件安装文件拖拽到第一步打开的页面中\n3. 浏览器弹出确认安装的提示框，点击“添加扩展程序”即可\n\n下面的插件都在百度云盘做了备份，网盘地址：[https://pan.baidu.com/s/1gfCjRTD](https://pan.baidu.com/s/1gfCjRTD)\n\n### 插件介绍\n#### 谷歌访问助手 - **访问谷歌**\n  + 免费，简单\n  + 坏处：需要设置hao123为主页\n\n#### cVim - 使Chrome浏览器支持Vim的快捷键\n  + 支持 vim 快捷键，解放鼠标\n  + preview:\n    ![](https://pic3.zhimg.com/725af9c97caaa38a28a67f02abad4865_r.jpg)\n\n#### JSONView - web开发 JSON 数据格式化和高亮插件\n  + 在做开发的时候，经常需要从服务器拿数据，一般返回数据都会用 `json` 来封装。由于一些原因，从服务器端取得的json数据，往往是经过unicode编码，没有格式化的数据，很难阅读。JSONView 正是应用与这个场景，它可以将json数据进行转码和格式化，以一种清晰的形式展示给大家\n  + preview:\n    ![](https://images.cnblogs.com/cnblogs_com/hutaoer/2.JPG)\n\n#### Octotree - 你的 GitHub 文档库\n  + 装了这款插件之后，可以在 GitHub 项目页面的左侧看到相应项目的树状结构图，对于项目管理以及具体的文件跳转来说非常方便。\n  + 一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octotree 之后，点击页面左侧项目的树状结构图中对应文件的图标即可下载。\n  + preview:\n    ![](https://pic3.zhimg.com/50/e9420e572117c016241b8d59ad92f663_hd.jpg)\n\n#### Page Ruler ：你的网页标尺\n  + 屏幕尺子插件，非常精确地测量出当前页面某个元素或者是整个页面的大小尺寸\n  + preview:\n    ![](http://chromecj.com/Content/kindeditor/attached/image/20140917/20140917221507_1406.jpg)\n\n\n#### Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」\n  + 能够让你在不离开当前项目窗口的前提下，弹窗显示出你的搜索结果，非常方便\n  + preview:\n    ![](https://pic3.zhimg.com/50/f0e5e55e6aef53722b1f62a44f8af160_hd.jpg)\n\n#### Postman - 强大的 API & HTTP 请求调试工具\n  + 官方网址：[https://www.getpostman.com/](https://www.getpostman.com/)\n  + 不仅可以调试简单的 CSS、HTML、脚本等简单的网页基本信息，它还可以发送几乎所有类型的 HTTP 请求，Postman 在发送网络 HTTP 请求方面可以说是 Chrome 插件类产品中的代表产品之一\n\n#### Infinity 新标签页\n  + Chrome 新标签页应用，重绘了几百个图标，支持自定义搜索，集成天气，带有备忘与 Todo，还可以每日更换壁纸。\n  + 如果你已经厌倦了日复一日的默认新标签页，那就试一试 Infinity 吧！\n\n#### 掘金 - 为设计师、程序员、产品经理每日发现优质内容\n  + 聚合了国内外优质的互联网站点内容，在节省你的筛选成本的同时，帮你发现好内容。\n\n#### Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置\n  + 适用于需要经常切换网络代理的场景\n  + windows 平台蛋疼的代理切换方式谁用谁知道~~~\n\n#### WEB前端助手(FeHelper)\n  + 官方网站：[WEB前端助手](https://www.baidufe.com/fehelper)\n  + 前端开发，你值得拥有！~\n\n#### 广告终结者\n  + 谁用谁知道，自从用了广告终结者，妈妈再也不用担心我看到广告了\n\n#### 猎豹翻译\n  + 英语学习药不能停！\n  + 翻译类插件多如繁星，选择哪一款就看个人爱好了\n  + preview:\n    ![](http://www.cnplugins.com/uploads/crximage/201606/www.cnplugins.com_dojgdllankdpofnmiiaodefbddmkjhna_1.jpg)\n\n#### 为知笔记网页剪辑器\n  + 适合为知笔记用户\n  + 可以很方便的把网页上有价值的内容保存到自己的笔记中\n\n#### 新同文堂 - 网页简繁转换工具\n  + 浏览一些繁体中文网站时（如[鳥哥的 Linux 私房菜](http://linux.vbird.org/linux_basic/)）时还是很好用的\n\n#### chrono 下载管理器\n  + 安装之后在浏览器的右上方可以看到其标记按钮，用户可以点击选择开始、暂停、取消等基础操作。还可以自行进行下载任务的添加，而且点击下载任务还会有对应的下载详情弹出，就像桌面上的下载软件一样。另外用户可以自行设置下载的时间顺序，甚至可以将 Chrome 默认只能同时下载 6 个文件的限制提升到 20 个\n  + preview:\n    ![](http://chromecj.com/Content/kindeditor/attached/image/20170613/20170613180057_9843.jpg)\n\n#### Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\n  + [Listen 1，整合三大音乐平台的 Chrome 扩展 | App+1](https://sspai.com/post/34149)\n  + preview:\n    ![](https://cdn.sspai.com/attachment/origin/2016/05/09/326891.jpg)","slug":"tool/awesome.-chrome-extensions","published":1,"updated":"2018-01-07T14:44:29.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc7hmdrh00230gqm89r636jd","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>chrome 插件离线安装方法（chrome 插件通常以 <code>crx</code> 格式保存）：</p>\n<ol>\n<li>chrome 中打开 <code>chrome://extensions/</code> 页面</li>\n<li>把后缀为 <code>crx</code> 的插件安装文件拖拽到第一步打开的页面中</li>\n<li>浏览器弹出确认安装的提示框，点击“添加扩展程序”即可</li>\n</ol>\n<p>下面的插件都在百度云盘做了备份，网盘地址：<a href=\"https://pan.baidu.com/s/1gfCjRTD\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1gfCjRTD</a></p>\n<h3 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h3><h4 id=\"谷歌访问助手-访问谷歌\"><a href=\"#谷歌访问助手-访问谷歌\" class=\"headerlink\" title=\"谷歌访问助手 - 访问谷歌\"></a>谷歌访问助手 - <strong>访问谷歌</strong></h4><ul>\n<li>免费，简单</li>\n<li>坏处：需要设置hao123为主页</li>\n</ul>\n<h4 id=\"cVim-使Chrome浏览器支持Vim的快捷键\"><a href=\"#cVim-使Chrome浏览器支持Vim的快捷键\" class=\"headerlink\" title=\"cVim - 使Chrome浏览器支持Vim的快捷键\"></a>cVim - 使Chrome浏览器支持Vim的快捷键</h4><ul>\n<li>支持 vim 快捷键，解放鼠标</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/725af9c97caaa38a28a67f02abad4865_r.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"JSONView-web开发-JSON-数据格式化和高亮插件\"><a href=\"#JSONView-web开发-JSON-数据格式化和高亮插件\" class=\"headerlink\" title=\"JSONView - web开发 JSON 数据格式化和高亮插件\"></a>JSONView - web开发 JSON 数据格式化和高亮插件</h4><ul>\n<li>在做开发的时候，经常需要从服务器拿数据，一般返回数据都会用 <code>json</code> 来封装。由于一些原因，从服务器端取得的json数据，往往是经过unicode编码，没有格式化的数据，很难阅读。JSONView 正是应用与这个场景，它可以将json数据进行转码和格式化，以一种清晰的形式展示给大家</li>\n<li>preview:<br><img src=\"https://images.cnblogs.com/cnblogs_com/hutaoer/2.JPG\" alt=\"\"></li>\n</ul>\n<h4 id=\"Octotree-你的-GitHub-文档库\"><a href=\"#Octotree-你的-GitHub-文档库\" class=\"headerlink\" title=\"Octotree - 你的 GitHub 文档库\"></a>Octotree - 你的 GitHub 文档库</h4><ul>\n<li>装了这款插件之后，可以在 GitHub 项目页面的左侧看到相应项目的树状结构图，对于项目管理以及具体的文件跳转来说非常方便。</li>\n<li>一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octotree 之后，点击页面左侧项目的树状结构图中对应文件的图标即可下载。</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/50/e9420e572117c016241b8d59ad92f663_hd.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Page-Ruler-：你的网页标尺\"><a href=\"#Page-Ruler-：你的网页标尺\" class=\"headerlink\" title=\"Page Ruler ：你的网页标尺\"></a>Page Ruler ：你的网页标尺</h4><ul>\n<li>屏幕尺子插件，非常精确地测量出当前页面某个元素或者是整个页面的大小尺寸</li>\n<li>preview:<br><img src=\"http://chromecj.com/Content/kindeditor/attached/image/20140917/20140917221507_1406.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」\"><a href=\"#Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」\" class=\"headerlink\" title=\"Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」\"></a>Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」</h4><ul>\n<li>能够让你在不离开当前项目窗口的前提下，弹窗显示出你的搜索结果，非常方便</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/50/f0e5e55e6aef53722b1f62a44f8af160_hd.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Postman-强大的-API-amp-HTTP-请求调试工具\"><a href=\"#Postman-强大的-API-amp-HTTP-请求调试工具\" class=\"headerlink\" title=\"Postman - 强大的 API &amp; HTTP 请求调试工具\"></a>Postman - 强大的 API &amp; HTTP 请求调试工具</h4><ul>\n<li>官方网址：<a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">https://www.getpostman.com/</a></li>\n<li>不仅可以调试简单的 CSS、HTML、脚本等简单的网页基本信息，它还可以发送几乎所有类型的 HTTP 请求，Postman 在发送网络 HTTP 请求方面可以说是 Chrome 插件类产品中的代表产品之一</li>\n</ul>\n<h4 id=\"Infinity-新标签页\"><a href=\"#Infinity-新标签页\" class=\"headerlink\" title=\"Infinity 新标签页\"></a>Infinity 新标签页</h4><ul>\n<li>Chrome 新标签页应用，重绘了几百个图标，支持自定义搜索，集成天气，带有备忘与 Todo，还可以每日更换壁纸。</li>\n<li>如果你已经厌倦了日复一日的默认新标签页，那就试一试 Infinity 吧！</li>\n</ul>\n<h4 id=\"掘金-为设计师、程序员、产品经理每日发现优质内容\"><a href=\"#掘金-为设计师、程序员、产品经理每日发现优质内容\" class=\"headerlink\" title=\"掘金 - 为设计师、程序员、产品经理每日发现优质内容\"></a>掘金 - 为设计师、程序员、产品经理每日发现优质内容</h4><ul>\n<li>聚合了国内外优质的互联网站点内容，在节省你的筛选成本的同时，帮你发现好内容。</li>\n</ul>\n<h4 id=\"Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置\"><a href=\"#Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置\" class=\"headerlink\" title=\"Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置\"></a>Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置</h4><ul>\n<li>适用于需要经常切换网络代理的场景</li>\n<li>windows 平台蛋疼的代理切换方式谁用谁知道~~~</li>\n</ul>\n<h4 id=\"WEB前端助手-FeHelper\"><a href=\"#WEB前端助手-FeHelper\" class=\"headerlink\" title=\"WEB前端助手(FeHelper)\"></a>WEB前端助手(FeHelper)</h4><ul>\n<li>官方网站：<a href=\"https://www.baidufe.com/fehelper\" target=\"_blank\" rel=\"noopener\">WEB前端助手</a></li>\n<li>前端开发，你值得拥有！~</li>\n</ul>\n<h4 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h4><ul>\n<li>谁用谁知道，自从用了广告终结者，妈妈再也不用担心我看到广告了</li>\n</ul>\n<h4 id=\"猎豹翻译\"><a href=\"#猎豹翻译\" class=\"headerlink\" title=\"猎豹翻译\"></a>猎豹翻译</h4><ul>\n<li>英语学习药不能停！</li>\n<li>翻译类插件多如繁星，选择哪一款就看个人爱好了</li>\n<li>preview:<br><img src=\"http://www.cnplugins.com/uploads/crximage/201606/www.cnplugins.com_dojgdllankdpofnmiiaodefbddmkjhna_1.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"为知笔记网页剪辑器\"><a href=\"#为知笔记网页剪辑器\" class=\"headerlink\" title=\"为知笔记网页剪辑器\"></a>为知笔记网页剪辑器</h4><ul>\n<li>适合为知笔记用户</li>\n<li>可以很方便的把网页上有价值的内容保存到自己的笔记中</li>\n</ul>\n<h4 id=\"新同文堂-网页简繁转换工具\"><a href=\"#新同文堂-网页简繁转换工具\" class=\"headerlink\" title=\"新同文堂 - 网页简繁转换工具\"></a>新同文堂 - 网页简繁转换工具</h4><ul>\n<li>浏览一些繁体中文网站时（如<a href=\"http://linux.vbird.org/linux_basic/\" target=\"_blank\" rel=\"noopener\">鳥哥的 Linux 私房菜</a>）时还是很好用的</li>\n</ul>\n<h4 id=\"chrono-下载管理器\"><a href=\"#chrono-下载管理器\" class=\"headerlink\" title=\"chrono 下载管理器\"></a>chrono 下载管理器</h4><ul>\n<li>安装之后在浏览器的右上方可以看到其标记按钮，用户可以点击选择开始、暂停、取消等基础操作。还可以自行进行下载任务的添加，而且点击下载任务还会有对应的下载详情弹出，就像桌面上的下载软件一样。另外用户可以自行设置下载的时间顺序，甚至可以将 Chrome 默认只能同时下载 6 个文件的限制提升到 20 个</li>\n<li>preview:<br><img src=\"http://chromecj.com/Content/kindeditor/attached/image/20170613/20170613180057_9843.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\"><a href=\"#Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\" class=\"headerlink\" title=\"Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\"></a>Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲</h4><ul>\n<li><a href=\"https://sspai.com/post/34149\" target=\"_blank\" rel=\"noopener\">Listen 1，整合三大音乐平台的 Chrome 扩展 | App+1</a></li>\n<li>preview:<br><img src=\"https://cdn.sspai.com/attachment/origin/2016/05/09/326891.jpg\" alt=\"\"></li>\n</ul>\n","site":{"data":{"head":{"css":"<link href='/css/custom.css' rel='stylesheet' type='text/css' />"}}},"excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>chrome 插件离线安装方法（chrome 插件通常以 <code>crx</code> 格式保存）：</p>\n<ol>\n<li>chrome 中打开 <code>chrome://extensions/</code> 页面</li>\n<li>把后缀为 <code>crx</code> 的插件安装文件拖拽到第一步打开的页面中</li>\n<li>浏览器弹出确认安装的提示框，点击“添加扩展程序”即可</li>\n</ol>\n<p>下面的插件都在百度云盘做了备份，网盘地址：<a href=\"https://pan.baidu.com/s/1gfCjRTD\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1gfCjRTD</a></p>\n<h3 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h3><h4 id=\"谷歌访问助手-访问谷歌\"><a href=\"#谷歌访问助手-访问谷歌\" class=\"headerlink\" title=\"谷歌访问助手 - 访问谷歌\"></a>谷歌访问助手 - <strong>访问谷歌</strong></h4><ul>\n<li>免费，简单</li>\n<li>坏处：需要设置hao123为主页</li>\n</ul>\n<h4 id=\"cVim-使Chrome浏览器支持Vim的快捷键\"><a href=\"#cVim-使Chrome浏览器支持Vim的快捷键\" class=\"headerlink\" title=\"cVim - 使Chrome浏览器支持Vim的快捷键\"></a>cVim - 使Chrome浏览器支持Vim的快捷键</h4><ul>\n<li>支持 vim 快捷键，解放鼠标</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/725af9c97caaa38a28a67f02abad4865_r.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"JSONView-web开发-JSON-数据格式化和高亮插件\"><a href=\"#JSONView-web开发-JSON-数据格式化和高亮插件\" class=\"headerlink\" title=\"JSONView - web开发 JSON 数据格式化和高亮插件\"></a>JSONView - web开发 JSON 数据格式化和高亮插件</h4><ul>\n<li>在做开发的时候，经常需要从服务器拿数据，一般返回数据都会用 <code>json</code> 来封装。由于一些原因，从服务器端取得的json数据，往往是经过unicode编码，没有格式化的数据，很难阅读。JSONView 正是应用与这个场景，它可以将json数据进行转码和格式化，以一种清晰的形式展示给大家</li>\n<li>preview:<br><img src=\"https://images.cnblogs.com/cnblogs_com/hutaoer/2.JPG\" alt=\"\"></li>\n</ul>\n<h4 id=\"Octotree-你的-GitHub-文档库\"><a href=\"#Octotree-你的-GitHub-文档库\" class=\"headerlink\" title=\"Octotree - 你的 GitHub 文档库\"></a>Octotree - 你的 GitHub 文档库</h4><ul>\n<li>装了这款插件之后，可以在 GitHub 项目页面的左侧看到相应项目的树状结构图，对于项目管理以及具体的文件跳转来说非常方便。</li>\n<li>一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octotree 之后，点击页面左侧项目的树状结构图中对应文件的图标即可下载。</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/50/e9420e572117c016241b8d59ad92f663_hd.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Page-Ruler-：你的网页标尺\"><a href=\"#Page-Ruler-：你的网页标尺\" class=\"headerlink\" title=\"Page Ruler ：你的网页标尺\"></a>Page Ruler ：你的网页标尺</h4><ul>\n<li>屏幕尺子插件，非常精确地测量出当前页面某个元素或者是整个页面的大小尺寸</li>\n<li>preview:<br><img src=\"http://chromecj.com/Content/kindeditor/attached/image/20140917/20140917221507_1406.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」\"><a href=\"#Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」\" class=\"headerlink\" title=\"Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」\"></a>Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」</h4><ul>\n<li>能够让你在不离开当前项目窗口的前提下，弹窗显示出你的搜索结果，非常方便</li>\n<li>preview:<br><img src=\"https://pic3.zhimg.com/50/f0e5e55e6aef53722b1f62a44f8af160_hd.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Postman-强大的-API-amp-HTTP-请求调试工具\"><a href=\"#Postman-强大的-API-amp-HTTP-请求调试工具\" class=\"headerlink\" title=\"Postman - 强大的 API &amp; HTTP 请求调试工具\"></a>Postman - 强大的 API &amp; HTTP 请求调试工具</h4><ul>\n<li>官方网址：<a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">https://www.getpostman.com/</a></li>\n<li>不仅可以调试简单的 CSS、HTML、脚本等简单的网页基本信息，它还可以发送几乎所有类型的 HTTP 请求，Postman 在发送网络 HTTP 请求方面可以说是 Chrome 插件类产品中的代表产品之一</li>\n</ul>\n<h4 id=\"Infinity-新标签页\"><a href=\"#Infinity-新标签页\" class=\"headerlink\" title=\"Infinity 新标签页\"></a>Infinity 新标签页</h4><ul>\n<li>Chrome 新标签页应用，重绘了几百个图标，支持自定义搜索，集成天气，带有备忘与 Todo，还可以每日更换壁纸。</li>\n<li>如果你已经厌倦了日复一日的默认新标签页，那就试一试 Infinity 吧！</li>\n</ul>\n<h4 id=\"掘金-为设计师、程序员、产品经理每日发现优质内容\"><a href=\"#掘金-为设计师、程序员、产品经理每日发现优质内容\" class=\"headerlink\" title=\"掘金 - 为设计师、程序员、产品经理每日发现优质内容\"></a>掘金 - 为设计师、程序员、产品经理每日发现优质内容</h4><ul>\n<li>聚合了国内外优质的互联网站点内容，在节省你的筛选成本的同时，帮你发现好内容。</li>\n</ul>\n<h4 id=\"Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置\"><a href=\"#Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置\" class=\"headerlink\" title=\"Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置\"></a>Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置</h4><ul>\n<li>适用于需要经常切换网络代理的场景</li>\n<li>windows 平台蛋疼的代理切换方式谁用谁知道~~~</li>\n</ul>\n<h4 id=\"WEB前端助手-FeHelper\"><a href=\"#WEB前端助手-FeHelper\" class=\"headerlink\" title=\"WEB前端助手(FeHelper)\"></a>WEB前端助手(FeHelper)</h4><ul>\n<li>官方网站：<a href=\"https://www.baidufe.com/fehelper\" target=\"_blank\" rel=\"noopener\">WEB前端助手</a></li>\n<li>前端开发，你值得拥有！~</li>\n</ul>\n<h4 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h4><ul>\n<li>谁用谁知道，自从用了广告终结者，妈妈再也不用担心我看到广告了</li>\n</ul>\n<h4 id=\"猎豹翻译\"><a href=\"#猎豹翻译\" class=\"headerlink\" title=\"猎豹翻译\"></a>猎豹翻译</h4><ul>\n<li>英语学习药不能停！</li>\n<li>翻译类插件多如繁星，选择哪一款就看个人爱好了</li>\n<li>preview:<br><img src=\"http://www.cnplugins.com/uploads/crximage/201606/www.cnplugins.com_dojgdllankdpofnmiiaodefbddmkjhna_1.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"为知笔记网页剪辑器\"><a href=\"#为知笔记网页剪辑器\" class=\"headerlink\" title=\"为知笔记网页剪辑器\"></a>为知笔记网页剪辑器</h4><ul>\n<li>适合为知笔记用户</li>\n<li>可以很方便的把网页上有价值的内容保存到自己的笔记中</li>\n</ul>\n<h4 id=\"新同文堂-网页简繁转换工具\"><a href=\"#新同文堂-网页简繁转换工具\" class=\"headerlink\" title=\"新同文堂 - 网页简繁转换工具\"></a>新同文堂 - 网页简繁转换工具</h4><ul>\n<li>浏览一些繁体中文网站时（如<a href=\"http://linux.vbird.org/linux_basic/\" target=\"_blank\" rel=\"noopener\">鳥哥的 Linux 私房菜</a>）时还是很好用的</li>\n</ul>\n<h4 id=\"chrono-下载管理器\"><a href=\"#chrono-下载管理器\" class=\"headerlink\" title=\"chrono 下载管理器\"></a>chrono 下载管理器</h4><ul>\n<li>安装之后在浏览器的右上方可以看到其标记按钮，用户可以点击选择开始、暂停、取消等基础操作。还可以自行进行下载任务的添加，而且点击下载任务还会有对应的下载详情弹出，就像桌面上的下载软件一样。另外用户可以自行设置下载的时间顺序，甚至可以将 Chrome 默认只能同时下载 6 个文件的限制提升到 20 个</li>\n<li>preview:<br><img src=\"http://chromecj.com/Content/kindeditor/attached/image/20170613/20170613180057_9843.jpg\" alt=\"\"></li>\n</ul>\n<h4 id=\"Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\"><a href=\"#Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\" class=\"headerlink\" title=\"Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲\"></a>Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲</h4><ul>\n<li><a href=\"https://sspai.com/post/34149\" target=\"_blank\" rel=\"noopener\">Listen 1，整合三大音乐平台的 Chrome 扩展 | App+1</a></li>\n<li>preview:<br><img src=\"https://cdn.sspai.com/attachment/origin/2016/05/09/326891.jpg\" alt=\"\"></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjc7hmdn300000gqm2wmyixf0","category_id":"cjc7hmdno00040gqmwdbknefw","_id":"cjc7hmdoe000e0gqmpi8r7ztp"},{"post_id":"cjc7hmdnj00020gqm2ryfsjar","category_id":"cjc7hmdo500090gqmv98gu85p","_id":"cjc7hmdon000k0gqm8y5sjwy6"},{"post_id":"cjc7hmdo100070gqmcg7vyr8z","category_id":"cjc7hmdof000f0gqmf3gw3326","_id":"cjc7hmdor000n0gqmvl6bojad"},{"post_id":"cjc7hmdo300080gqmoqq9a4wz","category_id":"cjc7hmdoo000l0gqmabfwwum0","_id":"cjc7hmdow000s0gqm7n99wum0"},{"post_id":"cjc7hmdo6000c0gqmcqoe91pp","category_id":"cjc7hmdos000p0gqmilqfrtw3","_id":"cjc7hmdoy000w0gqmf1wfv4w3"},{"post_id":"cjc7hmdo9000d0gqm7momh8bu","category_id":"cjc7hmdow000u0gqmmhv2rt5z","_id":"cjc7hmdp000110gqmitx0aoc3"},{"post_id":"cjc7hmdoh000h0gqmfxg0vgxk","category_id":"cjc7hmdos000p0gqmilqfrtw3","_id":"cjc7hmdp100130gqm5vjqvcln"},{"post_id":"cjc7hmdok000j0gqmv45zn2g6","category_id":"cjc7hmdp000100gqmlpgd5s0t","_id":"cjc7hmdp200170gqmbbu1jail"},{"post_id":"cjc7hmdql001h0gqmdlkle0p5","category_id":"cjc7hmdp000100gqmlpgd5s0t","_id":"cjc7hmdqz001o0gqmano88sql"},{"post_id":"cjc7hmdqw001n0gqm8adyhxxc","category_id":"cjc7hmdp000100gqmlpgd5s0t","_id":"cjc7hmdra001w0gqmvmjrlzv0"},{"post_id":"cjc7hmdr0001p0gqm8akqxxcb","category_id":"cjc7hmdp000100gqmlpgd5s0t","_id":"cjc7hmdrf001z0gqmnmuf653v"},{"post_id":"cjc7hmdqq001i0gqmjtqukm9c","category_id":"cjc7hmdqw001l0gqmz8bw6x37","_id":"cjc7hmdrj00240gqmfy9xffbe"},{"post_id":"cjc7hmdr8001v0gqmxb0qf9ov","category_id":"cjc7hmdp000100gqmlpgd5s0t","_id":"cjc7hmdrk00250gqmlxcleu9g"},{"post_id":"cjc7hmdqt001k0gqmcidq9bcg","category_id":"cjc7hmdqw001l0gqmz8bw6x37","_id":"cjc7hmdrl00290gqmzdxyi1wd"},{"post_id":"cjc7hmdrh00230gqm89r636jd","category_id":"cjc7hmdrf00200gqmcqqnkpx2","_id":"cjc7hmdrm002b0gqmriurziqk"},{"post_id":"cjc7hmdr5001r0gqmng0kfmyi","category_id":"cjc7hmdrf00200gqmcqqnkpx2","_id":"cjc7hmdrm002d0gqmi9tik1ob"},{"post_id":"cjc7hmdrc001y0gqmt2ecodux","category_id":"cjc7hmdrf00200gqmcqqnkpx2","_id":"cjc7hmdrn002e0gqmetww9dtr"}],"PostTag":[{"post_id":"cjc7hmdn300000gqm2wmyixf0","tag_id":"cjc7hmdnu00050gqmik71xrz6","_id":"cjc7hmdo6000b0gqm3m3enha3"},{"post_id":"cjc7hmdnj00020gqm2ryfsjar","tag_id":"cjc7hmdo5000a0gqmnr0nqlrh","_id":"cjc7hmdoj000i0gqmomx0fu1w"},{"post_id":"cjc7hmdnw00060gqmenkz6cj6","tag_id":"cjc7hmdog000g0gqmber0tc7a","_id":"cjc7hmdov000q0gqm1jg0enpk"},{"post_id":"cjc7hmdnw00060gqmenkz6cj6","tag_id":"cjc7hmdnu00050gqmik71xrz6","_id":"cjc7hmdov000r0gqm03473mrr"},{"post_id":"cjc7hmdo100070gqmcg7vyr8z","tag_id":"cjc7hmdos000o0gqm3d1n34k7","_id":"cjc7hmdox000v0gqma60hcfzh"},{"post_id":"cjc7hmdo300080gqmoqq9a4wz","tag_id":"cjc7hmdow000t0gqmytpgn8zt","_id":"cjc7hmdoz000z0gqm30y0p88s"},{"post_id":"cjc7hmdo6000c0gqmcqoe91pp","tag_id":"cjc7hmdoy000x0gqmht4k1ixp","_id":"cjc7hmdp200150gqmytqmovq6"},{"post_id":"cjc7hmdo6000c0gqmcqoe91pp","tag_id":"cjc7hmdp100120gqmloiglcnx","_id":"cjc7hmdp200160gqmsww6rl40"},{"post_id":"cjc7hmdo9000d0gqm7momh8bu","tag_id":"cjc7hmdp100140gqme8zuzxey","_id":"cjc7hmdp300190gqmrp0qwpct"},{"post_id":"cjc7hmdoh000h0gqmfxg0vgxk","tag_id":"cjc7hmdoy000x0gqmht4k1ixp","_id":"cjc7hmdp4001c0gqm1y0eipfb"},{"post_id":"cjc7hmdoh000h0gqmfxg0vgxk","tag_id":"cjc7hmdp100120gqmloiglcnx","_id":"cjc7hmdp4001d0gqmu429ls7m"},{"post_id":"cjc7hmdok000j0gqmv45zn2g6","tag_id":"cjc7hmdp3001b0gqmru9wsxba","_id":"cjc7hmdp5001e0gqmt06kaj7u"},{"post_id":"cjc7hmdql001h0gqmdlkle0p5","tag_id":"cjc7hmdp100120gqmloiglcnx","_id":"cjc7hmdqt001j0gqmc279kg5t"},{"post_id":"cjc7hmdqw001n0gqm8adyhxxc","tag_id":"cjc7hmdp100120gqmloiglcnx","_id":"cjc7hmdr4001q0gqmdseabk61"},{"post_id":"cjc7hmdr0001p0gqm8akqxxcb","tag_id":"cjc7hmdp100120gqmloiglcnx","_id":"cjc7hmdr8001u0gqm8z03d7k4"},{"post_id":"cjc7hmdqq001i0gqmjtqukm9c","tag_id":"cjc7hmdqw001m0gqm5a6ejnll","_id":"cjc7hmdrc001x0gqmktay53mb"},{"post_id":"cjc7hmdqt001k0gqmcidq9bcg","tag_id":"cjc7hmdqw001m0gqm5a6ejnll","_id":"cjc7hmdrh00220gqm0yihp07z"},{"post_id":"cjc7hmdrh00230gqm89r636jd","tag_id":"cjc7hmdrg00210gqmc3vjvyqr","_id":"cjc7hmdrl00280gqmgfpaead3"},{"post_id":"cjc7hmdr5001r0gqmng0kfmyi","tag_id":"cjc7hmdrg00210gqmc3vjvyqr","_id":"cjc7hmdrl002a0gqm052s6l22"},{"post_id":"cjc7hmdr8001v0gqmxb0qf9ov","tag_id":"cjc7hmdrl00270gqmgl5qdiwe","_id":"cjc7hmdrn002g0gqmt8ng8mdy"},{"post_id":"cjc7hmdr8001v0gqmxb0qf9ov","tag_id":"cjc7hmdrm002c0gqmgyss5sd6","_id":"cjc7hmdrn002h0gqmhyc7nhee"},{"post_id":"cjc7hmdrc001y0gqmt2ecodux","tag_id":"cjc7hmdrg00210gqmc3vjvyqr","_id":"cjc7hmdro002i0gqmfmpodlu3"}],"Tag":[{"name":"Linux","_id":"cjc7hmdnu00050gqmik71xrz6"},{"name":"部署","_id":"cjc7hmdo5000a0gqmnr0nqlrh"},{"name":"部署环境","_id":"cjc7hmdog000g0gqmber0tc7a"},{"name":"Gulp","_id":"cjc7hmdos000o0gqm3d1n34k7"},{"name":"hexo","_id":"cjc7hmdow000t0gqmytpgn8zt"},{"name":"React","_id":"cjc7hmdoy000x0gqmht4k1ixp"},{"name":"JavaScript","_id":"cjc7hmdp100120gqmloiglcnx"},{"name":"code","_id":"cjc7hmdp100140gqme8zuzxey"},{"name":"regexp","_id":"cjc7hmdp3001b0gqmru9wsxba"},{"name":"Git","_id":"cjc7hmdqw001m0gqm5a6ejnll"},{"name":"tool","_id":"cjc7hmdrg00210gqmc3vjvyqr"},{"name":"js","_id":"cjc7hmdrl00270gqmgl5qdiwe"},{"name":"jQuery","_id":"cjc7hmdrm002c0gqmgyss5sd6"}]}}