<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端码农的自留地</title>
  <icon>https://www.gravatar.com/avatar/bd8f361dfea9efb061093ab44d5fbaef</icon>
  <subtitle>一起学习弯道超车的技术！</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://wencaizhang.com/blog/"/>
  <updated>2018-01-07T15:48:50.928Z</updated>
  <id>http://wencaizhang.com/blog/</id>
  
  <author>
    <name>wencaizhang</name>
    <email>1052642137@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo 备份</title>
    <link href="http://wencaizhang.com/blog/archives/0.html"/>
    <id>http://wencaizhang.com/blog/archives/0.html</id>
    <published>2018-01-07T15:01:00.000Z</published>
    <updated>2018-01-07T15:48:50.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于备份源文件我是这么做的"><a href="#关于备份源文件我是这么做的" class="headerlink" title="关于备份源文件我是这么做的"></a>关于备份源文件我是这么做的</h2><p>  在搭建博客的时候，通常都会在 GitHub 上面创建一个 git 仓库，利用 GitHub 提供的 gh-pages 功能，将 hexo 生成的静态网页提交到 master 分支。那么顺着这个思路，利用 git 的分支功能将这个仓库变成集展示和备份于一体的 git 仓库。</p><p>  例如，创建 source 分支用于管理配置文件和博客文章源文件，如果对博客主题进行了自定义，还可以再创建一个 theme 分支用于管理主题。</p><p>  这样做的好处，一方面是备份，另一个方面是方便在不同的电脑上快速搭建环境，只需要 <code>git clone</code> 和 <code>npm install</code> 两个命令就可以搞定！</p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>如果按照上面的方法做，每次写完文章最后都会用这么几个步骤：</p><ol><li><code>hexo</code> 的部署命令 <code>hexo d</code></li><li>提交 <code>source</code> 分支源文件</li><li>如果修改了主题，还要切换目录并提交 <code>theme</code> 分支</li></ol><p>利用 npm scripts 可以一条命令全部搞定！</p><p>做前端开发的同学可能会对此比较熟悉，在网站根目录下有一个 <code>package.json</code> 文件，里面有个 <code>scripts</code> 字段，这里面可以自定义命令。</p><p>如果对 <code>npm scripts</code> 不太了解的，推荐：<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a></p><p>简单介绍下这段 <code>npm scripts</code> ：</p><ol><li><code>scripts</code> 字段是一个对象。它的每一个属性，对应一段脚本。例如 <code>dev</code> 字段对应的脚本是 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，命令行中使用 <code>npm run dev</code> 就可以执行这段脚本</li><li><code>&amp;&amp;</code>: 表示前一个任务执行成功，后一个任务才执行，<code>&amp;</code> 则是两个任务同时执行</li><li><code>npm run dev</code>: 主要用于本地预览博客，按照顺序执行 <code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>，只有前一个任务执行成功，后一个才执行</li><li><code>npm run push</code>: 部署博客</li><li><code>npm run prepush</code>: 提交 <code>source</code> 分支</li><li><code>npm run postpush</code>: 提交 <code>theme</code> 分支</li><li>钩子: <code>npm scripts</code> 有 <code>pre</code> 和 <code>post</code> 两个钩子。例如 <code>push</code> 脚本的钩子是 <code>prepush</code> 和 <code>postpush</code>，<code>prepush</code> 在 <code>push</code> 脚本之前执行，<code>postpush</code> 在 <code>push</code> 脚本之后执行。也就是说，执行 <code>npm run push</code> 的时候，会自动按照顺序先后执行 <code>npm run prepush &amp;&amp; npm run push &amp;&amp; npm run postpush</code> 。</li></ol><p>因此，在部署时，只需执行命令 <code>npm run push</code>，会自动部署博客网站，提交 <code>source</code> 和 <code>theme</code> 分支。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span>,</span><br><span class="line">  <span class="string">"prepush"</span>: <span class="string">"git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin source"</span>,</span><br><span class="line">  <span class="string">"push"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span>,</span><br><span class="line">  <span class="string">"postpush"</span>: <span class="string">"cd themes/indigo &amp;&amp; git add -A &amp;&amp; git commit -m update &amp;&amp; git push origin theme"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于备份源文件我是这么做的&quot;&gt;&lt;a href=&quot;#关于备份源文件我是这么做的&quot; class=&quot;headerlink&quot; title=&quot;关于备份源文件我是这么做的&quot;&gt;&lt;/a&gt;关于备份源文件我是这么做的&lt;/h2&gt;&lt;p&gt;  在搭建博客的时候，通常都会在 GitHub 上面
      
    
    </summary>
    
      <category term="Hexo" scheme="http://wencaizhang.com/blog/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://wencaizhang.com/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git 分支</title>
    <link href="http://wencaizhang.com/blog/archives/798d2056.html"/>
    <id>http://wencaizhang.com/blog/archives/798d2056.html</id>
    <published>2018-01-06T07:43:23.000Z</published>
    <updated>2018-01-07T14:44:29.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ol><li><p><code>git branch</code> 查看本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li>美元符号 <code>$</code> 是命令提示符，即后面语句为执行的命令</li><li>星号 <code>*</code> 表示当前分支为 <code>master</code></li></ul></li><li><p><code>git branch -r</code> 查看远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br><span class="line">  origin/HEAD -&gt; origin/master</span><br><span class="line">  origin/master</span><br></pre></td></tr></table></figure><ul><li><code>origin</code> 是默认的远程仓库的名字，<code>origin/master</code> 表示远程仓库的 <code>master</code> 分支</li><li><code>origin/HEAD</code> 就像一个指针，表示默认分支，此处指向 <code>origin/master</code>，即 <code>origin/master</code> 是默认分支。</li></ul></li><li><p><code>git branch -a</code> 查看所有分支，包含本地分支和远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><ul><li>当前分支为 <code>master</code></li><li><code>remotes</code> 表示远程主机，远程主机可能不止一个，因此要指定远程主机的名字，<code>origin</code> 为远程主机的名字</li></ul></li></ol><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ol><li><p><code>git branch &lt;分支名字&gt;</code> 用于创建分支，默认以 <code>HEAD</code>（通常是 <code>master</code> 分支）作为起点来创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li><code>git branch</code> 命令仅仅建立了一个新分支，但不会自动切换到这个分支中去，因此当前分支仍是 <code>master</code></li></ul></li></ol><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ol><li><p><code>git checkout &lt;分支名字&gt;</code> 用于切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">'dev'</span></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><ul><li>切换分支之后，会有提示信息：<code>Switched to branch &#39;dev&#39;</code></li><li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>dev</code></li></ul></li></ol><h3 id="创建并自动切换到新分支"><a href="#创建并自动切换到新分支" class="headerlink" title="创建并自动切换到新分支"></a>创建并自动切换到新分支</h3><ol><li><p><code>git checkout -b &lt;分支名字&gt;</code> 通过增加 <code>-b</code> 参数会创建分支并且切换到此分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature</span><br><span class="line">Switched to a new branch <span class="string">'feature'</span></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">  dev</span><br><span class="line">* feature</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><ul><li>切换分支之后，会有提示信息：<code>Switched to a new branch &#39;feature&#39;&#39;</code></li><li>通过 <code>git branch</code> 命令查看，当前分支已经切换到 <code>feature</code></li></ul></li></ol><h3 id="将本地分支推送到远程"><a href="#将本地分支推送到远程" class="headerlink" title="将本地分支推送到远程"></a>将本地分支推送到远程</h3><ol><li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin feature:feature</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/wencaistorm/git-learn.git</span><br><span class="line"> * [new branch]      feature -&gt; feature</span><br></pre></td></tr></table></figure><ul><li>提示信息：<code>* [new branch]      feature -&gt; feature</code> ，说明 push 成功！</li><li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被创建成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">  dev</span><br><span class="line">* feature</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/feature</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code> 如果忽略远程分支名，则表示将本地分支推送到与本地分支存在追踪关系的远程分支，如果该远程分支不存在，则会被新建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/wencaistorm/git-learn.git</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure><ul><li>同样的提示：<code>* [new branch]      dev -&gt; dev</code></li><li>同样再来次验证，发现远程分支 <code>origin/dev</code> 已经被创建成功！<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* dev</span><br><span class="line">  feature</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/feature</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ol><li><p><code>git merge &lt;分支名字&gt;</code> 用于合并分支（将指定分支合并到当前分支）<br>例如在 <code>dev</code> 分支创建了一个 <code>test.md</code> 文件，就可以使用此命令把 <code>dev</code> 合并到 <code>master</code> 上（需提前切换到 <code>master</code> 分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating 75dd5ff..f21cc70</span><br><span class="line">Fast-forward</span><br><span class="line"> test.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.md</span><br></pre></td></tr></table></figure><p>最后别忘了，提交 <code>master</code> 分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/wencaistorm/git-learn.git</span><br><span class="line">   75dd5ff..f21cc70  master -&gt; master</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><ol><li><p><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">error: The branch <span class="string">'dev'</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">'git branch -D dev'</span>.</span><br></pre></td></tr></table></figure><ul><li>删除失败，git 提示：<code>dev</code> 分支没有被合并，如果要强行删除，需要使用命令 <code>git branch -D dev</code></li><li>需要注意的是，这里的合并，并不一定是合并到 <code>master</code> 分支，合并到任何分支都可以</li></ul></li><li><p><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D dev</span><br><span class="line">Deleted branch dev (was 4a332d3).</span><br></pre></td></tr></table></figure><ul><li>删除成功！</li></ul></li></ol><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><ol><li><p><code>git push origin :&lt;远程分支名&gt;</code> 将一个空分支推送到远程分支，也就意味着将删除这个远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :dev</span><br><span class="line">To https://github.com/wencaistorm/git-learn.git</span><br><span class="line"> - [deleted]         dev</span><br></pre></td></tr></table></figure><ul><li>删除成功，并且给出提示信息：<code>- [deleted]         dev</code></li><li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/dev</code> 已经被删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* dev</span><br><span class="line">  feature</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/feature</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>git push origin --delete &lt;远程分支名&gt;</code> 通过 <code>--delete</code> 或者 <code>-d</code> 参数删除远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete feature</span><br><span class="line">To https://github.com/wencaistorm/git-learn.git</span><br><span class="line"> - [deleted]         feature</span><br></pre></td></tr></table></figure><ul><li>删除成功，同样给出提示信息：<code>- [deleted]         feature</code></li><li>通过 <code>git branch -a</code> 命令验证，发现远程分支 <code>origin/feature</code> 已经被删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* dev</span><br><span class="line">  feature</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><p>  分支情况如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  master</span><br><span class="line">* new</span><br></pre></td></tr></table></figure></p><p>  现在想把 <code>new</code> 分支重命名为 <code>newer</code> 分支，可以通过 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m new newer</span><br></pre></td></tr></table></figure></p><p>修改成功，重新查看分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  master</span><br><span class="line">* newer</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后总结一下，因为 <code>&lt;远程主机名&gt;</code> 通常默认为 <code>origin</code> ，因此这里直接以 <code>origin</code> 表示 <code>&lt;远程主机名&gt;</code>：</p><ul><li>查看分支<ul><li><code>git branch</code> 查看本地分支</li><li><code>git branch -r</code> 查看远程分支</li><li><code>git branch -a</code> 查看所有分支</li></ul></li><li>创建和切换分支<ul><li><code>git branch &lt;分支名字&gt;</code> 创建分支</li><li><code>git checkout &lt;分支名字&gt;</code> 切换分支</li><li><code>git checkout -b &lt;分支名字&gt;</code> 创建并自动切换到新分支</li></ul></li><li>把本地分支推送到远程<ul><li><code>git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;</code> （冒号两侧没有空格）</li><li><code>git push origin &lt;本地分支名&gt;</code></li></ul></li><li>合并分支 <code>git merge &lt;分支名字&gt;</code></li><li>删除本地分支（注意<code>-d</code> 和 <code>-D</code> 的区别）<ul><li><code>git branch -d &lt;本地分支名&gt;</code> 删除本地分支，但只能删除已经被 merge 的分支。</li><li><code>git branch -D &lt;本地分支名&gt;</code> 强行删除本地分支，即使此分支没有被 merge</li></ul></li><li>删除远程分支<ul><li><code>git push origin :&lt;远程分支名&gt;</code> （冒号左侧有两个空格）</li><li><code>git push origin --delete &lt;远程分支名&gt;</code> 或 <code>git push origin -D &lt;远程分支名&gt;</code> （<code>--delete</code> 和 <code>-D</code> 作用相同）</li></ul></li><li>重命名分支 <code>git branch -m &lt;重命名前分支名称&gt; &lt;重命名后分支名称&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h3 id=&quot;查看分支&quot;&gt;&lt;a href=&quot;#查看分支&quot; class=&quot;headerlink&quot; title=&quot;查看分支&quot;&gt;&lt;/a&gt;查看分支&lt;/h
      
    
    </summary>
    
      <category term="Git" scheme="http://wencaizhang.com/blog/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wencaizhang.com/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://wencaizhang.com/blog/archives/2f57a694.html"/>
    <id>http://wencaizhang.com/blog/archives/2f57a694.html</id>
    <published>2018-01-02T08:27:53.000Z</published>
    <updated>2018-01-07T14:44:29.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符既可以是放在 <code>[]</code> 中的任意单个字符（如 <code>[a]</code> 表示匹配单个小写字符 <code>a</code> ）</p><p>也可以是字符序列（如 <code>[a-d]</code> 表示匹配 <code>a</code> 、 <code>b</code> 、 <code>c</code> 、 <code>d</code> 之间的任意一个字符，而 <code>\w</code> 表示任意英文字母和数字及下划线）</p><p>下面是一些常见的元字符：</p><table><thead><tr><th>元字符</th><th>含义</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除 \n 以外的任何字符（注意元字符是小数点）。</td></tr><tr><td><code>[abcde]</code></td><td>匹配 <code>abcde</code> 之中的任意一个字符</td></tr><tr><td><code>[a-h]</code></td><td>匹配 <code>a</code> 到 <code>h</code> 之间的任意一个字符</td></tr><tr><td><code>[^fgh]</code></td><td>不与 <code>fgh</code> 之中的任意一个字符匹配</td></tr><tr><td><code>\w</code></td><td>匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个及下划线，相当于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td><code>\W</code></td><td>不匹配大小写英文字符及数字 <code>0</code> 到 <code>9</code> 之间的任意一个，相当于 <code>[^a-zA-Z0-9_]</code></td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，相当于 <code>[ \f\n\r\t\v]</code></td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符，相当于 <code>[^\s]</code></td></tr><tr><td><code>\d</code></td><td>匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>不匹配任何 <code>0</code> 到 <code>9</code> 之间的单个数字，相当于 <code>[^0-9]</code></td></tr><tr><td><code>[\u4e00-\u9fa5]</code></td><td>匹配任意单个汉字（这里用的是 <code>Unicode</code> 编码表示汉字的 )</td></tr></tbody></table><h2 id="正则表达式限定符"><a href="#正则表达式限定符" class="headerlink" title="正则表达式限定符"></a>正则表达式限定符</h2><p>上面的元字符都是针对单个字符匹配的，要想同时匹配多个字符的话，还需要借助限定符。</p><p>下面是一些常见的限定符 ( 下表中 <code>n</code> 和 <code>m</code> 都是表示整数，并且 <code>0 &lt; n &lt; m</code>) ： </p><table><thead><tr><th>限定符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配 0 到多个元字符，相当于 <code>{0,}</code></td></tr><tr><td><code>?</code></td><td>匹配 0 到 1 个元字符，相当于 <code>{0,1}</code></td></tr><tr><td><code>+</code></td><td>匹配至少 1 个元字符，相当于 <code>{1,}</code></td></tr><tr><td><code>{n}</code></td><td>匹配 <code>n</code> 个元字符</td></tr><tr><td><code>{n,}</code></td><td>匹配至少 <code>n</code> 个元字符</td></tr><tr><td><code>{n,m}</code></td><td>匹配 <code>n</code> 到 <code>m</code> 个元字符</td></tr><tr><td><code>\b</code></td><td>匹配单词边界</td></tr><tr><td><code>^</code></td><td>字符串必须以指定的字符开始</td></tr><tr><td><code>$</code></td><td>字符串必须以指定的字符结束</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>由于在正则表达式中<code>\</code>、<code>?</code>、<code>*</code>、<code>^</code>、<code>$</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>|</code>、<code>{</code>、<code>[</code>等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希望在字符串中至少有一个“ \ ”，那么正则表达式应该这么写： \+ 。</p></li><li><p>可以将多个元字符或者原义文本字符用括号括起来形成一个分组，比如 <code>^(13)[4-9]\d{8}$</code> 表示任意以 <code>13</code> 开头的移动手机号码。</p></li><li><p>另外对于中文字符的匹配是采用其对应的 <code>Unicode</code> 编码来匹配的，对于单个 <code>Unicode</code> 字符，如 <code>\u4e00</code> 表示汉字“一”， <code>\u9fa5</code>  表示汉字“龥”，在 <code>Unicode</code> 编码中这分别是所能表示的汉字的第一个和最后一个的 <code>Unicode</code> 编码，在 <code>Unicode</code> 编码中能表示 20901 个汉字。</p></li><li><p>关于 <code>\b</code> 的用法，它代表单词的开始或者结尾，以字符串 <code>123a 345b 456 789d</code> 作为示例字符串，如果正则表达式是 <code>\b\d{3}\b</code>，则仅能匹配 <code>456</code> 。</p></li><li><p>可以使用 <code>|</code> 来表示或的关系，例如 <code>[z|j|q]</code> 表示匹配 <code>z</code> 、 <code>j</code> 、 <code>q</code> 之中的任意一个字母。</p></li><li><p>正则验证工具： <a href="https://regexper.com/" target="_blank" rel="noopener">https://regexper.com/</a> </p></li></ol><h2 id="正则对象属性"><a href="#正则对象属性" class="headerlink" title="正则对象属性"></a>正则对象属性</h2><blockquote><p>属性均为只读，无法设置其值</p></blockquote><table><thead><tr><th>属性</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td><code>global</code></td><td>是否全文搜索</td><td><code>false</code></td></tr><tr><td><code>ignoreCase</code></td><td>是否大小写敏感</td><td><code>false</code></td></tr><tr><td><code>multiline</code></td><td>多行搜索</td><td><code>false</code></td></tr><tr><td><code>lastIndex</code></td><td>是当前表达式匹配内容的最后一个字符的下一个位置</td><td>无</td></tr><tr><td><code>source</code></td><td>正则表达式的文本字符串</td><td>无</td></tr></tbody></table><p>  如下：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/\w/</span>;</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/\w/gim</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg1.global);        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.ignoreCase);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.multiline);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.source);        <span class="comment">// "\w"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg2.global);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.ignoreCase);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.multiline);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.source);        <span class="comment">// "\w"</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="正则对象方法"><a href="#正则对象方法" class="headerlink" title="正则对象方法"></a>正则对象方法</h2><h3 id="RegExp-prototype-test-str"><a href="#RegExp-prototype-test-str" class="headerlink" title="RegExp.prototype.test(str)"></a><code>RegExp.prototype.test(str)</code></h3><ul><li>用于测试字符串参数中是否存在匹配正则表达式模式的字符串</li><li><p>如果存在则返回 <code>true</code>，否则返回 <code>false</code></p><p>  牛刀小试：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/</span>;</span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">'a'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);   <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'$'</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>  加上 <code>g</code> 标志后，结果有了一丝不同~~</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>);    <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p>这是因为在匹配的时候并不是每次都是从头开始的，而是每次匹配都会从上次匹配结果的下一个位置开始匹配，也就是 <code>lastIndex</code> 属性</p><ul><li>第一次匹配到 <code>a</code>，</li><li>第二次从 <code>b</code> 开始，匹配到 <code>b</code></li><li>第三次从 <code>b</code> 开始，没有匹配结果</li><li><p>因此出现上面的现象</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="keyword">while</span>(reg.test(<span class="string">'ab'</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果为 1，2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong> <code>test()</code> 本意测试字符串和正则能否匹配上，而不关心是在哪个位置匹配到，所以就没必要加上 <code>g</code> 标志。</strong></p><h3 id="RegExp-prototype-exec-str"><a href="#RegExp-prototype-exec-str" class="headerlink" title="RegExp.prototype.exec(str)"></a><code>RegExp.prototype.exec(str)</code></h3><ul><li>使用正则表达式对字符串进行搜索，并将更新全局 RegExp 对象的属性以反映匹配结果</li><li>如果没有匹配的文本则返回 <code>null</code>，否则返回一个结果数组，数组有两个属性：<ul><li>index 声明匹配文本地第一个字符的位置</li><li>input 存放被检索的字符串 <code>string</code></li><li>第一个元素是与正则表达式相匹配的文本</li><li>第二个元素是与正则表达式的第一个子表达式相匹配的文本（如果有的话）</li><li>第三个元素是与正则表达式的第二个子表达式相匹配的文本（如果有的话），以此类推…</li></ul></li></ul><h4 id="非全局调用-exec-，返回数组"><a href="#非全局调用-exec-，返回数组" class="headerlink" title="非全局调用 exec() ，返回数组"></a>非全局调用 <code>exec()</code> ，返回数组</h4><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d(\w)\d/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1a2b3c4d5e'</span>;</span><br><span class="line"><span class="keyword">var</span> ret = reg.exec(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);  </span><br><span class="line"><span class="comment">// 0  非全局下，lastIndex 不生效，在此处无意义</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ret.index);      </span><br><span class="line"><span class="comment">// 0  匹配结果（1a2）的第一个字符在被检索的字符串(1a2b3c4d5e)中的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ret.input);      </span><br><span class="line"><span class="comment">// 1a2b3c4d5e</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ret.toString()); </span><br><span class="line"><span class="comment">// 1a2,a</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到"><a href="#全局调用-exec-时，可以通过循环可以把每次匹配到的结果都拿到" class="headerlink" title="全局调用 exec() 时，可以通过循环可以把每次匹配到的结果都拿到"></a>全局调用 <code>exec()</code> 时，可以通过循环可以把每次匹配到的结果都拿到</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d(\w)(\w)\d/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'$1az2bb3cy4dd5ee'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ret = reg.exec(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reg.lastIndex + <span class="string">'\t'</span> + ret.index + <span class="string">'\t'</span> + ret.toString());</span><br><span class="line">    <span class="comment">// 511az2,a,z</span></span><br><span class="line">    <span class="comment">// 1173cy4,c,y</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次匹配到的字符串是 <code>1az2</code> ，它在原字符串中的下一个字符的位置为 <code>5</code> ，且它第一个字符 <code>1</code> 在原字符串的位置为 <code>1</code>，其中第一个子表达式 <code>a</code>，第二个子表达式 <code>z</code></li><li>第二次匹配到的字符串是 <code>3cy4</code> ，它在原字符串中的下一个字符的位置为 <code>11</code> ，且它第一个字符 <code>3</code> 在原字符串的位置为 <code>7</code>，其中第一个子表达式 <code>c</code>，第二个子表达式 <code>y</code></li></ul><h2 id="字符串的与正则相关的方法"><a href="#字符串的与正则相关的方法" class="headerlink" title="字符串的与正则相关的方法"></a>字符串的与正则相关的方法</h2><h3 id="01-String-prototype-replace"><a href="#01-String-prototype-replace" class="headerlink" title="01-String.prototype.replace()"></a>01-String.prototype.replace()</h3><p><code>replace()</code> 方法的参数可以是一下几种方式：</p><h4 id="1-replace-str-str"><a href="#1-replace-str-str" class="headerlink" title="1. replace( str, str )"></a>1. <code>replace( str, str )</code></h4><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a1b'</span>.replace(<span class="string">'1'</span>, <span class="string">'2'</span>);    <span class="comment">// "a2b"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a1b1c1'</span>.replace(<span class="string">'1'</span>, <span class="string">'2'</span>);    <span class="comment">// "a2b1c1"</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="2-replace-str-reg"><a href="#2-replace-str-reg" class="headerlink" title="2. replace( str, reg )"></a>2. <code>replace( str, reg )</code></h4><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a1b1c1'</span>.replace(<span class="regexp">/1/g</span>, <span class="string">'2'</span>);    <span class="comment">// "a2b2c2"</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="3-replace-str-function"><a href="#3-replace-str-function" class="headerlink" title="3. replace( str, function )"></a>3. <code>replace( str, function )</code></h4><h5 id="示例：字符串中每个数字都加-1"><a href="#示例：字符串中每个数字都加-1" class="headerlink" title="示例：字符串中每个数字都加 1"></a>示例：字符串中每个数字都加 1</h5><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a1b2c3d4e5'</span>.replace(<span class="regexp">/\d/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> match, index, origin </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 正则表达式没有分组内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(index);  <span class="comment">// 1 3 5 7 9</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(match) + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// "a2b3c4d5e6"</span></span><br></pre></td></tr></table></figure></code></pre><h5 id="示例：获取-url-中的查询参数"><a href="#示例：获取-url-中的查询参数" class="headerlink" title="示例：获取 url 中的查询参数"></a>示例：获取 <code>url</code> 中的查询参数</h5><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 准备工作：取得查询字符串</span></span><br><span class="line"><span class="comment">// 假设当前 URL 为 'http://www.baidu.com?ie=UTF-8&amp;wd=regexp'</span></span><br><span class="line"><span class="comment">// 可用如下方法获取查询字符串</span></span><br><span class="line"><span class="comment">// var searchStr = location.search.slice(1);  // 'ie=UTF-8&amp;wd=regexp'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用正则获取查询参数</span></span><br><span class="line"><span class="keyword">var</span> searchStr = <span class="string">'ie=UTF-8&amp;wd=regexp'</span>;</span><br><span class="line"><span class="keyword">var</span> paraObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">searchStr.replace(<span class="regexp">/([^=&amp;]+)=([^=&amp;]*)/ig</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> match, group1, group2, index, origin</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(match + <span class="string">'\t'</span> + group1 + <span class="string">'\t'</span> + group2 + <span class="string">'\t'</span> + index + <span class="string">'\t'</span> + origin);</span><br><span class="line">    <span class="comment">// ie=UTF-8    ie  UTF-8   0   ie=UTF-8&amp;wd=regexp</span></span><br><span class="line">    <span class="comment">// wd=regexp    wd  regexp  9   ie=UTF-8&amp;wd=regexp</span></span><br><span class="line">    paraObj[group1] = group2</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(paraObj);</span><br></pre></td></tr></table></figure></code></pre><p><strong>function 参数含义：</strong></p><ol><li>匹配字符串</li><li>正则表达式分组内容，没有分组则没有该参数</li><li>匹配项在字符串中的 <code>index</code></li><li>原字符串</li></ol><table><thead><tr><th></th><th style="text-align:center"><code>match</code></th><th style="text-align:center"><code>group1</code></th><th style="text-align:center"><code>group2</code></th><th style="text-align:center"><code>index</code></th><th style="text-align:center"><code>origin</code></th></tr></thead><tbody><tr><td>第一次</td><td style="text-align:center"><code>ie=UTF-8</code></td><td style="text-align:center"><code>ie</code></td><td style="text-align:center"><code>UTF-8</code></td><td style="text-align:center"><code>0</code></td><td style="text-align:center"><code>ie=UTF-8&amp;wd=regexp</code></td></tr><tr><td>第二次</td><td style="text-align:center"><code>wd=regexp</code></td><td style="text-align:center"><code>wd</code></td><td style="text-align:center"><code>regexp</code></td><td style="text-align:center"><code>9</code></td><td style="text-align:center"><code>ie=UTF-8&amp;wd=regexp</code></td></tr></tbody></table><h3 id="String-prototype-search-reg"><a href="#String-prototype-search-reg" class="headerlink" title="String.prototype.search(reg)"></a><code>String.prototype.search(reg)</code></h3><ul><li><code>search()</code> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串</li><li>方法返回第一个匹配结果 <code>index</code> ，差找不到返回 <code>-1</code></li><li><p><code>search()</code> 不执行全局匹配，他将会略全局标志 <code>g</code> ，并且总是从字符串的开始进行检索</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a1b2c3d4'</span>.search(<span class="string">'1'</span>);</span><br><span class="line"><span class="string">'a1b2c3d4'</span>.search(<span class="regexp">/1/</span>);</span><br></pre></td></tr></table></figure></li></ul><p>传入的参数不是正则的时候会尝试将其转换为正则</p><h3 id="String-prototype-match-reg"><a href="#String-prototype-match-reg" class="headerlink" title="String.prototype.match(reg)"></a><code>String.prototype.match(reg)</code></h3><ul><li><code>match()</code> 检索字符串，以找到一个或多个与正则表达式相匹配的文本</li><li>正则是否具有全局标志 <code>g</code> ，对结果影响很大</li></ul><h3 id="String-prototype-split-reg"><a href="#String-prototype-split-reg" class="headerlink" title="String.prototype.split(reg)"></a><code>String.prototype.split(reg)</code></h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a,b,c,d'</span>.split(<span class="string">','</span>);    <span class="comment">// ["a", "b", "c", "d"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a1b2c3d'</span>.split(<span class="regexp">/\d/</span>);   <span class="comment">// ["a", "b", "c", "d"]</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;元字符既可以是放在 &lt;code&gt;[]&lt;/code&gt; 中的任意单个字符（如 &lt;code&gt;[a]&lt;/code&gt; 表示匹配单个小写字符 &lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/categories/JavaScript/"/>
    
    
      <category term="regexp" scheme="http://wencaizhang.com/blog/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>chrome 插件集</title>
    <link href="http://wencaizhang.com/blog/archives/d2c230b5.html"/>
    <id>http://wencaizhang.com/blog/archives/d2c230b5.html</id>
    <published>2017-12-29T16:20:53.000Z</published>
    <updated>2018-01-07T14:44:29.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>chrome 插件离线安装方法（chrome 插件通常以 <code>crx</code> 格式保存）：</p><ol><li>chrome 中打开 <code>chrome://extensions/</code> 页面</li><li>把后缀为 <code>crx</code> 的插件安装文件拖拽到第一步打开的页面中</li><li>浏览器弹出确认安装的提示框，点击“添加扩展程序”即可</li></ol><p>下面的插件都在百度云盘做了备份，网盘地址：<a href="https://pan.baidu.com/s/1gfCjRTD" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfCjRTD</a></p><h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><h4 id="谷歌访问助手-访问谷歌"><a href="#谷歌访问助手-访问谷歌" class="headerlink" title="谷歌访问助手 - 访问谷歌"></a>谷歌访问助手 - <strong>访问谷歌</strong></h4><ul><li>免费，简单</li><li>坏处：需要设置hao123为主页</li></ul><h4 id="cVim-使Chrome浏览器支持Vim的快捷键"><a href="#cVim-使Chrome浏览器支持Vim的快捷键" class="headerlink" title="cVim - 使Chrome浏览器支持Vim的快捷键"></a>cVim - 使Chrome浏览器支持Vim的快捷键</h4><ul><li>支持 vim 快捷键，解放鼠标</li><li>preview:<br><img src="https://pic3.zhimg.com/725af9c97caaa38a28a67f02abad4865_r.jpg" alt=""></li></ul><h4 id="JSONView-web开发-JSON-数据格式化和高亮插件"><a href="#JSONView-web开发-JSON-数据格式化和高亮插件" class="headerlink" title="JSONView - web开发 JSON 数据格式化和高亮插件"></a>JSONView - web开发 JSON 数据格式化和高亮插件</h4><ul><li>在做开发的时候，经常需要从服务器拿数据，一般返回数据都会用 <code>json</code> 来封装。由于一些原因，从服务器端取得的json数据，往往是经过unicode编码，没有格式化的数据，很难阅读。JSONView 正是应用与这个场景，它可以将json数据进行转码和格式化，以一种清晰的形式展示给大家</li><li>preview:<br><img src="https://images.cnblogs.com/cnblogs_com/hutaoer/2.JPG" alt=""></li></ul><h4 id="Octotree-你的-GitHub-文档库"><a href="#Octotree-你的-GitHub-文档库" class="headerlink" title="Octotree - 你的 GitHub 文档库"></a>Octotree - 你的 GitHub 文档库</h4><ul><li>装了这款插件之后，可以在 GitHub 项目页面的左侧看到相应项目的树状结构图，对于项目管理以及具体的文件跳转来说非常方便。</li><li>一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octotree 之后，点击页面左侧项目的树状结构图中对应文件的图标即可下载。</li><li>preview:<br><img src="https://pic3.zhimg.com/50/e9420e572117c016241b8d59ad92f663_hd.jpg" alt=""></li></ul><h4 id="Page-Ruler-：你的网页标尺"><a href="#Page-Ruler-：你的网页标尺" class="headerlink" title="Page Ruler ：你的网页标尺"></a>Page Ruler ：你的网页标尺</h4><ul><li>屏幕尺子插件，非常精确地测量出当前页面某个元素或者是整个页面的大小尺寸</li><li>preview:<br><img src="http://chromecj.com/Content/kindeditor/attached/image/20140917/20140917221507_1406.jpg" alt=""></li></ul><h4 id="Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」"><a href="#Awesome-Autocomplete-for-GitHub-：属于-GitHub-的-「Alfred」" class="headerlink" title="Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」"></a>Awesome Autocomplete for GitHub ：属于 GitHub 的 「Alfred」</h4><ul><li>能够让你在不离开当前项目窗口的前提下，弹窗显示出你的搜索结果，非常方便</li><li>preview:<br><img src="https://pic3.zhimg.com/50/f0e5e55e6aef53722b1f62a44f8af160_hd.jpg" alt=""></li></ul><h4 id="Postman-强大的-API-amp-HTTP-请求调试工具"><a href="#Postman-强大的-API-amp-HTTP-请求调试工具" class="headerlink" title="Postman - 强大的 API &amp; HTTP 请求调试工具"></a>Postman - 强大的 API &amp; HTTP 请求调试工具</h4><ul><li>官方网址：<a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></li><li>不仅可以调试简单的 CSS、HTML、脚本等简单的网页基本信息，它还可以发送几乎所有类型的 HTTP 请求，Postman 在发送网络 HTTP 请求方面可以说是 Chrome 插件类产品中的代表产品之一</li></ul><h4 id="Infinity-新标签页"><a href="#Infinity-新标签页" class="headerlink" title="Infinity 新标签页"></a>Infinity 新标签页</h4><ul><li>Chrome 新标签页应用，重绘了几百个图标，支持自定义搜索，集成天气，带有备忘与 Todo，还可以每日更换壁纸。</li><li>如果你已经厌倦了日复一日的默认新标签页，那就试一试 Infinity 吧！</li></ul><h4 id="掘金-为设计师、程序员、产品经理每日发现优质内容"><a href="#掘金-为设计师、程序员、产品经理每日发现优质内容" class="headerlink" title="掘金 - 为设计师、程序员、产品经理每日发现优质内容"></a>掘金 - 为设计师、程序员、产品经理每日发现优质内容</h4><ul><li>聚合了国内外优质的互联网站点内容，在节省你的筛选成本的同时，帮你发现好内容。</li></ul><h4 id="Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置"><a href="#Proxy-SwitchySharp-轻松快捷地管理和切换多个代理设置" class="headerlink" title="Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置"></a>Proxy SwitchySharp - 轻松快捷地管理和切换多个代理设置</h4><ul><li>适用于需要经常切换网络代理的场景</li><li>windows 平台蛋疼的代理切换方式谁用谁知道~~~</li></ul><h4 id="WEB前端助手-FeHelper"><a href="#WEB前端助手-FeHelper" class="headerlink" title="WEB前端助手(FeHelper)"></a>WEB前端助手(FeHelper)</h4><ul><li>官方网站：<a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">WEB前端助手</a></li><li>前端开发，你值得拥有！~</li></ul><h4 id="广告终结者"><a href="#广告终结者" class="headerlink" title="广告终结者"></a>广告终结者</h4><ul><li>谁用谁知道，自从用了广告终结者，妈妈再也不用担心我看到广告了</li></ul><h4 id="猎豹翻译"><a href="#猎豹翻译" class="headerlink" title="猎豹翻译"></a>猎豹翻译</h4><ul><li>英语学习药不能停！</li><li>翻译类插件多如繁星，选择哪一款就看个人爱好了</li><li>preview:<br><img src="http://www.cnplugins.com/uploads/crximage/201606/www.cnplugins.com_dojgdllankdpofnmiiaodefbddmkjhna_1.jpg" alt=""></li></ul><h4 id="为知笔记网页剪辑器"><a href="#为知笔记网页剪辑器" class="headerlink" title="为知笔记网页剪辑器"></a>为知笔记网页剪辑器</h4><ul><li>适合为知笔记用户</li><li>可以很方便的把网页上有价值的内容保存到自己的笔记中</li></ul><h4 id="新同文堂-网页简繁转换工具"><a href="#新同文堂-网页简繁转换工具" class="headerlink" title="新同文堂 - 网页简繁转换工具"></a>新同文堂 - 网页简繁转换工具</h4><ul><li>浏览一些繁体中文网站时（如<a href="http://linux.vbird.org/linux_basic/" target="_blank" rel="noopener">鳥哥的 Linux 私房菜</a>）时还是很好用的</li></ul><h4 id="chrono-下载管理器"><a href="#chrono-下载管理器" class="headerlink" title="chrono 下载管理器"></a>chrono 下载管理器</h4><ul><li>安装之后在浏览器的右上方可以看到其标记按钮，用户可以点击选择开始、暂停、取消等基础操作。还可以自行进行下载任务的添加，而且点击下载任务还会有对应的下载详情弹出，就像桌面上的下载软件一样。另外用户可以自行设置下载的时间顺序，甚至可以将 Chrome 默认只能同时下载 6 个文件的限制提升到 20 个</li><li>preview:<br><img src="http://chromecj.com/Content/kindeditor/attached/image/20170613/20170613180057_9843.jpg" alt=""></li></ul><h4 id="Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲"><a href="#Listen-1-同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲" class="headerlink" title="Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲"></a>Listen 1 - 同时搜索并播放来自「网易云音乐，虾米，QQ音乐」的歌曲</h4><ul><li><a href="https://sspai.com/post/34149" target="_blank" rel="noopener">Listen 1，整合三大音乐平台的 Chrome 扩展 | App+1</a></li><li>preview:<br><img src="https://cdn.sspai.com/attachment/origin/2016/05/09/326891.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;chrome 插件离线安装方法（chrome 插件通常以 &lt;code&gt;crx&lt;/code&gt; 格式保存）：&lt;/p&gt;
&lt;ol&gt;

      
    
    </summary>
    
      <category term="tool" scheme="http://wencaizhang.com/blog/categories/tool/"/>
    
    
      <category term="tool" scheme="http://wencaizhang.com/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Win下必备神器之Cmder</title>
    <link href="http://wencaizhang.com/blog/archives/42235af.html"/>
    <id>http://wencaizhang.com/blog/archives/42235af.html</id>
    <published>2017-12-23T05:07:23.000Z</published>
    <updated>2018-01-07T14:44:29.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于使用 <strong>windows 系统</strong>的，需要经常和<strong>命令行</strong>打交道的童鞋，强烈推荐一个工具：Cmder（<a href="http://cmder.net/" target="_blank" rel="noopener">Cmder官网</a>: <code>http://cmder.net/</code>）</p><blockquote><p>因为<strong>好用</strong>，所以<strong>必备</strong></p></blockquote><p>本该介绍 Cmder 是什么，如何安装，如何使用……，但是已经有前辈对此进行了详细介绍：</p><ul><li><a href="https://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="noopener">Win下必备神器之Cmder</a></li><li><a href="https://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx" target="_blank" rel="noopener">介绍好用工具：Cmder ( 具有Linux 温度的Windows 命令提示字元工具 )</a></li></ul><p>因此，本篇属于 Cmder 进阶篇，适合已经对 Cmder 有所了解的童鞋阅读，如果不知 Cmder 为何物，推荐先行阅读上面文章</p><h2 id="Cmder-如何好用"><a href="#Cmder-如何好用" class="headerlink" title="Cmder 如何好用"></a>Cmder 如何好用</h2><h3 id="设置默认启动目录"><a href="#设置默认启动目录" class="headerlink" title="设置默认启动目录"></a>设置默认启动目录</h3><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>因为 Cmder 支持 ssh 命令，因此可以直接连接服务器，命令为：<code>ssh 用户名@ip</code>，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@10.2.5.187</span><br></pre></td></tr></table></figure></p><h3 id="定义-alias"><a href="#定义-alias" class="headerlink" title="定义 alias"></a>定义 alias</h3><p>  每次连接服务器都需要输入一长串命令，简直不能忍。好在 Cmder 提供了定义 alias 的功能。配置文件是 <code>cmder\config\user-aliases.cmd</code>，打开之后会发现，Cmder 已经默认定义了一些 alias。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e.=explorer .</span><br><span class="line">gl=git <span class="built_in">log</span> --oneline --all --graph --decorate  $*</span><br><span class="line">ls=ls --show-control-chars -F --color $*</span><br><span class="line"><span class="built_in">pwd</span>=<span class="built_in">cd</span></span><br><span class="line">clear=cls</span><br><span class="line"><span class="built_in">history</span>=cat <span class="string">"%CMDER_ROOT%\config\.history"</span></span><br><span class="line"><span class="built_in">unalias</span>=<span class="built_in">alias</span> /d <span class="variable">$1</span></span><br><span class="line">vi=vim $*</span><br><span class="line">cmderr=<span class="built_in">cd</span> /d <span class="string">"%CMDER_ROOT%"</span></span><br></pre></td></tr></table></figure><p>  先解释默认定义的这些 alias 的作用</p><ul><li><code>e.</code> : 用资源管理器打开 Cmder 当前所在路径</li><li><code>gl</code> : 使用 git 进行代码管理的童鞋应该不陌生，<code>git log</code> 加上一些参数</li><li><code>ls</code> : 列出当前目录下的文件和目录</li><li><code>pwd</code> : 打印当前目录的完整路径名</li><li><code>clear</code> : 清除屏幕</li><li><code>history</code> : 显示历史命令</li><li><code>unalias</code> : 这个，谁知道能告诉我一声么。。。</li><li><code>vi</code> : 打开 vim 编辑器</li><li><p><code>cmderr</code> : 切换到 Cmder.exe 所在的目录下</p><p>一键切换到指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tofe=<span class="built_in">cd</span> /d D:/www/front-end/</span><br></pre></td></tr></table></figure><p>一键连接服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">totest=ssh root@10.2.5.187</span><br><span class="line">todev=ssh root@10.2.5.188</span><br></pre></td></tr></table></figure><p>更多 alias 的可自由发挥~</p></li></ul><h3 id="各种主题"><a href="#各种主题" class="headerlink" title="各种主题"></a>各种主题</h3><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以。——陈素封。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于使用 &lt;strong&gt;windows 系统&lt;/strong&gt;的，需要经常和&lt;strong&gt;命令行&lt;/strong&gt;打交道的童鞋，强烈推荐
      
    
    </summary>
    
      <category term="tool" scheme="http://wencaizhang.com/blog/categories/tool/"/>
    
    
      <category term="tool" scheme="http://wencaizhang.com/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>切换浏览器 tab 标签时动态设置网页 title</title>
    <link href="http://wencaizhang.com/blog/archives/4e4f3b4e.html"/>
    <id>http://wencaizhang.com/blog/archives/4e4f3b4e.html</id>
    <published>2017-12-22T13:50:23.000Z</published>
    <updated>2018-01-07T14:44:29.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>在<a href="https://www.ele.me/home/" target="_blank" rel="noopener">饿了么官网</a>看到一个网页效果，在饿了么网页和其他标签页之间相互切换时，饿了么网页的 title，发生了变化。</p><p>饿了么官网: <a href="https://www.ele.me/home/" target="_blank" rel="noopener">https://www.ele.me/home/</a></p><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/change-title.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ol><li><code>visibilitychange</code> 事件，会在浏览器标签页被隐藏或显示的时候会触发</li><li><code>document.hidden</code> ，只读属性，返回一个布尔值标识当前页面是否隐藏</li><li><code>document.visibilityState</code>，只读属性，返回 <code>document</code> 的可见性，有 4 个值：<ul><li><code>visible</code> : 此时页面内容至少是部分可见。 即此页面在前景标签页中，并且窗口没有最小化</li><li><code>hidden</code> : 此时页面对用户不可见。即文档处于背景标签页或者窗口处于最小化状态，或者操作系统正处于锁屏状态</li><li><code>prerender</code> : 页面此时正在渲染中， 因此是不可见的. 文档只能从此状态开始，永远不能从其他值变为此状态</li><li><code>unloaded</code> : 页面从内存中卸载清除</li></ul></li></ol><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><ul><li><p>使用 <code>document.hidden</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> titleFocus = <span class="string">'饿了么'</span>;</span><br><span class="line"><span class="keyword">var</span> titleBlur = <span class="string">'记得回来哦'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleTitleHandler</span>(<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = bool ? titleBlur : titleFocus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  toggleTitleHandler(<span class="built_in">document</span>.hidden);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>document.visibilityState</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> titleFocus = <span class="string">'饿了么'</span>;</span><br><span class="line"><span class="keyword">var</span> titleBlur = <span class="string">'记得回来哦'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleTitleHandler</span>(<span class="params">visibilityState</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = visibilityState === <span class="string">'hidden'</span> ? titleBlur : titleFocus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  toggleTitleHandler(<span class="built_in">document</span>.visibilityState);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>  此 API 存在兼容性问题，支持 IE10+ </p><p>  推荐阅读： <a href="http://www.zhangxinxu.com/wordpress/?p=2790" target="_blank" rel="noopener">Page Visibility(页面可见性) API介绍、微拓展 - 张鑫旭</a>（PS：此处献上我的膝盖）</p><p>  最后，细心的同学可能会发现，本站也是有此效果的哦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://www.ele.me/home/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;饿了么
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git 基本概念</title>
    <link href="http://wencaizhang.com/blog/archives/f69de184.html"/>
    <id>http://wencaizhang.com/blog/archives/f69de184.html</id>
    <published>2017-12-21T05:08:23.000Z</published>
    <updated>2018-01-07T14:44:29.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-basic-usege"><a href="#git-basic-usege" class="headerlink" title="git-basic-usege"></a>git-basic-usege</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="4-个区"><a href="#4-个区" class="headerlink" title="4 个区"></a>4 个区</h3><p>使用 Git 进行版本管理，不免会遇到几个概念：工作区、暂存区、本地仓库以及远程仓库。</p><ul><li><p>工作目录：很好理解，就是需要对其进行版本管理的文件目录，也就是日常写代码的目录。</p></li><li><p>远程仓库：如果想要分享你的代码或者与其他开发人员合作，那么就需要将数据放到一台其他开发人员能够连接的服务器上。这台服务器充当代码中转站的角色，这台服务器也有一个和你本地相同的代码库。每当完成一个功能，把最新的代码推送到这个服务器的代码库，别人就通过这台服务器的代码库获取最新的代码。那么这台服务器的代码库就叫做远程仓库。</p></li><li><p>本地仓库：Git 是分布式版本控制系统，每个人电脑上都有一个完整的代码仓库。相对于远程仓库来说，自己工作用的电脑上面的代码仓库就是本地仓库。为了让远程仓库和本地仓库保持同步，就需要在本地仓库中更新和推送代码。</p></li><li><p>暂存区：工作的时候，代码进行了修改，文件发生变动，工作结束的时候，把修改的文件提交到版本库中。这时候就需要先把需要提交的文件保存到暂存区，最后把暂存区的文件提交到代码库中。</p><ol><li>希望只提交其中的部分文件</li><li>代码提交应该是一项需要慎重的工作，在提交代码之前</li></ol></li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>于是，基本的 Git 工作流程如下：</p><ol><li>在工作目录中修改某些文件</li><li>把修改的文件保存到暂存区域。</li><li>将保存在暂存区域的文件提交到本地仓库</li><li>把本地仓库更新到远程仓库</li></ol><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>相应的，在每个步骤中的文件也就处于不同的状态：</p><ol><li>未修改的文件的状态为 “未修改”</li><li>在工作目录中，已修改的文件状态为 “已修改”</li><li>把修改的文件保存到暂存区，此时文件状态由 “已修改” 变为 “已暂存”</li><li>将保存在暂存区域的文件提交到本地仓库，此时文件状态由 “已暂存” 变为 “已提交”</li><li>把本地仓库更新到远程仓库，此时文件状态由 “已提交” 变为 “已推送”</li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>假设现在有一个 git 仓库 git-learn，git 地址是：<code>https://github.com/wencaizhang/git-learn.git</code>，现在需要在这个仓库中工作。</p><h3 id="1-获取代码"><a href="#1-获取代码" class="headerlink" title="1. 获取代码"></a>1. 获取代码</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wencaizhang/git-learn.git</span><br></pre></td></tr></table></figure><p>  <img src="/images/git-clone.png" alt=""></p><p>  如图所示，仓库中目前只有一个 README.md 文件。</p><h3 id="2-修改-README-md-文件，查看仓库状态"><a href="#2-修改-README-md-文件，查看仓库状态" class="headerlink" title="2. 修改 README.md 文件，查看仓库状态"></a>2. 修改 README.md 文件，查看仓库状态</h3><p>  使用 <code>git status</code> 可以查看仓库状态</p><p>  <img src="/images/git-modify.png" alt=""></p><h3 id="3-查看修改内容"><a href="#3-查看修改内容" class="headerlink" title="3. 查看修改内容"></a>3. 查看修改内容</h3><p>  提交代码应该是一个严谨的工作，因此提交之前最好能确认本次提交的内容。使用 <code>git diff &lt;filename&gt;</code> 可以查看文件的改动情况</p><p>  <img src="/images/git-diff.png" alt=""></p><p>  <code>-</code> 表示删除，<code>+</code> 表示增加，因此，此文件删除了一行，同时增加了一行</p><h3 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4. 撤销修改"></a>4. 撤销修改</h3><p>  此时，如果因为某种原因，希望此文件还原到一开始的状态（即撤销修改的内容），可以使用 <code>git checkout &lt;filename&gt;</code> 命令</p><p>  <img src="/images/git-checkout.png" alt=""></p><h3 id="5-保存到暂存区域"><a href="#5-保存到暂存区域" class="headerlink" title="5. 保存到暂存区域"></a>5. 保存到暂存区域</h3><p>  如果不打算撤销，而是接着往下进行提交工作，那么就可以使用 <code>git add &lt;filename&gt;</code> 命令可以把修改的文件保存到暂存区</p><p>  <img src="/images/git-add.png" alt=""></p><h3 id="6-查看暂存区内容"><a href="#6-查看暂存区内容" class="headerlink" title="6. 查看暂存区内容"></a>6. 查看暂存区内容</h3><p>  在整个工作流程中，是随时都可查看修改内容的，当文件保存到暂存区之后，可以使用 <code>git diff --staged &lt;filename&gt;</code> 命令查看（和修改区查看相比，多一个参数 <code>--staged</code>）</p><p>  <img src="/images/git-diff-staged.png" alt=""></p><h3 id="7-撤销暂存"><a href="#7-撤销暂存" class="headerlink" title="7. 撤销暂存"></a>7. 撤销暂存</h3><p>  不巧的是，在上一步查看修改内容之后，发现之前的修改有所不妥，不想继续往下提交了，希望将此文件还原到一开始的状态（即撤销修改的内容）。</p><p>  这时候可以使用 <code>git reset &lt;filename&gt;</code> 命令将其从暂存区撤回，然后再使用 <code>git checkout &lt;filename&gt;</code> 命令撤销其内容修改</p><p>  <img src="/images/git-reset.png" alt=""></p><p>  <img src="/images/git-checkout.png" alt=""></p><h3 id="8-提交到本地仓库"><a href="#8-提交到本地仓库" class="headerlink" title="8. 提交到本地仓库"></a>8. 提交到本地仓库</h3><p>  如果查看了暂存区的文件确认无误，就可以把文件提交到本地仓库了。此时会将暂存区的所有文件全部提交，命令是：<code>git commit -m &quot;提交的描述信息&quot;</code></p><p>  <img src="/images/git-commit-0.png" alt=""></p><p>  wait a moment，这里提示设置邮箱和用户名（如果安装 git 之后没有设置邮箱和用户名才会有这个提示）</p><p>  按照提示进行设置邮箱和用户民，然后进行提交：<code>git commit -m &quot;add a line&quot;</code></p><p>  <img src="/images/git-commit.png" alt=""></p><h3 id="9-提交到本地仓库后查看提交记录"><a href="#9-提交到本地仓库后查看提交记录" class="headerlink" title="9. 提交到本地仓库后查看提交记录"></a>9. 提交到本地仓库后查看提交记录</h3><p>  通过命令 <code>git log</code> ，可以查看每次提交时，提交人的信息，提交时间，提交的描述信息和提交版本号</p><p>  <img src="/images/git-log.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-basic-usege&quot;&gt;&lt;a href=&quot;#git-basic-usege&quot; class=&quot;headerlink&quot; title=&quot;git-basic-usege&quot;&gt;&lt;/a&gt;git-basic-usege&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Git" scheme="http://wencaizhang.com/blog/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wencaizhang.com/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 调试小技巧</title>
    <link href="http://wencaizhang.com/blog/archives/aa3b2445.html"/>
    <id>http://wencaizhang.com/blog/archives/aa3b2445.html</id>
    <published>2017-11-28T13:30:53.000Z</published>
    <updated>2018-01-07T14:44:29.110Z</updated>
    
    <content type="html"><![CDATA[<p>编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。</p><a id="more"></a><h2 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h2><p>主要的思路是通过事件监听把错误打印出来，然后定位错误。</p><p>这是部分代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.pipe(uglify().on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p><h2 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h2><p>其实就是稍微简单封装一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createErrorHandler</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error from '</span> + name + <span class="string">' in compress task'</span>, err.toString());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify_js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./build/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify().on(<span class="string">'error'</span>, createErrorHandler(<span class="string">'uglify'</span>)))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">        .pipe($.size(&#123; <span class="attr">title</span>: <span class="string">'minify_js'</span> &#125;));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写 gulp 任务时，经常会遇到错误的情况，导致任务执行过程被中断，可以通过事件监听的方式打印错误，并让任务继续往下执行。&lt;/p&gt;
    
    </summary>
    
      <category term="Gulp" scheme="http://wencaizhang.com/blog/categories/Gulp/"/>
    
    
      <category term="Gulp" scheme="http://wencaizhang.com/blog/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装 LAMP 环境</title>
    <link href="http://wencaizhang.com/blog/archives/5ba4e681.html"/>
    <id>http://wencaizhang.com/blog/archives/5ba4e681.html</id>
    <published>2017-11-27T13:22:53.000Z</published>
    <updated>2018-01-07T14:44:29.069Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>安装开发环境亦或部署环境，向来不是一件容易的事情。<br><a id="more"></a></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ol><li>安装顺序，一定是先安装 Apache，后安装 php，因为 php 安装完成之后，会自动修改 Apache 的配置文件</li><li>关于 Apache 配置文件，有的地方叫 <code>httpd.conf</code> ，其实就是 <code>apache2.conf</code></li></ol><h3 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h3><ul><li><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br><span class="line">apt-get install mysql-client </span><br><span class="line">apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure></li><li><p>安装过程中，会提示为 root 用户设置密码</p></li><li>安装完成之后：<ul><li>连接 mysql：<code>mysql -u roo t -p</code></li><li>退出 mysql：<code>exit</code></li></ul></li></ul><h3 id="apache-安装"><a href="#apache-安装" class="headerlink" title="apache 安装"></a>apache 安装</h3><ul><li><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后，apache2 的默认主目录：<code>/var/www/</code><br>apache2 的操作命令（启动 Apache 之后，可以在浏览器中打开 <code>localhost</code> 地址查看 Apache 的默认页面）：</p><ul><li>启动：<code>/etc/init.d/apache2 start</code></li><li>重启：<code>/etc/init.d/apache2 restart</code></li><li>关闭：<code>/etc/init.d/apache2 stop</code></li></ul></li></ul><h3 id="php-安装"><a href="#php-安装" class="headerlink" title="php 安装"></a>php 安装</h3><ul><li><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后<br>查看版本信息：<code>php -v</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;安装开发环境亦或部署环境，向来不是一件容易的事情。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://wencaizhang.com/blog/tags/Linux/"/>
    
      <category term="部署环境" scheme="http://wencaizhang.com/blog/tags/%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux Tips</title>
    <link href="http://wencaizhang.com/blog/archives/2f176420.html"/>
    <id>http://wencaizhang.com/blog/archives/2f176420.html</id>
    <published>2017-11-26T13:20:53.000Z</published>
    <updated>2018-01-07T14:44:29.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改普通用户对目录的读写权限"><a href="#修改普通用户对目录的读写权限" class="headerlink" title="修改普通用户对目录的读写权限"></a>修改普通用户对目录的读写权限</h3><p>普通用户是没有文件的读写权限的，需要每次都临时获取 root 权限，但这样比较麻烦。<br>方便的做法是，修改/var/www目录的读写权限（777是linux中的最高权限，表示可读，可写，可执行）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /var/www</span><br></pre></td></tr></table></figure></p><h3 id="设置别名-alias"><a href="#设置别名-alias" class="headerlink" title="设置别名 alias"></a>设置别名 <code>alias</code></h3><p>编辑配置文件 <code>vim /etc/profile</code>，在文件中添加配置代码，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> tofe=<span class="string">"cd /var/www/rmp/spms/front-end/"</span></span><br><span class="line"><span class="built_in">alias</span> gs=<span class="string">"git status"</span></span><br></pre></td></tr></table></figure></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改普通用户对目录的读写权限&quot;&gt;&lt;a href=&quot;#修改普通用户对目录的读写权限&quot; class=&quot;headerlink&quot; title=&quot;修改普通用户对目录的读写权限&quot;&gt;&lt;/a&gt;修改普通用户对目录的读写权限&lt;/h3&gt;&lt;p&gt;普通用户是没有文件的读写权限的，需要每次都临
      
    
    </summary>
    
      <category term="Linux" scheme="http://wencaizhang.com/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://wencaizhang.com/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GET 和 POST 的区别</title>
    <link href="http://wencaizhang.com/blog/archives/d4ca5e4c.html"/>
    <id>http://wencaizhang.com/blog/archives/d4ca5e4c.html</id>
    <published>2017-11-25T15:31:23.000Z</published>
    <updated>2018-01-07T14:44:29.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从表象上看："><a href="#从表象上看：" class="headerlink" title="从表象上看："></a>从表象上看：</h2><ol><li><code>GET</code> 参数通过 URL 传递，<code>POST</code> 放在 <code>Request body</code> 中。</li><li><code>GET</code> 产生的 URL 地址可以被记录到浏览器历史中，而 <code>POST</code> 不可以。</li><li><code>GET</code> 比 <code>POST</code> 更不安全，因为参数直接暴露在 <code>URL</code> 上，所以不能用来传递敏感信息。</li><li><code>GET</code> 请求在URL中传送的参数是有长度限制的，而 <code>POST</code> 没有。</li></ol><h2 id="底层来看："><a href="#底层来看：" class="headerlink" title="底层来看："></a>底层来看：</h2><p><strong>无区别</strong></p><p>解释如下：</p><ol><li>给 <code>GET</code> 加上 <code>request body</code>，给 <code>POST</code> 带上 url 参数，技术上是完全行的通的</li><li>为了给不同的区别不同类型的请求，才定义了 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，依次对应 查、改、增、删</li><li>业界不成文的规定是，（大多数）浏览器通常都会限制 url 长度在 2K 个字节，而（大多数）服务器最多处理 64K 大小的 url。超过的部分，恕不处理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从表象上看：&quot;&gt;&lt;a href=&quot;#从表象上看：&quot; class=&quot;headerlink&quot; title=&quot;从表象上看：&quot;&gt;&lt;/a&gt;从表象上看：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; 参数通过 URL 传递，&lt;code&gt;POST&lt;/code&gt; 放
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>trim 方法</title>
    <link href="http://wencaizhang.com/blog/archives/bf9063ac.html"/>
    <id>http://wencaizhang.com/blog/archives/bf9063ac.html</id>
    <published>2017-11-25T13:31:23.000Z</published>
    <updated>2018-01-07T14:44:29.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><code>trim()</code> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。</p></blockquote><p>删除字符串两端的空白字符可以说是非常常见的需求<br><a id="more"></a><br>我通常用的是 jQuery 提供的 <code>$.trim()</code> 方法，但其实原生 JavaScript 已经提供了 <code>trim()</code> 方法，IE9 以上浏览器已经支持此方法，而且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener">MDN 文档</a> 也已经提供了兼容旧环境的方法。</p><p>so，以后并不一定非要依赖第三方库，完全可以使用原生 tirm() 方法，或者自定义此方法的兼容写法。</p><h2 id="通过正则简单实现："><a href="#通过正则简单实现：" class="headerlink" title="通过正则简单实现："></a>通过正则简单实现：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.trim) &#123;</span><br><span class="line">  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.trimLeft) &#123;</span><br><span class="line">  <span class="built_in">String</span>.prototype.trimLeft = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.trimRight) &#123;</span><br><span class="line">  <span class="built_in">String</span>.prototype.trimRight = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/\s+$/</span>,<span class="string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到的正则：</p><ol><li><code>\s</code> 匹配任何空白字符</li><li><code>+</code> 匹配至少 1 个元字符</li><li><code>^</code> 字符串必须以指定的字符开始</li><li><code>$</code> 字符串必须以指定的字符结束</li><li><code>|</code> 或者</li><li><code>g</code> 全局匹配</li></ol><h2 id="more："><a href="#more：" class="headerlink" title="more："></a>more：</h2><ul><li>更多的实现方式参考：<a href="http://www.cnblogs.com/rubylouvre/archive/2009/09/18/1568794.html" target="_blank" rel="noopener">JavaScript trim函数大赏 - 司徒正美</a></li><li>MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener">String.prototype.trim() - MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;trim()&lt;/code&gt; 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;删除字符串两端的空白字符可以说是非常常见的需求&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>好用工具集合</title>
    <link href="http://wencaizhang.com/blog/archives/2956e245.html"/>
    <id>http://wencaizhang.com/blog/archives/2956e245.html</id>
    <published>2017-11-24T12:20:53.000Z</published>
    <updated>2017-12-30T02:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事必先利其器<br>轻功不代表武功，但是速度，决定了你和我的距离<br><a id="more"></a></p></blockquote><h4 id="qimage-win-windows-版本-markdown-一键贴图工具"><a href="#qimage-win-windows-版本-markdown-一键贴图工具" class="headerlink" title="qimage-win - windows 版本 markdown 一键贴图工具"></a>qimage-win - windows 版本 markdown 一键贴图工具</h4><ul><li>地址：<a href="https://github.com/jiwenxing/qiniu-image-tool-win/releases" target="_blank" rel="noopener">https://github.com/jiwenxing/qiniu-image-tool-win/releases</a></li><li>简介：windows版本markdown一键贴图工具，支持本地文件、截图、网络图片一键上传七牛云并返回图片引用，让markdown中贴图变成一种享受。</li><li>preview：<br><img src="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true" alt=""></li></ul><h4 id="cmder-程序员的命令行神器（windows-平台）"><a href="#cmder-程序员的命令行神器（windows-平台）" class="headerlink" title="cmder - 程序员的命令行神器（windows 平台）"></a>cmder - 程序员的命令行神器（windows 平台）</h4><ul><li>地址：<a href="http://cmder.net/" target="_blank" rel="noopener">http://cmder.net/</a></li><li>简介：windows 平台最好用的命令行<ul><li>可代替 <code>cmd</code> 和 <code>powershell</code></li><li>自带 <code>Git</code></li><li>支持 <code>ssh</code> 协议，可作为虚拟终端登录服务器</li><li>支持部分 Linux 命令</li></ul></li><li>preview：<br><img src="http://cmder.net/img/main.jpg" alt=""></li></ul><h4 id="clover-为您的-Windows-Explorer-插上翅膀！"><a href="#clover-为您的-Windows-Explorer-插上翅膀！" class="headerlink" title="clover - 为您的 Windows Explorer 插上翅膀！"></a>clover - 为您的 Windows Explorer 插上翅膀！</h4><ul><li>地址：<a href="http://cn.ejie.me/" target="_blank" rel="noopener">http://cn.ejie.me/</a></li><li>简介：Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</li><li>preview：<br><img src="http://cn.ejie.me/images/clover.jpg" alt=""></li></ul><h4 id="everything-速度最快的的文件搜索工具"><a href="#everything-速度最快的的文件搜索工具" class="headerlink" title="everything - 速度最快的的文件搜索工具"></a>everything - 速度最快的的文件搜索工具</h4><ul><li>地址：<a href="http://www.voidtools.com/" target="_blank" rel="noopener">http://www.voidtools.com/</a></li><li>简介：Locate files and folders by name instantly.</li><li>preview：<br><img src="http://www.voidtools.com/support/everything/Everything.Search.Window.png" alt=""></li></ul><h4 id="FastStone-Capture"><a href="#FastStone-Capture" class="headerlink" title="FastStone Capture"></a>FastStone Capture</h4><ul><li>地址：<a href="https://faststone-capture.en.softonic.com/" target="_blank" rel="noopener">https://faststone-capture.en.softonic.com/</a></li><li>简介：Image viewer, editor and screen capture</li><li>preview：<br><img src="https://images.sftcdn.net/images/t_optimized,f_auto/p/2d6fec86-9a63-11e6-9800-00163ec9f5fa/3887784174/faststone-capture-screenshot.jpg" alt=""></li></ul><h4 id="autohotkey-win-下效率神器"><a href="#autohotkey-win-下效率神器" class="headerlink" title="autohotkey - win 下效率神器"></a>autohotkey - win 下效率神器</h4><ul><li>地址：<a href="https://autohotkey.com/" target="_blank" rel="noopener">https://autohotkey.com/</a></li><li>简介：Powerful. Easy to learn. The ultimate automation scripting language for Windows.</li></ul><h4 id="BaiduPanDownloadWinform-百度网盘不限速下载工具"><a href="#BaiduPanDownloadWinform-百度网盘不限速下载工具" class="headerlink" title="BaiduPanDownloadWinform - 百度网盘不限速下载工具"></a>BaiduPanDownloadWinform - 百度网盘不限速下载工具</h4><ul><li>地址：<a href="https://github.com/Accelerider/BaiduPanDownloadWinform/releases" target="_blank" rel="noopener">https://github.com/Accelerider/BaiduPanDownloadWinform/releases</a></li><li>简介：百度网盘不限速下载工具</li><li>preview：<br><img src="http://www.xz7.com/up/2017-11/2017112309442752887.gif" alt=""></li></ul><h4 id="TeamViewer-远程支持、远程访问、在线协作和会议"><a href="#TeamViewer-远程支持、远程访问、在线协作和会议" class="headerlink" title="TeamViewer - 远程支持、远程访问、在线协作和会议"></a>TeamViewer - 远程支持、远程访问、在线协作和会议</h4><ul><li>地址：<a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener">https://www.teamviewer.com/zhCN/</a></li><li>简介：远程桌面控制，个人免费。 如果您回到家后想连接控制在学校或公司里自己的电脑，TeamViewer无疑就是最佳的解决方案</li><li>preview：<br><img src="http://src.onlinedown.net/d/file/p/2016-09-26/900188817cb50d4f2633d3215a50da21.jpg" alt=""></li></ul><h4 id="Snipaste-开发了三年的截图工具，但不只是截图"><a href="#Snipaste-开发了三年的截图工具，但不只是截图" class="headerlink" title="Snipaste - 开发了三年的截图工具，但不只是截图"></a>Snipaste - 开发了三年的截图工具，但不只是截图</h4><ul><li>地址: <a href="https://zh.snipaste.com/download.html" target="_blank" rel="noopener">https://zh.snipaste.com/download.html</a></li><li>简介: Snipaste，顾名思义， Snip + Paste，截图 + 贴图。使用参考：<a href="https://www.v2ex.com/t/295433?p=1" target="_blank" rel="noopener">开发了三年的截图工具，但不只是截图</a></li><li>preview：<br><img src="http://ww2.sinaimg.cn/large/840a8430jw1f68mbo23png20qv0higz2.jpg" alt=""><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww2.sinaimg.cn/large/840a8430jw1f68ocr946wg20qv0hiwsz.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="Listary-Windows-文件浏览增强工具"><a href="#Listary-Windows-文件浏览增强工具" class="headerlink" title="Listary - Windows 文件浏览增强工具"></a>Listary - Windows 文件浏览增强工具</h4><ul><li>地址: <a href="http://www.listary.com/" target="_blank" rel="noopener">http://www.listary.com/</a></li><li>简介: 笨拙的文件管理系统是否减慢了你的工作流程？那就是用 Listary 吧！</li><li>preview：<br><img src="http://img1.appinn.com/2011/11/1-20111107-162041.png" alt=""></li></ul><h4 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事必先利其器&lt;br&gt;轻功不代表武功，但是速度，决定了你和我的距离&lt;br&gt;
    
    </summary>
    
      <category term="tool" scheme="http://wencaizhang.com/blog/categories/tool/"/>
    
    
      <category term="tool" scheme="http://wencaizhang.com/blog/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>React 中阻止事件冒泡</title>
    <link href="http://wencaizhang.com/blog/archives/9bcb3406.html"/>
    <id>http://wencaizhang.com/blog/archives/9bcb3406.html</id>
    <published>2017-11-19T12:20:53.000Z</published>
    <updated>2018-01-07T14:44:29.186Z</updated>
    
    <content type="html"><![CDATA[<p>react 和原生 JavaScript 阻止事件冒泡的方式是否相同？<br><a id="more"></a><br>TODO</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">???</span><br><span class="line">e.preventDefault(); // 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。但不阻止事件的冒泡传播</span><br><span class="line">e.stopPropagation() // 阻止事件的冒泡传播，但不阻止其默认行为</span><br><span class="line">returne false;      // 阻止两者</span><br><span class="line">e.preventDefault();</span><br><span class="line">e.stopPropagation();</span><br><span class="line">e.nativeEvent.stopImmediatePropagation();</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react 和原生 JavaScript 阻止事件冒泡的方式是否相同？&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://wencaizhang.com/blog/categories/React/"/>
    
    
      <category term="React" scheme="http://wencaizhang.com/blog/tags/React/"/>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React 点击事件为什么没有被触发？</title>
    <link href="http://wencaizhang.com/blog/archives/c48ecca5.html"/>
    <id>http://wencaizhang.com/blog/archives/c48ecca5.html</id>
    <published>2017-11-19T12:20:53.000Z</published>
    <updated>2018-01-07T14:44:29.141Z</updated>
    
    <content type="html"><![CDATA[<p>点击事件可以说是最常用的事件了，但在 <code>React</code> 中有时候事件却没有触发。Why?<br><a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>关键代码如下所示，<code>Title</code> 是一个标题组件，我希望在点击此组件时，执行 <code>handleClick</code> 方法。</p><p>但实际上，点击标题时 <code>handleClick</code> 方法并没有被执行。Why?<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click on container'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;Title onClick=&#123; <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>) &#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>Title</code> 是 <code>react</code> 组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。</p><p>所有的事件处理函数都必须要绑定到真实的 <code>DOM</code> 上。传给组件，组件只会认为它是个 <code>props</code>。</p><h2 id="解决办法有两种"><a href="#解决办法有两种" class="headerlink" title="解决办法有两种"></a>解决办法有两种</h2><ol><li><p>如果 <code>Title</code> 是自定义组件，可以修改组件内部，监听点击事件，通过 <code>props</code> 执行 <code>handleClick</code> 方法，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123; <span class="keyword">this</span>.props.onClick &#125; className=<span class="string">"title"</span>&gt;</span><br><span class="line">        &lt;h1&gt;React&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>Title</code> 是第三方组件，可以在 <code>Title</code> 组件外部包裹一层 <code>DOM</code> 元素，在 <code>DOM</code> 元素上监听点击事件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click on container'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;div onClick=&#123; <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>) &#125;&gt;&lt;/div&gt;&lt;Title/&gt;&lt;/div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>最后，文档是个好东西，<a href="https://reactjs.org/docs/handling-events.html" target="_blank" rel="noopener">文档地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击事件可以说是最常用的事件了，但在 &lt;code&gt;React&lt;/code&gt; 中有时候事件却没有触发。Why?&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://wencaizhang.com/blog/categories/React/"/>
    
    
      <category term="React" scheme="http://wencaizhang.com/blog/tags/React/"/>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微代码</title>
    <link href="http://wencaizhang.com/blog/archives/6f49a3ac.html"/>
    <id>http://wencaizhang.com/blog/archives/6f49a3ac.html</id>
    <published>2017-11-19T12:20:53.000Z</published>
    <updated>2018-01-07T14:44:29.129Z</updated>
    
    <content type="html"><![CDATA[<p>常用代码段，样式代码为主。<br><a id="more"></a></p><h3 id="光标形状"><a href="#光标形状" class="headerlink" title="光标形状"></a>光标形状</h3><ol><li>小手  <code>cursor: pointer;</code></li><li>等待  <code>cursor: wait;</code></li></ol><h3 id="C3属性-禁用-onclick-事件"><a href="#C3属性-禁用-onclick-事件" class="headerlink" title="C3属性 禁用 onclick 事件"></a>C3属性 禁用 <code>onclick</code> 事件</h3><p><a href="http://www.zhangxinxu.com/wordpress/2011/12/css3-pointer-events-none-javascript/" target="_blank" rel="noopener">CSS3 pointer-events:none应用举例及扩展</a></p><p><code>point-events: auto;</code></p><h3 id="网页被选中文字的背景颜色"><a href="#网页被选中文字的背景颜色" class="headerlink" title="网页被选中文字的背景颜色"></a>网页被选中文字的背景颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改placeholder文本的样式"><a href="#修改placeholder文本的样式" class="headerlink" title="修改placeholder文本的样式"></a>修改<code>placeholder</code>文本的样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本间距"><a href="#文本间距" class="headerlink" title="文本间距"></a>文本间距</h3><p><code>letter-spacing: 2px;</code></p><h3 id="去掉-input-的外边线"><a href="#去掉-input-的外边线" class="headerlink" title="去掉 input 的外边线"></a>去掉 input 的外边线</h3><p><code>outline: none;</code></p><h3 id="select-的-option-选项文本默认左对齐，通过以下是属性设置居中"><a href="#select-的-option-选项文本默认左对齐，通过以下是属性设置居中" class="headerlink" title="select 的 option 选项文本默认左对齐，通过以下是属性设置居中"></a>select 的 option 选项文本默认左对齐，通过以下是属性设置居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/* 单独一个 text-align 没有效果 */</span></span><br><span class="line">    <span class="attribute">text-align-last</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击自身以外的地方，关闭弹出层-待定"><a href="#点击自身以外的地方，关闭弹出层-待定" class="headerlink" title="点击自身以外的地方，关闭弹出层(待定)"></a>点击自身以外的地方，关闭弹出层(待定)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">".ele"</span>))&#123;</span><br><span class="line">        $(<span class="string">".ele"</span>).hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="移动端的问题"><a href="#移动端的问题" class="headerlink" title="移动端的问题"></a>移动端的问题</h3><ol><li>iOS/安卓默认样式的不同，如select、a链接</li><li>font-size 小于 10px 时候，height 等于 line-height 无法将单行文本居中</li><li>input 和 fixed定位的冲突 <a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="noopener">Web移动端Fixed布局的解决方案</a></li><li>图片</li><li>长度单位(px/em/rem)</li></ol><h3 id="原生组件样式设置问题，如-input"><a href="#原生组件样式设置问题，如-input" class="headerlink" title="原生组件样式设置问题，如 input"></a>原生组件样式设置问题，如 <code>input</code></h3><p>主要思路为隐藏原生组件的样式，设置 <code>label</code> 标签的样式</p><p>或者是通过定位、不透明度和层级等属性将原生组件和自定义样式的 <code>div</code> 位置重合，做一个样式的障眼法</p><h3 id="禁止用户选中文本"><a href="#禁止用户选中文本" class="headerlink" title="禁止用户选中文本"></a>禁止用户选中文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-khtml-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多余文本显示省略号"><a href="#多余文本显示省略号" class="headerlink" title="多余文本显示省略号"></a>多余文本显示省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>; <span class="comment">/* 固定宽度 */</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure><h3 id="双伪元素清除浮动"><a href="#双伪元素清除浮动" class="headerlink" title="双伪元素清除浮动"></a>双伪元素清除浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪元素清除浮动"><a href="#伪元素清除浮动" class="headerlink" title="伪元素清除浮动"></a>伪元素清除浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;<span class="comment">/*用来兼容ie浏览器*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用代码段，样式代码为主。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://wencaizhang.com/blog/categories/code/"/>
    
    
      <category term="code" scheme="http://wencaizhang.com/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>近期用到的 jQuery 方法整理</title>
    <link href="http://wencaizhang.com/blog/archives/347a9caf.html"/>
    <id>http://wencaizhang.com/blog/archives/347a9caf.html</id>
    <published>2017-05-27T14:22:53.000Z</published>
    <updated>2018-01-07T14:44:29.263Z</updated>
    
    <content type="html"><![CDATA[<p>好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。<br><a id="more"></a></p><h2 id="一、选择器部分"><a href="#一、选择器部分" class="headerlink" title="一、选择器部分"></a>一、选择器部分</h2><ol><li><p><code>$(&quot;input[type=&#39;radio&#39;]&quot;)</code> 选择不同 <code>type</code> 的 <code>input</code></p></li><li><p><code>$(&quot;input[type=&#39;radio&#39;]:checked&quot;)</code> 选择被选中的 <code>radio</code></p></li><li><p>选择父类元素</p><ul><li><code>$selector.parent(&#39;td&#39;)</code> 仅限于直接父类元素 <code>parent</code></li><li><code>$(this).parents(&#39;.content&#39;)</code> 只要是父类元素即可，能向父级多级查找 <code>parents</code></li></ul></li><li><p>选择子类元素</p><ul><li><code>$ele.children(&#39;p.tip&#39;);</code></li><li><code>$this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;)</code></li></ul></li><li><p>选择兄弟元素 <code>$selector.parent(&#39;td&#39;).siblings(&#39;.title&#39;)</code></p></li></ol><h2 id="二、插入和删除元素"><a href="#二、插入和删除元素" class="headerlink" title="二、插入和删除元素"></a>二、插入和删除元素</h2><h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1. 插入"></a>1. 插入</h3><ol><li><p>在被选元素的结尾插入内容</p><blockquote><p><code>$ele.append(&quot;&lt;p class=&#39;tip red&#39;&gt; &amp;nbsp;&amp;nbsp;请选择&lt;/p&gt;&quot;);</code></p></blockquote></li><li><p>在被选元素的开头插入内容</p><blockquote><p><code>$(&quot;.must&quot;).prepend(&quot;&lt;span class=&#39;red star&#39;&gt;*&amp;nbsp;&lt;/span&gt;&quot;);</code></p></blockquote></li><li><p>在被选元素之前插入内容</p><blockquote><p><code>$(&#39;.item:eq(2)&#39;).before($(&#39;.milestone&#39;));</code></p></blockquote></li><li><p>在被选元素之后插入内容</p><blockquote><p><code>$(&#39;.item:eq(2)&#39;).after($(&#39;.milestone&#39;));</code></p></blockquote></li></ol><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2. 删除"></a>2. 删除</h3><ol><li><p><code>remove()</code> 删除被选元素（及其子元素），可传入参数（选择器）作为过滤条件</p><blockquote><p><code>$tip.remove()</code> 或 <code>$(&quot;p&quot;).remove(&quot;.italic&quot;);</code></p></blockquote></li><li><p><code>empty()</code> 删除被选元素的子元素</p><blockquote><p><code>$tip.empty()</code></p></blockquote></li></ol><h2 id="三、设置元素样式"><a href="#三、设置元素样式" class="headerlink" title="三、设置元素样式"></a>三、设置元素样式</h2><h2 id="四、动画"><a href="#四、动画" class="headerlink" title="四、动画"></a>四、动画</h2><h3 id="1-animate-动画使用固定值"><a href="#1-animate-动画使用固定值" class="headerlink" title="1. animate 动画使用固定值"></a>1. <code>animate</code> 动画使用固定值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$dialog.animate(&#123;</span><br><span class="line">    top: <span class="string">"60px"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-animate-动画使用相对值"><a href="#2-animate-动画使用相对值" class="headerlink" title="2. animate 动画使用相对值"></a>2. <code>animate</code> 动画使用相对值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$dialog.animate(&#123;</span><br><span class="line">    top: <span class="string">"-=60px"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-判断当前是否有动画尚未执行完毕"><a href="#3-判断当前是否有动画尚未执行完毕" class="headerlink" title="3. 判断当前是否有动画尚未执行完毕"></a>3. 判断当前是否有动画尚未执行完毕</h3><ul><li>如果正在执行动画返回 <code>true</code><blockquote><p><code>$(&quot;.box&quot;).is(&quot;:animated&quot;)</code></p></blockquote></li></ul><h2 id="五、获取和设置元素的值"><a href="#五、获取和设置元素的值" class="headerlink" title="五、获取和设置元素的值"></a>五、获取和设置元素的值</h2><ol><li><p>获取文本域的输入的内容</p><blockquote><p><code>var $val = $this.siblings(&#39;.content&#39;).find(&#39;textarea&#39;).val();</code></p></blockquote></li><li><p>获取属性值</p><blockquote><p><code>var id = $(this).parents(&#39;.item&#39;).attr(&#39;id&#39;);</code></p></blockquote></li></ol><h2 id="六、其他的一些方法"><a href="#六、其他的一些方法" class="headerlink" title="六、其他的一些方法"></a>六、其他的一些方法</h2><ol><li><p>清空被选中的 <code>radio</code></p><blockquote><p><code>$(&quot;input[type=&#39;radio&#39;]&quot;).removeAttr(&#39;checked&#39;);</code></p></blockquote></li><li><p>判断 <code>radio</code> 是否被选中</p><blockquote><p><code>$(this).is(&quot;:checked&quot;)</code></p></blockquote></li><li><p>判断元素是否具有指定的类名</p><blockquote><p><code>$(this).hasClass(&quot;bad&quot;)</code></p></blockquote></li><li><p><code>jQuery</code> 对象有 <code>length</code> 属性，该属性表示选中的 <code>DOM</code> 元素的个数</p><blockquote><p><code>if($radiosChecked.length != 2) {}</code></p></blockquote></li><li><p>判断选中元素是否为 <code>display:none</code> 状态</p><blockquote><p><code>if(!$(this).is(&quot;:hidden&quot;)) {}</code></p></blockquote></li><li><p>序列化表单数据，用于 <code>ajax</code> 提交表单数据</p><blockquote><p><code>$(&#39;form&#39;).serialize()</code></p></blockquote></li><li><p>输入框失去焦点</p><blockquote><p><code>$(&#39;input&#39;).blur(function () {});</code></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不用 jQuery，已经快忘得差不多了。最近用 jQuery 写了不少页面，趁机总结一下。毕竟，好记性不如烂笔头。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://wencaizhang.com/blog/categories/JavaScript/"/>
    
    
      <category term="js" scheme="http://wencaizhang.com/blog/tags/js/"/>
    
      <category term="jQuery" scheme="http://wencaizhang.com/blog/tags/jQuery/"/>
    
  </entry>
  
</feed>
